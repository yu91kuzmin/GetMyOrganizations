// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Documents/InvoiceDocument.proto

#ifndef PROTOBUF_Documents_2fInvoiceDocument_2eproto__INCLUDED
#define PROTOBUF_Documents_2fInvoiceDocument_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace Diadoc {
namespace Api {
namespace Proto {
namespace Documents {
namespace InvoiceDocument {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_Documents_2fInvoiceDocument_2eproto();
void protobuf_AssignDesc_Documents_2fInvoiceDocument_2eproto();
void protobuf_ShutdownFile_Documents_2fInvoiceDocument_2eproto();

class InvoiceMetadata;
class InvoiceRevisionMetadata;
class InvoiceCorrectionMetadata;
class InvoiceCorrectionRevisionMetadata;

enum InvoiceStatus {
  UnknownInvoiceStatus = 0,
  OutboundWaitingForInvoiceReceipt = 1,
  OutboundNotFinished = 2,
  OutboundFinished = 3,
  OutboundWaitingForSenderSignature = 6,
  OutboundInvalidSenderSignature = 7,
  InboundNotFinished = 4,
  InboundFinished = 5
};
bool InvoiceStatus_IsValid(int value);
const InvoiceStatus InvoiceStatus_MIN = UnknownInvoiceStatus;
const InvoiceStatus InvoiceStatus_MAX = OutboundInvalidSenderSignature;
const int InvoiceStatus_ARRAYSIZE = InvoiceStatus_MAX + 1;

const ::google::protobuf::EnumDescriptor* InvoiceStatus_descriptor();
inline const ::std::string& InvoiceStatus_Name(InvoiceStatus value) {
  return ::google::protobuf::internal::NameOfEnum(
    InvoiceStatus_descriptor(), value);
}
inline bool InvoiceStatus_Parse(
    const ::std::string& name, InvoiceStatus* value) {
  return ::google::protobuf::internal::ParseNamedEnum<InvoiceStatus>(
    InvoiceStatus_descriptor(), name, value);
}
// ===================================================================

class InvoiceMetadata : public ::google::protobuf::Message {
 public:
  InvoiceMetadata();
  virtual ~InvoiceMetadata();

  InvoiceMetadata(const InvoiceMetadata& from);

  inline InvoiceMetadata& operator=(const InvoiceMetadata& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const InvoiceMetadata& default_instance();

  void Swap(InvoiceMetadata* other);

  // implements Message ----------------------------------------------

  InvoiceMetadata* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const InvoiceMetadata& from);
  void MergeFrom(const InvoiceMetadata& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Diadoc.Api.Proto.Documents.InvoiceDocument.InvoiceStatus InvoiceStatus = 1 [default = UnknownInvoiceStatus];
  inline bool has_invoicestatus() const;
  inline void clear_invoicestatus();
  static const int kInvoiceStatusFieldNumber = 1;
  inline ::Diadoc::Api::Proto::Documents::InvoiceDocument::InvoiceStatus invoicestatus() const;
  inline void set_invoicestatus(::Diadoc::Api::Proto::Documents::InvoiceDocument::InvoiceStatus value);

  // required string Total = 2;
  inline bool has_total() const;
  inline void clear_total();
  static const int kTotalFieldNumber = 2;
  inline const ::std::string& total() const;
  inline void set_total(const ::std::string& value);
  inline void set_total(const char* value);
  inline void set_total(const char* value, size_t size);
  inline ::std::string* mutable_total();
  inline ::std::string* release_total();
  inline void set_allocated_total(::std::string* total);

  // required string Vat = 3;
  inline bool has_vat() const;
  inline void clear_vat();
  static const int kVatFieldNumber = 3;
  inline const ::std::string& vat() const;
  inline void set_vat(const ::std::string& value);
  inline void set_vat(const char* value);
  inline void set_vat(const char* value, size_t size);
  inline ::std::string* mutable_vat();
  inline ::std::string* release_vat();
  inline void set_allocated_vat(::std::string* vat);

  // required int32 Currency = 4;
  inline bool has_currency() const;
  inline void clear_currency();
  static const int kCurrencyFieldNumber = 4;
  inline ::google::protobuf::int32 currency() const;
  inline void set_currency(::google::protobuf::int32 value);

  // required sfixed64 ConfirmationDateTimeTicks = 5;
  inline bool has_confirmationdatetimeticks() const;
  inline void clear_confirmationdatetimeticks();
  static const int kConfirmationDateTimeTicksFieldNumber = 5;
  inline ::google::protobuf::int64 confirmationdatetimeticks() const;
  inline void set_confirmationdatetimeticks(::google::protobuf::int64 value);

  // required int32 InvoiceAmendmentFlags = 6;
  inline bool has_invoiceamendmentflags() const;
  inline void clear_invoiceamendmentflags();
  static const int kInvoiceAmendmentFlagsFieldNumber = 6;
  inline ::google::protobuf::int32 invoiceamendmentflags() const;
  inline void set_invoiceamendmentflags(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:Diadoc.Api.Proto.Documents.InvoiceDocument.InvoiceMetadata)
 private:
  inline void set_has_invoicestatus();
  inline void clear_has_invoicestatus();
  inline void set_has_total();
  inline void clear_has_total();
  inline void set_has_vat();
  inline void clear_has_vat();
  inline void set_has_currency();
  inline void clear_has_currency();
  inline void set_has_confirmationdatetimeticks();
  inline void clear_has_confirmationdatetimeticks();
  inline void set_has_invoiceamendmentflags();
  inline void clear_has_invoiceamendmentflags();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* total_;
  int invoicestatus_;
  ::google::protobuf::int32 currency_;
  ::std::string* vat_;
  ::google::protobuf::int64 confirmationdatetimeticks_;
  ::google::protobuf::int32 invoiceamendmentflags_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_Documents_2fInvoiceDocument_2eproto();
  friend void protobuf_AssignDesc_Documents_2fInvoiceDocument_2eproto();
  friend void protobuf_ShutdownFile_Documents_2fInvoiceDocument_2eproto();

  void InitAsDefaultInstance();
  static InvoiceMetadata* default_instance_;
};
// -------------------------------------------------------------------

class InvoiceRevisionMetadata : public ::google::protobuf::Message {
 public:
  InvoiceRevisionMetadata();
  virtual ~InvoiceRevisionMetadata();

  InvoiceRevisionMetadata(const InvoiceRevisionMetadata& from);

  inline InvoiceRevisionMetadata& operator=(const InvoiceRevisionMetadata& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const InvoiceRevisionMetadata& default_instance();

  void Swap(InvoiceRevisionMetadata* other);

  // implements Message ----------------------------------------------

  InvoiceRevisionMetadata* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const InvoiceRevisionMetadata& from);
  void MergeFrom(const InvoiceRevisionMetadata& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Diadoc.Api.Proto.Documents.InvoiceDocument.InvoiceStatus InvoiceRevisionStatus = 1 [default = UnknownInvoiceStatus];
  inline bool has_invoicerevisionstatus() const;
  inline void clear_invoicerevisionstatus();
  static const int kInvoiceRevisionStatusFieldNumber = 1;
  inline ::Diadoc::Api::Proto::Documents::InvoiceDocument::InvoiceStatus invoicerevisionstatus() const;
  inline void set_invoicerevisionstatus(::Diadoc::Api::Proto::Documents::InvoiceDocument::InvoiceStatus value);

  // required string OriginalInvoiceNumber = 2;
  inline bool has_originalinvoicenumber() const;
  inline void clear_originalinvoicenumber();
  static const int kOriginalInvoiceNumberFieldNumber = 2;
  inline const ::std::string& originalinvoicenumber() const;
  inline void set_originalinvoicenumber(const ::std::string& value);
  inline void set_originalinvoicenumber(const char* value);
  inline void set_originalinvoicenumber(const char* value, size_t size);
  inline ::std::string* mutable_originalinvoicenumber();
  inline ::std::string* release_originalinvoicenumber();
  inline void set_allocated_originalinvoicenumber(::std::string* originalinvoicenumber);

  // required string OriginalInvoiceDate = 3;
  inline bool has_originalinvoicedate() const;
  inline void clear_originalinvoicedate();
  static const int kOriginalInvoiceDateFieldNumber = 3;
  inline const ::std::string& originalinvoicedate() const;
  inline void set_originalinvoicedate(const ::std::string& value);
  inline void set_originalinvoicedate(const char* value);
  inline void set_originalinvoicedate(const char* value, size_t size);
  inline ::std::string* mutable_originalinvoicedate();
  inline ::std::string* release_originalinvoicedate();
  inline void set_allocated_originalinvoicedate(::std::string* originalinvoicedate);

  // required string Total = 4;
  inline bool has_total() const;
  inline void clear_total();
  static const int kTotalFieldNumber = 4;
  inline const ::std::string& total() const;
  inline void set_total(const ::std::string& value);
  inline void set_total(const char* value);
  inline void set_total(const char* value, size_t size);
  inline ::std::string* mutable_total();
  inline ::std::string* release_total();
  inline void set_allocated_total(::std::string* total);

  // required string Vat = 5;
  inline bool has_vat() const;
  inline void clear_vat();
  static const int kVatFieldNumber = 5;
  inline const ::std::string& vat() const;
  inline void set_vat(const ::std::string& value);
  inline void set_vat(const char* value);
  inline void set_vat(const char* value, size_t size);
  inline ::std::string* mutable_vat();
  inline ::std::string* release_vat();
  inline void set_allocated_vat(::std::string* vat);

  // required int32 Currency = 6;
  inline bool has_currency() const;
  inline void clear_currency();
  static const int kCurrencyFieldNumber = 6;
  inline ::google::protobuf::int32 currency() const;
  inline void set_currency(::google::protobuf::int32 value);

  // required sfixed64 ConfirmationDateTimeTicks = 7;
  inline bool has_confirmationdatetimeticks() const;
  inline void clear_confirmationdatetimeticks();
  static const int kConfirmationDateTimeTicksFieldNumber = 7;
  inline ::google::protobuf::int64 confirmationdatetimeticks() const;
  inline void set_confirmationdatetimeticks(::google::protobuf::int64 value);

  // required int32 InvoiceAmendmentFlags = 8;
  inline bool has_invoiceamendmentflags() const;
  inline void clear_invoiceamendmentflags();
  static const int kInvoiceAmendmentFlagsFieldNumber = 8;
  inline ::google::protobuf::int32 invoiceamendmentflags() const;
  inline void set_invoiceamendmentflags(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:Diadoc.Api.Proto.Documents.InvoiceDocument.InvoiceRevisionMetadata)
 private:
  inline void set_has_invoicerevisionstatus();
  inline void clear_has_invoicerevisionstatus();
  inline void set_has_originalinvoicenumber();
  inline void clear_has_originalinvoicenumber();
  inline void set_has_originalinvoicedate();
  inline void clear_has_originalinvoicedate();
  inline void set_has_total();
  inline void clear_has_total();
  inline void set_has_vat();
  inline void clear_has_vat();
  inline void set_has_currency();
  inline void clear_has_currency();
  inline void set_has_confirmationdatetimeticks();
  inline void clear_has_confirmationdatetimeticks();
  inline void set_has_invoiceamendmentflags();
  inline void clear_has_invoiceamendmentflags();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* originalinvoicenumber_;
  ::std::string* originalinvoicedate_;
  int invoicerevisionstatus_;
  ::google::protobuf::int32 currency_;
  ::std::string* total_;
  ::std::string* vat_;
  ::google::protobuf::int64 confirmationdatetimeticks_;
  ::google::protobuf::int32 invoiceamendmentflags_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];

  friend void  protobuf_AddDesc_Documents_2fInvoiceDocument_2eproto();
  friend void protobuf_AssignDesc_Documents_2fInvoiceDocument_2eproto();
  friend void protobuf_ShutdownFile_Documents_2fInvoiceDocument_2eproto();

  void InitAsDefaultInstance();
  static InvoiceRevisionMetadata* default_instance_;
};
// -------------------------------------------------------------------

class InvoiceCorrectionMetadata : public ::google::protobuf::Message {
 public:
  InvoiceCorrectionMetadata();
  virtual ~InvoiceCorrectionMetadata();

  InvoiceCorrectionMetadata(const InvoiceCorrectionMetadata& from);

  inline InvoiceCorrectionMetadata& operator=(const InvoiceCorrectionMetadata& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const InvoiceCorrectionMetadata& default_instance();

  void Swap(InvoiceCorrectionMetadata* other);

  // implements Message ----------------------------------------------

  InvoiceCorrectionMetadata* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const InvoiceCorrectionMetadata& from);
  void MergeFrom(const InvoiceCorrectionMetadata& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Diadoc.Api.Proto.Documents.InvoiceDocument.InvoiceStatus InvoiceCorrectionStatus = 1 [default = UnknownInvoiceStatus];
  inline bool has_invoicecorrectionstatus() const;
  inline void clear_invoicecorrectionstatus();
  static const int kInvoiceCorrectionStatusFieldNumber = 1;
  inline ::Diadoc::Api::Proto::Documents::InvoiceDocument::InvoiceStatus invoicecorrectionstatus() const;
  inline void set_invoicecorrectionstatus(::Diadoc::Api::Proto::Documents::InvoiceDocument::InvoiceStatus value);

  // required string OriginalInvoiceNumber = 2;
  inline bool has_originalinvoicenumber() const;
  inline void clear_originalinvoicenumber();
  static const int kOriginalInvoiceNumberFieldNumber = 2;
  inline const ::std::string& originalinvoicenumber() const;
  inline void set_originalinvoicenumber(const ::std::string& value);
  inline void set_originalinvoicenumber(const char* value);
  inline void set_originalinvoicenumber(const char* value, size_t size);
  inline ::std::string* mutable_originalinvoicenumber();
  inline ::std::string* release_originalinvoicenumber();
  inline void set_allocated_originalinvoicenumber(::std::string* originalinvoicenumber);

  // required string OriginalInvoiceDate = 3;
  inline bool has_originalinvoicedate() const;
  inline void clear_originalinvoicedate();
  static const int kOriginalInvoiceDateFieldNumber = 3;
  inline const ::std::string& originalinvoicedate() const;
  inline void set_originalinvoicedate(const ::std::string& value);
  inline void set_originalinvoicedate(const char* value);
  inline void set_originalinvoicedate(const char* value, size_t size);
  inline ::std::string* mutable_originalinvoicedate();
  inline ::std::string* release_originalinvoicedate();
  inline void set_allocated_originalinvoicedate(::std::string* originalinvoicedate);

  // optional string OriginalInvoiceRevisionNumber = 4;
  inline bool has_originalinvoicerevisionnumber() const;
  inline void clear_originalinvoicerevisionnumber();
  static const int kOriginalInvoiceRevisionNumberFieldNumber = 4;
  inline const ::std::string& originalinvoicerevisionnumber() const;
  inline void set_originalinvoicerevisionnumber(const ::std::string& value);
  inline void set_originalinvoicerevisionnumber(const char* value);
  inline void set_originalinvoicerevisionnumber(const char* value, size_t size);
  inline ::std::string* mutable_originalinvoicerevisionnumber();
  inline ::std::string* release_originalinvoicerevisionnumber();
  inline void set_allocated_originalinvoicerevisionnumber(::std::string* originalinvoicerevisionnumber);

  // optional string OriginalInvoiceRevisionDate = 5;
  inline bool has_originalinvoicerevisiondate() const;
  inline void clear_originalinvoicerevisiondate();
  static const int kOriginalInvoiceRevisionDateFieldNumber = 5;
  inline const ::std::string& originalinvoicerevisiondate() const;
  inline void set_originalinvoicerevisiondate(const ::std::string& value);
  inline void set_originalinvoicerevisiondate(const char* value);
  inline void set_originalinvoicerevisiondate(const char* value, size_t size);
  inline ::std::string* mutable_originalinvoicerevisiondate();
  inline ::std::string* release_originalinvoicerevisiondate();
  inline void set_allocated_originalinvoicerevisiondate(::std::string* originalinvoicerevisiondate);

  // required string TotalInc = 6;
  inline bool has_totalinc() const;
  inline void clear_totalinc();
  static const int kTotalIncFieldNumber = 6;
  inline const ::std::string& totalinc() const;
  inline void set_totalinc(const ::std::string& value);
  inline void set_totalinc(const char* value);
  inline void set_totalinc(const char* value, size_t size);
  inline ::std::string* mutable_totalinc();
  inline ::std::string* release_totalinc();
  inline void set_allocated_totalinc(::std::string* totalinc);

  // required string TotalDec = 7;
  inline bool has_totaldec() const;
  inline void clear_totaldec();
  static const int kTotalDecFieldNumber = 7;
  inline const ::std::string& totaldec() const;
  inline void set_totaldec(const ::std::string& value);
  inline void set_totaldec(const char* value);
  inline void set_totaldec(const char* value, size_t size);
  inline ::std::string* mutable_totaldec();
  inline ::std::string* release_totaldec();
  inline void set_allocated_totaldec(::std::string* totaldec);

  // required string VatInc = 8;
  inline bool has_vatinc() const;
  inline void clear_vatinc();
  static const int kVatIncFieldNumber = 8;
  inline const ::std::string& vatinc() const;
  inline void set_vatinc(const ::std::string& value);
  inline void set_vatinc(const char* value);
  inline void set_vatinc(const char* value, size_t size);
  inline ::std::string* mutable_vatinc();
  inline ::std::string* release_vatinc();
  inline void set_allocated_vatinc(::std::string* vatinc);

  // required string VatDec = 9;
  inline bool has_vatdec() const;
  inline void clear_vatdec();
  static const int kVatDecFieldNumber = 9;
  inline const ::std::string& vatdec() const;
  inline void set_vatdec(const ::std::string& value);
  inline void set_vatdec(const char* value);
  inline void set_vatdec(const char* value, size_t size);
  inline ::std::string* mutable_vatdec();
  inline ::std::string* release_vatdec();
  inline void set_allocated_vatdec(::std::string* vatdec);

  // required int32 Currency = 10;
  inline bool has_currency() const;
  inline void clear_currency();
  static const int kCurrencyFieldNumber = 10;
  inline ::google::protobuf::int32 currency() const;
  inline void set_currency(::google::protobuf::int32 value);

  // required sfixed64 ConfirmationDateTimeTicks = 11;
  inline bool has_confirmationdatetimeticks() const;
  inline void clear_confirmationdatetimeticks();
  static const int kConfirmationDateTimeTicksFieldNumber = 11;
  inline ::google::protobuf::int64 confirmationdatetimeticks() const;
  inline void set_confirmationdatetimeticks(::google::protobuf::int64 value);

  // required int32 InvoiceAmendmentFlags = 12;
  inline bool has_invoiceamendmentflags() const;
  inline void clear_invoiceamendmentflags();
  static const int kInvoiceAmendmentFlagsFieldNumber = 12;
  inline ::google::protobuf::int32 invoiceamendmentflags() const;
  inline void set_invoiceamendmentflags(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:Diadoc.Api.Proto.Documents.InvoiceDocument.InvoiceCorrectionMetadata)
 private:
  inline void set_has_invoicecorrectionstatus();
  inline void clear_has_invoicecorrectionstatus();
  inline void set_has_originalinvoicenumber();
  inline void clear_has_originalinvoicenumber();
  inline void set_has_originalinvoicedate();
  inline void clear_has_originalinvoicedate();
  inline void set_has_originalinvoicerevisionnumber();
  inline void clear_has_originalinvoicerevisionnumber();
  inline void set_has_originalinvoicerevisiondate();
  inline void clear_has_originalinvoicerevisiondate();
  inline void set_has_totalinc();
  inline void clear_has_totalinc();
  inline void set_has_totaldec();
  inline void clear_has_totaldec();
  inline void set_has_vatinc();
  inline void clear_has_vatinc();
  inline void set_has_vatdec();
  inline void clear_has_vatdec();
  inline void set_has_currency();
  inline void clear_has_currency();
  inline void set_has_confirmationdatetimeticks();
  inline void clear_has_confirmationdatetimeticks();
  inline void set_has_invoiceamendmentflags();
  inline void clear_has_invoiceamendmentflags();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* originalinvoicenumber_;
  ::std::string* originalinvoicedate_;
  ::std::string* originalinvoicerevisionnumber_;
  ::std::string* originalinvoicerevisiondate_;
  int invoicecorrectionstatus_;
  ::google::protobuf::int32 currency_;
  ::std::string* totalinc_;
  ::std::string* totaldec_;
  ::std::string* vatinc_;
  ::std::string* vatdec_;
  ::google::protobuf::int64 confirmationdatetimeticks_;
  ::google::protobuf::int32 invoiceamendmentflags_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(12 + 31) / 32];

  friend void  protobuf_AddDesc_Documents_2fInvoiceDocument_2eproto();
  friend void protobuf_AssignDesc_Documents_2fInvoiceDocument_2eproto();
  friend void protobuf_ShutdownFile_Documents_2fInvoiceDocument_2eproto();

  void InitAsDefaultInstance();
  static InvoiceCorrectionMetadata* default_instance_;
};
// -------------------------------------------------------------------

class InvoiceCorrectionRevisionMetadata : public ::google::protobuf::Message {
 public:
  InvoiceCorrectionRevisionMetadata();
  virtual ~InvoiceCorrectionRevisionMetadata();

  InvoiceCorrectionRevisionMetadata(const InvoiceCorrectionRevisionMetadata& from);

  inline InvoiceCorrectionRevisionMetadata& operator=(const InvoiceCorrectionRevisionMetadata& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const InvoiceCorrectionRevisionMetadata& default_instance();

  void Swap(InvoiceCorrectionRevisionMetadata* other);

  // implements Message ----------------------------------------------

  InvoiceCorrectionRevisionMetadata* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const InvoiceCorrectionRevisionMetadata& from);
  void MergeFrom(const InvoiceCorrectionRevisionMetadata& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Diadoc.Api.Proto.Documents.InvoiceDocument.InvoiceStatus InvoiceCorrectionRevisionStatus = 1 [default = UnknownInvoiceStatus];
  inline bool has_invoicecorrectionrevisionstatus() const;
  inline void clear_invoicecorrectionrevisionstatus();
  static const int kInvoiceCorrectionRevisionStatusFieldNumber = 1;
  inline ::Diadoc::Api::Proto::Documents::InvoiceDocument::InvoiceStatus invoicecorrectionrevisionstatus() const;
  inline void set_invoicecorrectionrevisionstatus(::Diadoc::Api::Proto::Documents::InvoiceDocument::InvoiceStatus value);

  // required string OriginalInvoiceNumber = 2;
  inline bool has_originalinvoicenumber() const;
  inline void clear_originalinvoicenumber();
  static const int kOriginalInvoiceNumberFieldNumber = 2;
  inline const ::std::string& originalinvoicenumber() const;
  inline void set_originalinvoicenumber(const ::std::string& value);
  inline void set_originalinvoicenumber(const char* value);
  inline void set_originalinvoicenumber(const char* value, size_t size);
  inline ::std::string* mutable_originalinvoicenumber();
  inline ::std::string* release_originalinvoicenumber();
  inline void set_allocated_originalinvoicenumber(::std::string* originalinvoicenumber);

  // required string OriginalInvoiceDate = 3;
  inline bool has_originalinvoicedate() const;
  inline void clear_originalinvoicedate();
  static const int kOriginalInvoiceDateFieldNumber = 3;
  inline const ::std::string& originalinvoicedate() const;
  inline void set_originalinvoicedate(const ::std::string& value);
  inline void set_originalinvoicedate(const char* value);
  inline void set_originalinvoicedate(const char* value, size_t size);
  inline ::std::string* mutable_originalinvoicedate();
  inline ::std::string* release_originalinvoicedate();
  inline void set_allocated_originalinvoicedate(::std::string* originalinvoicedate);

  // optional string OriginalInvoiceRevisionNumber = 4;
  inline bool has_originalinvoicerevisionnumber() const;
  inline void clear_originalinvoicerevisionnumber();
  static const int kOriginalInvoiceRevisionNumberFieldNumber = 4;
  inline const ::std::string& originalinvoicerevisionnumber() const;
  inline void set_originalinvoicerevisionnumber(const ::std::string& value);
  inline void set_originalinvoicerevisionnumber(const char* value);
  inline void set_originalinvoicerevisionnumber(const char* value, size_t size);
  inline ::std::string* mutable_originalinvoicerevisionnumber();
  inline ::std::string* release_originalinvoicerevisionnumber();
  inline void set_allocated_originalinvoicerevisionnumber(::std::string* originalinvoicerevisionnumber);

  // optional string OriginalInvoiceRevisionDate = 5;
  inline bool has_originalinvoicerevisiondate() const;
  inline void clear_originalinvoicerevisiondate();
  static const int kOriginalInvoiceRevisionDateFieldNumber = 5;
  inline const ::std::string& originalinvoicerevisiondate() const;
  inline void set_originalinvoicerevisiondate(const ::std::string& value);
  inline void set_originalinvoicerevisiondate(const char* value);
  inline void set_originalinvoicerevisiondate(const char* value, size_t size);
  inline ::std::string* mutable_originalinvoicerevisiondate();
  inline ::std::string* release_originalinvoicerevisiondate();
  inline void set_allocated_originalinvoicerevisiondate(::std::string* originalinvoicerevisiondate);

  // required string OriginalInvoiceCorrectionNumber = 6;
  inline bool has_originalinvoicecorrectionnumber() const;
  inline void clear_originalinvoicecorrectionnumber();
  static const int kOriginalInvoiceCorrectionNumberFieldNumber = 6;
  inline const ::std::string& originalinvoicecorrectionnumber() const;
  inline void set_originalinvoicecorrectionnumber(const ::std::string& value);
  inline void set_originalinvoicecorrectionnumber(const char* value);
  inline void set_originalinvoicecorrectionnumber(const char* value, size_t size);
  inline ::std::string* mutable_originalinvoicecorrectionnumber();
  inline ::std::string* release_originalinvoicecorrectionnumber();
  inline void set_allocated_originalinvoicecorrectionnumber(::std::string* originalinvoicecorrectionnumber);

  // required string OriginalInvoiceCorrectionDate = 7;
  inline bool has_originalinvoicecorrectiondate() const;
  inline void clear_originalinvoicecorrectiondate();
  static const int kOriginalInvoiceCorrectionDateFieldNumber = 7;
  inline const ::std::string& originalinvoicecorrectiondate() const;
  inline void set_originalinvoicecorrectiondate(const ::std::string& value);
  inline void set_originalinvoicecorrectiondate(const char* value);
  inline void set_originalinvoicecorrectiondate(const char* value, size_t size);
  inline ::std::string* mutable_originalinvoicecorrectiondate();
  inline ::std::string* release_originalinvoicecorrectiondate();
  inline void set_allocated_originalinvoicecorrectiondate(::std::string* originalinvoicecorrectiondate);

  // required string TotalInc = 8;
  inline bool has_totalinc() const;
  inline void clear_totalinc();
  static const int kTotalIncFieldNumber = 8;
  inline const ::std::string& totalinc() const;
  inline void set_totalinc(const ::std::string& value);
  inline void set_totalinc(const char* value);
  inline void set_totalinc(const char* value, size_t size);
  inline ::std::string* mutable_totalinc();
  inline ::std::string* release_totalinc();
  inline void set_allocated_totalinc(::std::string* totalinc);

  // required string TotalDec = 9;
  inline bool has_totaldec() const;
  inline void clear_totaldec();
  static const int kTotalDecFieldNumber = 9;
  inline const ::std::string& totaldec() const;
  inline void set_totaldec(const ::std::string& value);
  inline void set_totaldec(const char* value);
  inline void set_totaldec(const char* value, size_t size);
  inline ::std::string* mutable_totaldec();
  inline ::std::string* release_totaldec();
  inline void set_allocated_totaldec(::std::string* totaldec);

  // required string VatInc = 10;
  inline bool has_vatinc() const;
  inline void clear_vatinc();
  static const int kVatIncFieldNumber = 10;
  inline const ::std::string& vatinc() const;
  inline void set_vatinc(const ::std::string& value);
  inline void set_vatinc(const char* value);
  inline void set_vatinc(const char* value, size_t size);
  inline ::std::string* mutable_vatinc();
  inline ::std::string* release_vatinc();
  inline void set_allocated_vatinc(::std::string* vatinc);

  // required string VatDec = 11;
  inline bool has_vatdec() const;
  inline void clear_vatdec();
  static const int kVatDecFieldNumber = 11;
  inline const ::std::string& vatdec() const;
  inline void set_vatdec(const ::std::string& value);
  inline void set_vatdec(const char* value);
  inline void set_vatdec(const char* value, size_t size);
  inline ::std::string* mutable_vatdec();
  inline ::std::string* release_vatdec();
  inline void set_allocated_vatdec(::std::string* vatdec);

  // required int32 Currency = 12;
  inline bool has_currency() const;
  inline void clear_currency();
  static const int kCurrencyFieldNumber = 12;
  inline ::google::protobuf::int32 currency() const;
  inline void set_currency(::google::protobuf::int32 value);

  // required sfixed64 ConfirmationDateTimeTicks = 13;
  inline bool has_confirmationdatetimeticks() const;
  inline void clear_confirmationdatetimeticks();
  static const int kConfirmationDateTimeTicksFieldNumber = 13;
  inline ::google::protobuf::int64 confirmationdatetimeticks() const;
  inline void set_confirmationdatetimeticks(::google::protobuf::int64 value);

  // required int32 InvoiceAmendmentFlags = 14;
  inline bool has_invoiceamendmentflags() const;
  inline void clear_invoiceamendmentflags();
  static const int kInvoiceAmendmentFlagsFieldNumber = 14;
  inline ::google::protobuf::int32 invoiceamendmentflags() const;
  inline void set_invoiceamendmentflags(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:Diadoc.Api.Proto.Documents.InvoiceDocument.InvoiceCorrectionRevisionMetadata)
 private:
  inline void set_has_invoicecorrectionrevisionstatus();
  inline void clear_has_invoicecorrectionrevisionstatus();
  inline void set_has_originalinvoicenumber();
  inline void clear_has_originalinvoicenumber();
  inline void set_has_originalinvoicedate();
  inline void clear_has_originalinvoicedate();
  inline void set_has_originalinvoicerevisionnumber();
  inline void clear_has_originalinvoicerevisionnumber();
  inline void set_has_originalinvoicerevisiondate();
  inline void clear_has_originalinvoicerevisiondate();
  inline void set_has_originalinvoicecorrectionnumber();
  inline void clear_has_originalinvoicecorrectionnumber();
  inline void set_has_originalinvoicecorrectiondate();
  inline void clear_has_originalinvoicecorrectiondate();
  inline void set_has_totalinc();
  inline void clear_has_totalinc();
  inline void set_has_totaldec();
  inline void clear_has_totaldec();
  inline void set_has_vatinc();
  inline void clear_has_vatinc();
  inline void set_has_vatdec();
  inline void clear_has_vatdec();
  inline void set_has_currency();
  inline void clear_has_currency();
  inline void set_has_confirmationdatetimeticks();
  inline void clear_has_confirmationdatetimeticks();
  inline void set_has_invoiceamendmentflags();
  inline void clear_has_invoiceamendmentflags();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* originalinvoicenumber_;
  ::std::string* originalinvoicedate_;
  ::std::string* originalinvoicerevisionnumber_;
  ::std::string* originalinvoicerevisiondate_;
  ::std::string* originalinvoicecorrectionnumber_;
  int invoicecorrectionrevisionstatus_;
  ::google::protobuf::int32 currency_;
  ::std::string* originalinvoicecorrectiondate_;
  ::std::string* totalinc_;
  ::std::string* totaldec_;
  ::std::string* vatinc_;
  ::std::string* vatdec_;
  ::google::protobuf::int64 confirmationdatetimeticks_;
  ::google::protobuf::int32 invoiceamendmentflags_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(14 + 31) / 32];

  friend void  protobuf_AddDesc_Documents_2fInvoiceDocument_2eproto();
  friend void protobuf_AssignDesc_Documents_2fInvoiceDocument_2eproto();
  friend void protobuf_ShutdownFile_Documents_2fInvoiceDocument_2eproto();

  void InitAsDefaultInstance();
  static InvoiceCorrectionRevisionMetadata* default_instance_;
};
// ===================================================================


// ===================================================================

// InvoiceMetadata

// optional .Diadoc.Api.Proto.Documents.InvoiceDocument.InvoiceStatus InvoiceStatus = 1 [default = UnknownInvoiceStatus];
inline bool InvoiceMetadata::has_invoicestatus() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void InvoiceMetadata::set_has_invoicestatus() {
  _has_bits_[0] |= 0x00000001u;
}
inline void InvoiceMetadata::clear_has_invoicestatus() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void InvoiceMetadata::clear_invoicestatus() {
  invoicestatus_ = 0;
  clear_has_invoicestatus();
}
inline ::Diadoc::Api::Proto::Documents::InvoiceDocument::InvoiceStatus InvoiceMetadata::invoicestatus() const {
  return static_cast< ::Diadoc::Api::Proto::Documents::InvoiceDocument::InvoiceStatus >(invoicestatus_);
}
inline void InvoiceMetadata::set_invoicestatus(::Diadoc::Api::Proto::Documents::InvoiceDocument::InvoiceStatus value) {
  assert(::Diadoc::Api::Proto::Documents::InvoiceDocument::InvoiceStatus_IsValid(value));
  set_has_invoicestatus();
  invoicestatus_ = value;
}

// required string Total = 2;
inline bool InvoiceMetadata::has_total() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void InvoiceMetadata::set_has_total() {
  _has_bits_[0] |= 0x00000002u;
}
inline void InvoiceMetadata::clear_has_total() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void InvoiceMetadata::clear_total() {
  if (total_ != &::google::protobuf::internal::kEmptyString) {
    total_->clear();
  }
  clear_has_total();
}
inline const ::std::string& InvoiceMetadata::total() const {
  return *total_;
}
inline void InvoiceMetadata::set_total(const ::std::string& value) {
  set_has_total();
  if (total_ == &::google::protobuf::internal::kEmptyString) {
    total_ = new ::std::string;
  }
  total_->assign(value);
}
inline void InvoiceMetadata::set_total(const char* value) {
  set_has_total();
  if (total_ == &::google::protobuf::internal::kEmptyString) {
    total_ = new ::std::string;
  }
  total_->assign(value);
}
inline void InvoiceMetadata::set_total(const char* value, size_t size) {
  set_has_total();
  if (total_ == &::google::protobuf::internal::kEmptyString) {
    total_ = new ::std::string;
  }
  total_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* InvoiceMetadata::mutable_total() {
  set_has_total();
  if (total_ == &::google::protobuf::internal::kEmptyString) {
    total_ = new ::std::string;
  }
  return total_;
}
inline ::std::string* InvoiceMetadata::release_total() {
  clear_has_total();
  if (total_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = total_;
    total_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void InvoiceMetadata::set_allocated_total(::std::string* total) {
  if (total_ != &::google::protobuf::internal::kEmptyString) {
    delete total_;
  }
  if (total) {
    set_has_total();
    total_ = total;
  } else {
    clear_has_total();
    total_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string Vat = 3;
inline bool InvoiceMetadata::has_vat() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void InvoiceMetadata::set_has_vat() {
  _has_bits_[0] |= 0x00000004u;
}
inline void InvoiceMetadata::clear_has_vat() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void InvoiceMetadata::clear_vat() {
  if (vat_ != &::google::protobuf::internal::kEmptyString) {
    vat_->clear();
  }
  clear_has_vat();
}
inline const ::std::string& InvoiceMetadata::vat() const {
  return *vat_;
}
inline void InvoiceMetadata::set_vat(const ::std::string& value) {
  set_has_vat();
  if (vat_ == &::google::protobuf::internal::kEmptyString) {
    vat_ = new ::std::string;
  }
  vat_->assign(value);
}
inline void InvoiceMetadata::set_vat(const char* value) {
  set_has_vat();
  if (vat_ == &::google::protobuf::internal::kEmptyString) {
    vat_ = new ::std::string;
  }
  vat_->assign(value);
}
inline void InvoiceMetadata::set_vat(const char* value, size_t size) {
  set_has_vat();
  if (vat_ == &::google::protobuf::internal::kEmptyString) {
    vat_ = new ::std::string;
  }
  vat_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* InvoiceMetadata::mutable_vat() {
  set_has_vat();
  if (vat_ == &::google::protobuf::internal::kEmptyString) {
    vat_ = new ::std::string;
  }
  return vat_;
}
inline ::std::string* InvoiceMetadata::release_vat() {
  clear_has_vat();
  if (vat_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = vat_;
    vat_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void InvoiceMetadata::set_allocated_vat(::std::string* vat) {
  if (vat_ != &::google::protobuf::internal::kEmptyString) {
    delete vat_;
  }
  if (vat) {
    set_has_vat();
    vat_ = vat;
  } else {
    clear_has_vat();
    vat_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 Currency = 4;
inline bool InvoiceMetadata::has_currency() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void InvoiceMetadata::set_has_currency() {
  _has_bits_[0] |= 0x00000008u;
}
inline void InvoiceMetadata::clear_has_currency() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void InvoiceMetadata::clear_currency() {
  currency_ = 0;
  clear_has_currency();
}
inline ::google::protobuf::int32 InvoiceMetadata::currency() const {
  return currency_;
}
inline void InvoiceMetadata::set_currency(::google::protobuf::int32 value) {
  set_has_currency();
  currency_ = value;
}

// required sfixed64 ConfirmationDateTimeTicks = 5;
inline bool InvoiceMetadata::has_confirmationdatetimeticks() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void InvoiceMetadata::set_has_confirmationdatetimeticks() {
  _has_bits_[0] |= 0x00000010u;
}
inline void InvoiceMetadata::clear_has_confirmationdatetimeticks() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void InvoiceMetadata::clear_confirmationdatetimeticks() {
  confirmationdatetimeticks_ = GOOGLE_LONGLONG(0);
  clear_has_confirmationdatetimeticks();
}
inline ::google::protobuf::int64 InvoiceMetadata::confirmationdatetimeticks() const {
  return confirmationdatetimeticks_;
}
inline void InvoiceMetadata::set_confirmationdatetimeticks(::google::protobuf::int64 value) {
  set_has_confirmationdatetimeticks();
  confirmationdatetimeticks_ = value;
}

// required int32 InvoiceAmendmentFlags = 6;
inline bool InvoiceMetadata::has_invoiceamendmentflags() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void InvoiceMetadata::set_has_invoiceamendmentflags() {
  _has_bits_[0] |= 0x00000020u;
}
inline void InvoiceMetadata::clear_has_invoiceamendmentflags() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void InvoiceMetadata::clear_invoiceamendmentflags() {
  invoiceamendmentflags_ = 0;
  clear_has_invoiceamendmentflags();
}
inline ::google::protobuf::int32 InvoiceMetadata::invoiceamendmentflags() const {
  return invoiceamendmentflags_;
}
inline void InvoiceMetadata::set_invoiceamendmentflags(::google::protobuf::int32 value) {
  set_has_invoiceamendmentflags();
  invoiceamendmentflags_ = value;
}

// -------------------------------------------------------------------

// InvoiceRevisionMetadata

// optional .Diadoc.Api.Proto.Documents.InvoiceDocument.InvoiceStatus InvoiceRevisionStatus = 1 [default = UnknownInvoiceStatus];
inline bool InvoiceRevisionMetadata::has_invoicerevisionstatus() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void InvoiceRevisionMetadata::set_has_invoicerevisionstatus() {
  _has_bits_[0] |= 0x00000001u;
}
inline void InvoiceRevisionMetadata::clear_has_invoicerevisionstatus() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void InvoiceRevisionMetadata::clear_invoicerevisionstatus() {
  invoicerevisionstatus_ = 0;
  clear_has_invoicerevisionstatus();
}
inline ::Diadoc::Api::Proto::Documents::InvoiceDocument::InvoiceStatus InvoiceRevisionMetadata::invoicerevisionstatus() const {
  return static_cast< ::Diadoc::Api::Proto::Documents::InvoiceDocument::InvoiceStatus >(invoicerevisionstatus_);
}
inline void InvoiceRevisionMetadata::set_invoicerevisionstatus(::Diadoc::Api::Proto::Documents::InvoiceDocument::InvoiceStatus value) {
  assert(::Diadoc::Api::Proto::Documents::InvoiceDocument::InvoiceStatus_IsValid(value));
  set_has_invoicerevisionstatus();
  invoicerevisionstatus_ = value;
}

// required string OriginalInvoiceNumber = 2;
inline bool InvoiceRevisionMetadata::has_originalinvoicenumber() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void InvoiceRevisionMetadata::set_has_originalinvoicenumber() {
  _has_bits_[0] |= 0x00000002u;
}
inline void InvoiceRevisionMetadata::clear_has_originalinvoicenumber() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void InvoiceRevisionMetadata::clear_originalinvoicenumber() {
  if (originalinvoicenumber_ != &::google::protobuf::internal::kEmptyString) {
    originalinvoicenumber_->clear();
  }
  clear_has_originalinvoicenumber();
}
inline const ::std::string& InvoiceRevisionMetadata::originalinvoicenumber() const {
  return *originalinvoicenumber_;
}
inline void InvoiceRevisionMetadata::set_originalinvoicenumber(const ::std::string& value) {
  set_has_originalinvoicenumber();
  if (originalinvoicenumber_ == &::google::protobuf::internal::kEmptyString) {
    originalinvoicenumber_ = new ::std::string;
  }
  originalinvoicenumber_->assign(value);
}
inline void InvoiceRevisionMetadata::set_originalinvoicenumber(const char* value) {
  set_has_originalinvoicenumber();
  if (originalinvoicenumber_ == &::google::protobuf::internal::kEmptyString) {
    originalinvoicenumber_ = new ::std::string;
  }
  originalinvoicenumber_->assign(value);
}
inline void InvoiceRevisionMetadata::set_originalinvoicenumber(const char* value, size_t size) {
  set_has_originalinvoicenumber();
  if (originalinvoicenumber_ == &::google::protobuf::internal::kEmptyString) {
    originalinvoicenumber_ = new ::std::string;
  }
  originalinvoicenumber_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* InvoiceRevisionMetadata::mutable_originalinvoicenumber() {
  set_has_originalinvoicenumber();
  if (originalinvoicenumber_ == &::google::protobuf::internal::kEmptyString) {
    originalinvoicenumber_ = new ::std::string;
  }
  return originalinvoicenumber_;
}
inline ::std::string* InvoiceRevisionMetadata::release_originalinvoicenumber() {
  clear_has_originalinvoicenumber();
  if (originalinvoicenumber_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = originalinvoicenumber_;
    originalinvoicenumber_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void InvoiceRevisionMetadata::set_allocated_originalinvoicenumber(::std::string* originalinvoicenumber) {
  if (originalinvoicenumber_ != &::google::protobuf::internal::kEmptyString) {
    delete originalinvoicenumber_;
  }
  if (originalinvoicenumber) {
    set_has_originalinvoicenumber();
    originalinvoicenumber_ = originalinvoicenumber;
  } else {
    clear_has_originalinvoicenumber();
    originalinvoicenumber_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string OriginalInvoiceDate = 3;
inline bool InvoiceRevisionMetadata::has_originalinvoicedate() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void InvoiceRevisionMetadata::set_has_originalinvoicedate() {
  _has_bits_[0] |= 0x00000004u;
}
inline void InvoiceRevisionMetadata::clear_has_originalinvoicedate() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void InvoiceRevisionMetadata::clear_originalinvoicedate() {
  if (originalinvoicedate_ != &::google::protobuf::internal::kEmptyString) {
    originalinvoicedate_->clear();
  }
  clear_has_originalinvoicedate();
}
inline const ::std::string& InvoiceRevisionMetadata::originalinvoicedate() const {
  return *originalinvoicedate_;
}
inline void InvoiceRevisionMetadata::set_originalinvoicedate(const ::std::string& value) {
  set_has_originalinvoicedate();
  if (originalinvoicedate_ == &::google::protobuf::internal::kEmptyString) {
    originalinvoicedate_ = new ::std::string;
  }
  originalinvoicedate_->assign(value);
}
inline void InvoiceRevisionMetadata::set_originalinvoicedate(const char* value) {
  set_has_originalinvoicedate();
  if (originalinvoicedate_ == &::google::protobuf::internal::kEmptyString) {
    originalinvoicedate_ = new ::std::string;
  }
  originalinvoicedate_->assign(value);
}
inline void InvoiceRevisionMetadata::set_originalinvoicedate(const char* value, size_t size) {
  set_has_originalinvoicedate();
  if (originalinvoicedate_ == &::google::protobuf::internal::kEmptyString) {
    originalinvoicedate_ = new ::std::string;
  }
  originalinvoicedate_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* InvoiceRevisionMetadata::mutable_originalinvoicedate() {
  set_has_originalinvoicedate();
  if (originalinvoicedate_ == &::google::protobuf::internal::kEmptyString) {
    originalinvoicedate_ = new ::std::string;
  }
  return originalinvoicedate_;
}
inline ::std::string* InvoiceRevisionMetadata::release_originalinvoicedate() {
  clear_has_originalinvoicedate();
  if (originalinvoicedate_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = originalinvoicedate_;
    originalinvoicedate_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void InvoiceRevisionMetadata::set_allocated_originalinvoicedate(::std::string* originalinvoicedate) {
  if (originalinvoicedate_ != &::google::protobuf::internal::kEmptyString) {
    delete originalinvoicedate_;
  }
  if (originalinvoicedate) {
    set_has_originalinvoicedate();
    originalinvoicedate_ = originalinvoicedate;
  } else {
    clear_has_originalinvoicedate();
    originalinvoicedate_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string Total = 4;
inline bool InvoiceRevisionMetadata::has_total() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void InvoiceRevisionMetadata::set_has_total() {
  _has_bits_[0] |= 0x00000008u;
}
inline void InvoiceRevisionMetadata::clear_has_total() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void InvoiceRevisionMetadata::clear_total() {
  if (total_ != &::google::protobuf::internal::kEmptyString) {
    total_->clear();
  }
  clear_has_total();
}
inline const ::std::string& InvoiceRevisionMetadata::total() const {
  return *total_;
}
inline void InvoiceRevisionMetadata::set_total(const ::std::string& value) {
  set_has_total();
  if (total_ == &::google::protobuf::internal::kEmptyString) {
    total_ = new ::std::string;
  }
  total_->assign(value);
}
inline void InvoiceRevisionMetadata::set_total(const char* value) {
  set_has_total();
  if (total_ == &::google::protobuf::internal::kEmptyString) {
    total_ = new ::std::string;
  }
  total_->assign(value);
}
inline void InvoiceRevisionMetadata::set_total(const char* value, size_t size) {
  set_has_total();
  if (total_ == &::google::protobuf::internal::kEmptyString) {
    total_ = new ::std::string;
  }
  total_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* InvoiceRevisionMetadata::mutable_total() {
  set_has_total();
  if (total_ == &::google::protobuf::internal::kEmptyString) {
    total_ = new ::std::string;
  }
  return total_;
}
inline ::std::string* InvoiceRevisionMetadata::release_total() {
  clear_has_total();
  if (total_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = total_;
    total_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void InvoiceRevisionMetadata::set_allocated_total(::std::string* total) {
  if (total_ != &::google::protobuf::internal::kEmptyString) {
    delete total_;
  }
  if (total) {
    set_has_total();
    total_ = total;
  } else {
    clear_has_total();
    total_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string Vat = 5;
inline bool InvoiceRevisionMetadata::has_vat() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void InvoiceRevisionMetadata::set_has_vat() {
  _has_bits_[0] |= 0x00000010u;
}
inline void InvoiceRevisionMetadata::clear_has_vat() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void InvoiceRevisionMetadata::clear_vat() {
  if (vat_ != &::google::protobuf::internal::kEmptyString) {
    vat_->clear();
  }
  clear_has_vat();
}
inline const ::std::string& InvoiceRevisionMetadata::vat() const {
  return *vat_;
}
inline void InvoiceRevisionMetadata::set_vat(const ::std::string& value) {
  set_has_vat();
  if (vat_ == &::google::protobuf::internal::kEmptyString) {
    vat_ = new ::std::string;
  }
  vat_->assign(value);
}
inline void InvoiceRevisionMetadata::set_vat(const char* value) {
  set_has_vat();
  if (vat_ == &::google::protobuf::internal::kEmptyString) {
    vat_ = new ::std::string;
  }
  vat_->assign(value);
}
inline void InvoiceRevisionMetadata::set_vat(const char* value, size_t size) {
  set_has_vat();
  if (vat_ == &::google::protobuf::internal::kEmptyString) {
    vat_ = new ::std::string;
  }
  vat_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* InvoiceRevisionMetadata::mutable_vat() {
  set_has_vat();
  if (vat_ == &::google::protobuf::internal::kEmptyString) {
    vat_ = new ::std::string;
  }
  return vat_;
}
inline ::std::string* InvoiceRevisionMetadata::release_vat() {
  clear_has_vat();
  if (vat_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = vat_;
    vat_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void InvoiceRevisionMetadata::set_allocated_vat(::std::string* vat) {
  if (vat_ != &::google::protobuf::internal::kEmptyString) {
    delete vat_;
  }
  if (vat) {
    set_has_vat();
    vat_ = vat;
  } else {
    clear_has_vat();
    vat_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 Currency = 6;
inline bool InvoiceRevisionMetadata::has_currency() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void InvoiceRevisionMetadata::set_has_currency() {
  _has_bits_[0] |= 0x00000020u;
}
inline void InvoiceRevisionMetadata::clear_has_currency() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void InvoiceRevisionMetadata::clear_currency() {
  currency_ = 0;
  clear_has_currency();
}
inline ::google::protobuf::int32 InvoiceRevisionMetadata::currency() const {
  return currency_;
}
inline void InvoiceRevisionMetadata::set_currency(::google::protobuf::int32 value) {
  set_has_currency();
  currency_ = value;
}

// required sfixed64 ConfirmationDateTimeTicks = 7;
inline bool InvoiceRevisionMetadata::has_confirmationdatetimeticks() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void InvoiceRevisionMetadata::set_has_confirmationdatetimeticks() {
  _has_bits_[0] |= 0x00000040u;
}
inline void InvoiceRevisionMetadata::clear_has_confirmationdatetimeticks() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void InvoiceRevisionMetadata::clear_confirmationdatetimeticks() {
  confirmationdatetimeticks_ = GOOGLE_LONGLONG(0);
  clear_has_confirmationdatetimeticks();
}
inline ::google::protobuf::int64 InvoiceRevisionMetadata::confirmationdatetimeticks() const {
  return confirmationdatetimeticks_;
}
inline void InvoiceRevisionMetadata::set_confirmationdatetimeticks(::google::protobuf::int64 value) {
  set_has_confirmationdatetimeticks();
  confirmationdatetimeticks_ = value;
}

// required int32 InvoiceAmendmentFlags = 8;
inline bool InvoiceRevisionMetadata::has_invoiceamendmentflags() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void InvoiceRevisionMetadata::set_has_invoiceamendmentflags() {
  _has_bits_[0] |= 0x00000080u;
}
inline void InvoiceRevisionMetadata::clear_has_invoiceamendmentflags() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void InvoiceRevisionMetadata::clear_invoiceamendmentflags() {
  invoiceamendmentflags_ = 0;
  clear_has_invoiceamendmentflags();
}
inline ::google::protobuf::int32 InvoiceRevisionMetadata::invoiceamendmentflags() const {
  return invoiceamendmentflags_;
}
inline void InvoiceRevisionMetadata::set_invoiceamendmentflags(::google::protobuf::int32 value) {
  set_has_invoiceamendmentflags();
  invoiceamendmentflags_ = value;
}

// -------------------------------------------------------------------

// InvoiceCorrectionMetadata

// optional .Diadoc.Api.Proto.Documents.InvoiceDocument.InvoiceStatus InvoiceCorrectionStatus = 1 [default = UnknownInvoiceStatus];
inline bool InvoiceCorrectionMetadata::has_invoicecorrectionstatus() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void InvoiceCorrectionMetadata::set_has_invoicecorrectionstatus() {
  _has_bits_[0] |= 0x00000001u;
}
inline void InvoiceCorrectionMetadata::clear_has_invoicecorrectionstatus() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void InvoiceCorrectionMetadata::clear_invoicecorrectionstatus() {
  invoicecorrectionstatus_ = 0;
  clear_has_invoicecorrectionstatus();
}
inline ::Diadoc::Api::Proto::Documents::InvoiceDocument::InvoiceStatus InvoiceCorrectionMetadata::invoicecorrectionstatus() const {
  return static_cast< ::Diadoc::Api::Proto::Documents::InvoiceDocument::InvoiceStatus >(invoicecorrectionstatus_);
}
inline void InvoiceCorrectionMetadata::set_invoicecorrectionstatus(::Diadoc::Api::Proto::Documents::InvoiceDocument::InvoiceStatus value) {
  assert(::Diadoc::Api::Proto::Documents::InvoiceDocument::InvoiceStatus_IsValid(value));
  set_has_invoicecorrectionstatus();
  invoicecorrectionstatus_ = value;
}

// required string OriginalInvoiceNumber = 2;
inline bool InvoiceCorrectionMetadata::has_originalinvoicenumber() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void InvoiceCorrectionMetadata::set_has_originalinvoicenumber() {
  _has_bits_[0] |= 0x00000002u;
}
inline void InvoiceCorrectionMetadata::clear_has_originalinvoicenumber() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void InvoiceCorrectionMetadata::clear_originalinvoicenumber() {
  if (originalinvoicenumber_ != &::google::protobuf::internal::kEmptyString) {
    originalinvoicenumber_->clear();
  }
  clear_has_originalinvoicenumber();
}
inline const ::std::string& InvoiceCorrectionMetadata::originalinvoicenumber() const {
  return *originalinvoicenumber_;
}
inline void InvoiceCorrectionMetadata::set_originalinvoicenumber(const ::std::string& value) {
  set_has_originalinvoicenumber();
  if (originalinvoicenumber_ == &::google::protobuf::internal::kEmptyString) {
    originalinvoicenumber_ = new ::std::string;
  }
  originalinvoicenumber_->assign(value);
}
inline void InvoiceCorrectionMetadata::set_originalinvoicenumber(const char* value) {
  set_has_originalinvoicenumber();
  if (originalinvoicenumber_ == &::google::protobuf::internal::kEmptyString) {
    originalinvoicenumber_ = new ::std::string;
  }
  originalinvoicenumber_->assign(value);
}
inline void InvoiceCorrectionMetadata::set_originalinvoicenumber(const char* value, size_t size) {
  set_has_originalinvoicenumber();
  if (originalinvoicenumber_ == &::google::protobuf::internal::kEmptyString) {
    originalinvoicenumber_ = new ::std::string;
  }
  originalinvoicenumber_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* InvoiceCorrectionMetadata::mutable_originalinvoicenumber() {
  set_has_originalinvoicenumber();
  if (originalinvoicenumber_ == &::google::protobuf::internal::kEmptyString) {
    originalinvoicenumber_ = new ::std::string;
  }
  return originalinvoicenumber_;
}
inline ::std::string* InvoiceCorrectionMetadata::release_originalinvoicenumber() {
  clear_has_originalinvoicenumber();
  if (originalinvoicenumber_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = originalinvoicenumber_;
    originalinvoicenumber_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void InvoiceCorrectionMetadata::set_allocated_originalinvoicenumber(::std::string* originalinvoicenumber) {
  if (originalinvoicenumber_ != &::google::protobuf::internal::kEmptyString) {
    delete originalinvoicenumber_;
  }
  if (originalinvoicenumber) {
    set_has_originalinvoicenumber();
    originalinvoicenumber_ = originalinvoicenumber;
  } else {
    clear_has_originalinvoicenumber();
    originalinvoicenumber_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string OriginalInvoiceDate = 3;
inline bool InvoiceCorrectionMetadata::has_originalinvoicedate() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void InvoiceCorrectionMetadata::set_has_originalinvoicedate() {
  _has_bits_[0] |= 0x00000004u;
}
inline void InvoiceCorrectionMetadata::clear_has_originalinvoicedate() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void InvoiceCorrectionMetadata::clear_originalinvoicedate() {
  if (originalinvoicedate_ != &::google::protobuf::internal::kEmptyString) {
    originalinvoicedate_->clear();
  }
  clear_has_originalinvoicedate();
}
inline const ::std::string& InvoiceCorrectionMetadata::originalinvoicedate() const {
  return *originalinvoicedate_;
}
inline void InvoiceCorrectionMetadata::set_originalinvoicedate(const ::std::string& value) {
  set_has_originalinvoicedate();
  if (originalinvoicedate_ == &::google::protobuf::internal::kEmptyString) {
    originalinvoicedate_ = new ::std::string;
  }
  originalinvoicedate_->assign(value);
}
inline void InvoiceCorrectionMetadata::set_originalinvoicedate(const char* value) {
  set_has_originalinvoicedate();
  if (originalinvoicedate_ == &::google::protobuf::internal::kEmptyString) {
    originalinvoicedate_ = new ::std::string;
  }
  originalinvoicedate_->assign(value);
}
inline void InvoiceCorrectionMetadata::set_originalinvoicedate(const char* value, size_t size) {
  set_has_originalinvoicedate();
  if (originalinvoicedate_ == &::google::protobuf::internal::kEmptyString) {
    originalinvoicedate_ = new ::std::string;
  }
  originalinvoicedate_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* InvoiceCorrectionMetadata::mutable_originalinvoicedate() {
  set_has_originalinvoicedate();
  if (originalinvoicedate_ == &::google::protobuf::internal::kEmptyString) {
    originalinvoicedate_ = new ::std::string;
  }
  return originalinvoicedate_;
}
inline ::std::string* InvoiceCorrectionMetadata::release_originalinvoicedate() {
  clear_has_originalinvoicedate();
  if (originalinvoicedate_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = originalinvoicedate_;
    originalinvoicedate_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void InvoiceCorrectionMetadata::set_allocated_originalinvoicedate(::std::string* originalinvoicedate) {
  if (originalinvoicedate_ != &::google::protobuf::internal::kEmptyString) {
    delete originalinvoicedate_;
  }
  if (originalinvoicedate) {
    set_has_originalinvoicedate();
    originalinvoicedate_ = originalinvoicedate;
  } else {
    clear_has_originalinvoicedate();
    originalinvoicedate_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string OriginalInvoiceRevisionNumber = 4;
inline bool InvoiceCorrectionMetadata::has_originalinvoicerevisionnumber() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void InvoiceCorrectionMetadata::set_has_originalinvoicerevisionnumber() {
  _has_bits_[0] |= 0x00000008u;
}
inline void InvoiceCorrectionMetadata::clear_has_originalinvoicerevisionnumber() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void InvoiceCorrectionMetadata::clear_originalinvoicerevisionnumber() {
  if (originalinvoicerevisionnumber_ != &::google::protobuf::internal::kEmptyString) {
    originalinvoicerevisionnumber_->clear();
  }
  clear_has_originalinvoicerevisionnumber();
}
inline const ::std::string& InvoiceCorrectionMetadata::originalinvoicerevisionnumber() const {
  return *originalinvoicerevisionnumber_;
}
inline void InvoiceCorrectionMetadata::set_originalinvoicerevisionnumber(const ::std::string& value) {
  set_has_originalinvoicerevisionnumber();
  if (originalinvoicerevisionnumber_ == &::google::protobuf::internal::kEmptyString) {
    originalinvoicerevisionnumber_ = new ::std::string;
  }
  originalinvoicerevisionnumber_->assign(value);
}
inline void InvoiceCorrectionMetadata::set_originalinvoicerevisionnumber(const char* value) {
  set_has_originalinvoicerevisionnumber();
  if (originalinvoicerevisionnumber_ == &::google::protobuf::internal::kEmptyString) {
    originalinvoicerevisionnumber_ = new ::std::string;
  }
  originalinvoicerevisionnumber_->assign(value);
}
inline void InvoiceCorrectionMetadata::set_originalinvoicerevisionnumber(const char* value, size_t size) {
  set_has_originalinvoicerevisionnumber();
  if (originalinvoicerevisionnumber_ == &::google::protobuf::internal::kEmptyString) {
    originalinvoicerevisionnumber_ = new ::std::string;
  }
  originalinvoicerevisionnumber_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* InvoiceCorrectionMetadata::mutable_originalinvoicerevisionnumber() {
  set_has_originalinvoicerevisionnumber();
  if (originalinvoicerevisionnumber_ == &::google::protobuf::internal::kEmptyString) {
    originalinvoicerevisionnumber_ = new ::std::string;
  }
  return originalinvoicerevisionnumber_;
}
inline ::std::string* InvoiceCorrectionMetadata::release_originalinvoicerevisionnumber() {
  clear_has_originalinvoicerevisionnumber();
  if (originalinvoicerevisionnumber_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = originalinvoicerevisionnumber_;
    originalinvoicerevisionnumber_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void InvoiceCorrectionMetadata::set_allocated_originalinvoicerevisionnumber(::std::string* originalinvoicerevisionnumber) {
  if (originalinvoicerevisionnumber_ != &::google::protobuf::internal::kEmptyString) {
    delete originalinvoicerevisionnumber_;
  }
  if (originalinvoicerevisionnumber) {
    set_has_originalinvoicerevisionnumber();
    originalinvoicerevisionnumber_ = originalinvoicerevisionnumber;
  } else {
    clear_has_originalinvoicerevisionnumber();
    originalinvoicerevisionnumber_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string OriginalInvoiceRevisionDate = 5;
inline bool InvoiceCorrectionMetadata::has_originalinvoicerevisiondate() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void InvoiceCorrectionMetadata::set_has_originalinvoicerevisiondate() {
  _has_bits_[0] |= 0x00000010u;
}
inline void InvoiceCorrectionMetadata::clear_has_originalinvoicerevisiondate() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void InvoiceCorrectionMetadata::clear_originalinvoicerevisiondate() {
  if (originalinvoicerevisiondate_ != &::google::protobuf::internal::kEmptyString) {
    originalinvoicerevisiondate_->clear();
  }
  clear_has_originalinvoicerevisiondate();
}
inline const ::std::string& InvoiceCorrectionMetadata::originalinvoicerevisiondate() const {
  return *originalinvoicerevisiondate_;
}
inline void InvoiceCorrectionMetadata::set_originalinvoicerevisiondate(const ::std::string& value) {
  set_has_originalinvoicerevisiondate();
  if (originalinvoicerevisiondate_ == &::google::protobuf::internal::kEmptyString) {
    originalinvoicerevisiondate_ = new ::std::string;
  }
  originalinvoicerevisiondate_->assign(value);
}
inline void InvoiceCorrectionMetadata::set_originalinvoicerevisiondate(const char* value) {
  set_has_originalinvoicerevisiondate();
  if (originalinvoicerevisiondate_ == &::google::protobuf::internal::kEmptyString) {
    originalinvoicerevisiondate_ = new ::std::string;
  }
  originalinvoicerevisiondate_->assign(value);
}
inline void InvoiceCorrectionMetadata::set_originalinvoicerevisiondate(const char* value, size_t size) {
  set_has_originalinvoicerevisiondate();
  if (originalinvoicerevisiondate_ == &::google::protobuf::internal::kEmptyString) {
    originalinvoicerevisiondate_ = new ::std::string;
  }
  originalinvoicerevisiondate_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* InvoiceCorrectionMetadata::mutable_originalinvoicerevisiondate() {
  set_has_originalinvoicerevisiondate();
  if (originalinvoicerevisiondate_ == &::google::protobuf::internal::kEmptyString) {
    originalinvoicerevisiondate_ = new ::std::string;
  }
  return originalinvoicerevisiondate_;
}
inline ::std::string* InvoiceCorrectionMetadata::release_originalinvoicerevisiondate() {
  clear_has_originalinvoicerevisiondate();
  if (originalinvoicerevisiondate_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = originalinvoicerevisiondate_;
    originalinvoicerevisiondate_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void InvoiceCorrectionMetadata::set_allocated_originalinvoicerevisiondate(::std::string* originalinvoicerevisiondate) {
  if (originalinvoicerevisiondate_ != &::google::protobuf::internal::kEmptyString) {
    delete originalinvoicerevisiondate_;
  }
  if (originalinvoicerevisiondate) {
    set_has_originalinvoicerevisiondate();
    originalinvoicerevisiondate_ = originalinvoicerevisiondate;
  } else {
    clear_has_originalinvoicerevisiondate();
    originalinvoicerevisiondate_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string TotalInc = 6;
inline bool InvoiceCorrectionMetadata::has_totalinc() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void InvoiceCorrectionMetadata::set_has_totalinc() {
  _has_bits_[0] |= 0x00000020u;
}
inline void InvoiceCorrectionMetadata::clear_has_totalinc() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void InvoiceCorrectionMetadata::clear_totalinc() {
  if (totalinc_ != &::google::protobuf::internal::kEmptyString) {
    totalinc_->clear();
  }
  clear_has_totalinc();
}
inline const ::std::string& InvoiceCorrectionMetadata::totalinc() const {
  return *totalinc_;
}
inline void InvoiceCorrectionMetadata::set_totalinc(const ::std::string& value) {
  set_has_totalinc();
  if (totalinc_ == &::google::protobuf::internal::kEmptyString) {
    totalinc_ = new ::std::string;
  }
  totalinc_->assign(value);
}
inline void InvoiceCorrectionMetadata::set_totalinc(const char* value) {
  set_has_totalinc();
  if (totalinc_ == &::google::protobuf::internal::kEmptyString) {
    totalinc_ = new ::std::string;
  }
  totalinc_->assign(value);
}
inline void InvoiceCorrectionMetadata::set_totalinc(const char* value, size_t size) {
  set_has_totalinc();
  if (totalinc_ == &::google::protobuf::internal::kEmptyString) {
    totalinc_ = new ::std::string;
  }
  totalinc_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* InvoiceCorrectionMetadata::mutable_totalinc() {
  set_has_totalinc();
  if (totalinc_ == &::google::protobuf::internal::kEmptyString) {
    totalinc_ = new ::std::string;
  }
  return totalinc_;
}
inline ::std::string* InvoiceCorrectionMetadata::release_totalinc() {
  clear_has_totalinc();
  if (totalinc_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = totalinc_;
    totalinc_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void InvoiceCorrectionMetadata::set_allocated_totalinc(::std::string* totalinc) {
  if (totalinc_ != &::google::protobuf::internal::kEmptyString) {
    delete totalinc_;
  }
  if (totalinc) {
    set_has_totalinc();
    totalinc_ = totalinc;
  } else {
    clear_has_totalinc();
    totalinc_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string TotalDec = 7;
inline bool InvoiceCorrectionMetadata::has_totaldec() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void InvoiceCorrectionMetadata::set_has_totaldec() {
  _has_bits_[0] |= 0x00000040u;
}
inline void InvoiceCorrectionMetadata::clear_has_totaldec() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void InvoiceCorrectionMetadata::clear_totaldec() {
  if (totaldec_ != &::google::protobuf::internal::kEmptyString) {
    totaldec_->clear();
  }
  clear_has_totaldec();
}
inline const ::std::string& InvoiceCorrectionMetadata::totaldec() const {
  return *totaldec_;
}
inline void InvoiceCorrectionMetadata::set_totaldec(const ::std::string& value) {
  set_has_totaldec();
  if (totaldec_ == &::google::protobuf::internal::kEmptyString) {
    totaldec_ = new ::std::string;
  }
  totaldec_->assign(value);
}
inline void InvoiceCorrectionMetadata::set_totaldec(const char* value) {
  set_has_totaldec();
  if (totaldec_ == &::google::protobuf::internal::kEmptyString) {
    totaldec_ = new ::std::string;
  }
  totaldec_->assign(value);
}
inline void InvoiceCorrectionMetadata::set_totaldec(const char* value, size_t size) {
  set_has_totaldec();
  if (totaldec_ == &::google::protobuf::internal::kEmptyString) {
    totaldec_ = new ::std::string;
  }
  totaldec_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* InvoiceCorrectionMetadata::mutable_totaldec() {
  set_has_totaldec();
  if (totaldec_ == &::google::protobuf::internal::kEmptyString) {
    totaldec_ = new ::std::string;
  }
  return totaldec_;
}
inline ::std::string* InvoiceCorrectionMetadata::release_totaldec() {
  clear_has_totaldec();
  if (totaldec_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = totaldec_;
    totaldec_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void InvoiceCorrectionMetadata::set_allocated_totaldec(::std::string* totaldec) {
  if (totaldec_ != &::google::protobuf::internal::kEmptyString) {
    delete totaldec_;
  }
  if (totaldec) {
    set_has_totaldec();
    totaldec_ = totaldec;
  } else {
    clear_has_totaldec();
    totaldec_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string VatInc = 8;
inline bool InvoiceCorrectionMetadata::has_vatinc() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void InvoiceCorrectionMetadata::set_has_vatinc() {
  _has_bits_[0] |= 0x00000080u;
}
inline void InvoiceCorrectionMetadata::clear_has_vatinc() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void InvoiceCorrectionMetadata::clear_vatinc() {
  if (vatinc_ != &::google::protobuf::internal::kEmptyString) {
    vatinc_->clear();
  }
  clear_has_vatinc();
}
inline const ::std::string& InvoiceCorrectionMetadata::vatinc() const {
  return *vatinc_;
}
inline void InvoiceCorrectionMetadata::set_vatinc(const ::std::string& value) {
  set_has_vatinc();
  if (vatinc_ == &::google::protobuf::internal::kEmptyString) {
    vatinc_ = new ::std::string;
  }
  vatinc_->assign(value);
}
inline void InvoiceCorrectionMetadata::set_vatinc(const char* value) {
  set_has_vatinc();
  if (vatinc_ == &::google::protobuf::internal::kEmptyString) {
    vatinc_ = new ::std::string;
  }
  vatinc_->assign(value);
}
inline void InvoiceCorrectionMetadata::set_vatinc(const char* value, size_t size) {
  set_has_vatinc();
  if (vatinc_ == &::google::protobuf::internal::kEmptyString) {
    vatinc_ = new ::std::string;
  }
  vatinc_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* InvoiceCorrectionMetadata::mutable_vatinc() {
  set_has_vatinc();
  if (vatinc_ == &::google::protobuf::internal::kEmptyString) {
    vatinc_ = new ::std::string;
  }
  return vatinc_;
}
inline ::std::string* InvoiceCorrectionMetadata::release_vatinc() {
  clear_has_vatinc();
  if (vatinc_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = vatinc_;
    vatinc_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void InvoiceCorrectionMetadata::set_allocated_vatinc(::std::string* vatinc) {
  if (vatinc_ != &::google::protobuf::internal::kEmptyString) {
    delete vatinc_;
  }
  if (vatinc) {
    set_has_vatinc();
    vatinc_ = vatinc;
  } else {
    clear_has_vatinc();
    vatinc_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string VatDec = 9;
inline bool InvoiceCorrectionMetadata::has_vatdec() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void InvoiceCorrectionMetadata::set_has_vatdec() {
  _has_bits_[0] |= 0x00000100u;
}
inline void InvoiceCorrectionMetadata::clear_has_vatdec() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void InvoiceCorrectionMetadata::clear_vatdec() {
  if (vatdec_ != &::google::protobuf::internal::kEmptyString) {
    vatdec_->clear();
  }
  clear_has_vatdec();
}
inline const ::std::string& InvoiceCorrectionMetadata::vatdec() const {
  return *vatdec_;
}
inline void InvoiceCorrectionMetadata::set_vatdec(const ::std::string& value) {
  set_has_vatdec();
  if (vatdec_ == &::google::protobuf::internal::kEmptyString) {
    vatdec_ = new ::std::string;
  }
  vatdec_->assign(value);
}
inline void InvoiceCorrectionMetadata::set_vatdec(const char* value) {
  set_has_vatdec();
  if (vatdec_ == &::google::protobuf::internal::kEmptyString) {
    vatdec_ = new ::std::string;
  }
  vatdec_->assign(value);
}
inline void InvoiceCorrectionMetadata::set_vatdec(const char* value, size_t size) {
  set_has_vatdec();
  if (vatdec_ == &::google::protobuf::internal::kEmptyString) {
    vatdec_ = new ::std::string;
  }
  vatdec_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* InvoiceCorrectionMetadata::mutable_vatdec() {
  set_has_vatdec();
  if (vatdec_ == &::google::protobuf::internal::kEmptyString) {
    vatdec_ = new ::std::string;
  }
  return vatdec_;
}
inline ::std::string* InvoiceCorrectionMetadata::release_vatdec() {
  clear_has_vatdec();
  if (vatdec_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = vatdec_;
    vatdec_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void InvoiceCorrectionMetadata::set_allocated_vatdec(::std::string* vatdec) {
  if (vatdec_ != &::google::protobuf::internal::kEmptyString) {
    delete vatdec_;
  }
  if (vatdec) {
    set_has_vatdec();
    vatdec_ = vatdec;
  } else {
    clear_has_vatdec();
    vatdec_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 Currency = 10;
inline bool InvoiceCorrectionMetadata::has_currency() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void InvoiceCorrectionMetadata::set_has_currency() {
  _has_bits_[0] |= 0x00000200u;
}
inline void InvoiceCorrectionMetadata::clear_has_currency() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void InvoiceCorrectionMetadata::clear_currency() {
  currency_ = 0;
  clear_has_currency();
}
inline ::google::protobuf::int32 InvoiceCorrectionMetadata::currency() const {
  return currency_;
}
inline void InvoiceCorrectionMetadata::set_currency(::google::protobuf::int32 value) {
  set_has_currency();
  currency_ = value;
}

// required sfixed64 ConfirmationDateTimeTicks = 11;
inline bool InvoiceCorrectionMetadata::has_confirmationdatetimeticks() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void InvoiceCorrectionMetadata::set_has_confirmationdatetimeticks() {
  _has_bits_[0] |= 0x00000400u;
}
inline void InvoiceCorrectionMetadata::clear_has_confirmationdatetimeticks() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void InvoiceCorrectionMetadata::clear_confirmationdatetimeticks() {
  confirmationdatetimeticks_ = GOOGLE_LONGLONG(0);
  clear_has_confirmationdatetimeticks();
}
inline ::google::protobuf::int64 InvoiceCorrectionMetadata::confirmationdatetimeticks() const {
  return confirmationdatetimeticks_;
}
inline void InvoiceCorrectionMetadata::set_confirmationdatetimeticks(::google::protobuf::int64 value) {
  set_has_confirmationdatetimeticks();
  confirmationdatetimeticks_ = value;
}

// required int32 InvoiceAmendmentFlags = 12;
inline bool InvoiceCorrectionMetadata::has_invoiceamendmentflags() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void InvoiceCorrectionMetadata::set_has_invoiceamendmentflags() {
  _has_bits_[0] |= 0x00000800u;
}
inline void InvoiceCorrectionMetadata::clear_has_invoiceamendmentflags() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void InvoiceCorrectionMetadata::clear_invoiceamendmentflags() {
  invoiceamendmentflags_ = 0;
  clear_has_invoiceamendmentflags();
}
inline ::google::protobuf::int32 InvoiceCorrectionMetadata::invoiceamendmentflags() const {
  return invoiceamendmentflags_;
}
inline void InvoiceCorrectionMetadata::set_invoiceamendmentflags(::google::protobuf::int32 value) {
  set_has_invoiceamendmentflags();
  invoiceamendmentflags_ = value;
}

// -------------------------------------------------------------------

// InvoiceCorrectionRevisionMetadata

// optional .Diadoc.Api.Proto.Documents.InvoiceDocument.InvoiceStatus InvoiceCorrectionRevisionStatus = 1 [default = UnknownInvoiceStatus];
inline bool InvoiceCorrectionRevisionMetadata::has_invoicecorrectionrevisionstatus() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void InvoiceCorrectionRevisionMetadata::set_has_invoicecorrectionrevisionstatus() {
  _has_bits_[0] |= 0x00000001u;
}
inline void InvoiceCorrectionRevisionMetadata::clear_has_invoicecorrectionrevisionstatus() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void InvoiceCorrectionRevisionMetadata::clear_invoicecorrectionrevisionstatus() {
  invoicecorrectionrevisionstatus_ = 0;
  clear_has_invoicecorrectionrevisionstatus();
}
inline ::Diadoc::Api::Proto::Documents::InvoiceDocument::InvoiceStatus InvoiceCorrectionRevisionMetadata::invoicecorrectionrevisionstatus() const {
  return static_cast< ::Diadoc::Api::Proto::Documents::InvoiceDocument::InvoiceStatus >(invoicecorrectionrevisionstatus_);
}
inline void InvoiceCorrectionRevisionMetadata::set_invoicecorrectionrevisionstatus(::Diadoc::Api::Proto::Documents::InvoiceDocument::InvoiceStatus value) {
  assert(::Diadoc::Api::Proto::Documents::InvoiceDocument::InvoiceStatus_IsValid(value));
  set_has_invoicecorrectionrevisionstatus();
  invoicecorrectionrevisionstatus_ = value;
}

// required string OriginalInvoiceNumber = 2;
inline bool InvoiceCorrectionRevisionMetadata::has_originalinvoicenumber() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void InvoiceCorrectionRevisionMetadata::set_has_originalinvoicenumber() {
  _has_bits_[0] |= 0x00000002u;
}
inline void InvoiceCorrectionRevisionMetadata::clear_has_originalinvoicenumber() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void InvoiceCorrectionRevisionMetadata::clear_originalinvoicenumber() {
  if (originalinvoicenumber_ != &::google::protobuf::internal::kEmptyString) {
    originalinvoicenumber_->clear();
  }
  clear_has_originalinvoicenumber();
}
inline const ::std::string& InvoiceCorrectionRevisionMetadata::originalinvoicenumber() const {
  return *originalinvoicenumber_;
}
inline void InvoiceCorrectionRevisionMetadata::set_originalinvoicenumber(const ::std::string& value) {
  set_has_originalinvoicenumber();
  if (originalinvoicenumber_ == &::google::protobuf::internal::kEmptyString) {
    originalinvoicenumber_ = new ::std::string;
  }
  originalinvoicenumber_->assign(value);
}
inline void InvoiceCorrectionRevisionMetadata::set_originalinvoicenumber(const char* value) {
  set_has_originalinvoicenumber();
  if (originalinvoicenumber_ == &::google::protobuf::internal::kEmptyString) {
    originalinvoicenumber_ = new ::std::string;
  }
  originalinvoicenumber_->assign(value);
}
inline void InvoiceCorrectionRevisionMetadata::set_originalinvoicenumber(const char* value, size_t size) {
  set_has_originalinvoicenumber();
  if (originalinvoicenumber_ == &::google::protobuf::internal::kEmptyString) {
    originalinvoicenumber_ = new ::std::string;
  }
  originalinvoicenumber_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* InvoiceCorrectionRevisionMetadata::mutable_originalinvoicenumber() {
  set_has_originalinvoicenumber();
  if (originalinvoicenumber_ == &::google::protobuf::internal::kEmptyString) {
    originalinvoicenumber_ = new ::std::string;
  }
  return originalinvoicenumber_;
}
inline ::std::string* InvoiceCorrectionRevisionMetadata::release_originalinvoicenumber() {
  clear_has_originalinvoicenumber();
  if (originalinvoicenumber_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = originalinvoicenumber_;
    originalinvoicenumber_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void InvoiceCorrectionRevisionMetadata::set_allocated_originalinvoicenumber(::std::string* originalinvoicenumber) {
  if (originalinvoicenumber_ != &::google::protobuf::internal::kEmptyString) {
    delete originalinvoicenumber_;
  }
  if (originalinvoicenumber) {
    set_has_originalinvoicenumber();
    originalinvoicenumber_ = originalinvoicenumber;
  } else {
    clear_has_originalinvoicenumber();
    originalinvoicenumber_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string OriginalInvoiceDate = 3;
inline bool InvoiceCorrectionRevisionMetadata::has_originalinvoicedate() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void InvoiceCorrectionRevisionMetadata::set_has_originalinvoicedate() {
  _has_bits_[0] |= 0x00000004u;
}
inline void InvoiceCorrectionRevisionMetadata::clear_has_originalinvoicedate() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void InvoiceCorrectionRevisionMetadata::clear_originalinvoicedate() {
  if (originalinvoicedate_ != &::google::protobuf::internal::kEmptyString) {
    originalinvoicedate_->clear();
  }
  clear_has_originalinvoicedate();
}
inline const ::std::string& InvoiceCorrectionRevisionMetadata::originalinvoicedate() const {
  return *originalinvoicedate_;
}
inline void InvoiceCorrectionRevisionMetadata::set_originalinvoicedate(const ::std::string& value) {
  set_has_originalinvoicedate();
  if (originalinvoicedate_ == &::google::protobuf::internal::kEmptyString) {
    originalinvoicedate_ = new ::std::string;
  }
  originalinvoicedate_->assign(value);
}
inline void InvoiceCorrectionRevisionMetadata::set_originalinvoicedate(const char* value) {
  set_has_originalinvoicedate();
  if (originalinvoicedate_ == &::google::protobuf::internal::kEmptyString) {
    originalinvoicedate_ = new ::std::string;
  }
  originalinvoicedate_->assign(value);
}
inline void InvoiceCorrectionRevisionMetadata::set_originalinvoicedate(const char* value, size_t size) {
  set_has_originalinvoicedate();
  if (originalinvoicedate_ == &::google::protobuf::internal::kEmptyString) {
    originalinvoicedate_ = new ::std::string;
  }
  originalinvoicedate_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* InvoiceCorrectionRevisionMetadata::mutable_originalinvoicedate() {
  set_has_originalinvoicedate();
  if (originalinvoicedate_ == &::google::protobuf::internal::kEmptyString) {
    originalinvoicedate_ = new ::std::string;
  }
  return originalinvoicedate_;
}
inline ::std::string* InvoiceCorrectionRevisionMetadata::release_originalinvoicedate() {
  clear_has_originalinvoicedate();
  if (originalinvoicedate_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = originalinvoicedate_;
    originalinvoicedate_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void InvoiceCorrectionRevisionMetadata::set_allocated_originalinvoicedate(::std::string* originalinvoicedate) {
  if (originalinvoicedate_ != &::google::protobuf::internal::kEmptyString) {
    delete originalinvoicedate_;
  }
  if (originalinvoicedate) {
    set_has_originalinvoicedate();
    originalinvoicedate_ = originalinvoicedate;
  } else {
    clear_has_originalinvoicedate();
    originalinvoicedate_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string OriginalInvoiceRevisionNumber = 4;
inline bool InvoiceCorrectionRevisionMetadata::has_originalinvoicerevisionnumber() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void InvoiceCorrectionRevisionMetadata::set_has_originalinvoicerevisionnumber() {
  _has_bits_[0] |= 0x00000008u;
}
inline void InvoiceCorrectionRevisionMetadata::clear_has_originalinvoicerevisionnumber() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void InvoiceCorrectionRevisionMetadata::clear_originalinvoicerevisionnumber() {
  if (originalinvoicerevisionnumber_ != &::google::protobuf::internal::kEmptyString) {
    originalinvoicerevisionnumber_->clear();
  }
  clear_has_originalinvoicerevisionnumber();
}
inline const ::std::string& InvoiceCorrectionRevisionMetadata::originalinvoicerevisionnumber() const {
  return *originalinvoicerevisionnumber_;
}
inline void InvoiceCorrectionRevisionMetadata::set_originalinvoicerevisionnumber(const ::std::string& value) {
  set_has_originalinvoicerevisionnumber();
  if (originalinvoicerevisionnumber_ == &::google::protobuf::internal::kEmptyString) {
    originalinvoicerevisionnumber_ = new ::std::string;
  }
  originalinvoicerevisionnumber_->assign(value);
}
inline void InvoiceCorrectionRevisionMetadata::set_originalinvoicerevisionnumber(const char* value) {
  set_has_originalinvoicerevisionnumber();
  if (originalinvoicerevisionnumber_ == &::google::protobuf::internal::kEmptyString) {
    originalinvoicerevisionnumber_ = new ::std::string;
  }
  originalinvoicerevisionnumber_->assign(value);
}
inline void InvoiceCorrectionRevisionMetadata::set_originalinvoicerevisionnumber(const char* value, size_t size) {
  set_has_originalinvoicerevisionnumber();
  if (originalinvoicerevisionnumber_ == &::google::protobuf::internal::kEmptyString) {
    originalinvoicerevisionnumber_ = new ::std::string;
  }
  originalinvoicerevisionnumber_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* InvoiceCorrectionRevisionMetadata::mutable_originalinvoicerevisionnumber() {
  set_has_originalinvoicerevisionnumber();
  if (originalinvoicerevisionnumber_ == &::google::protobuf::internal::kEmptyString) {
    originalinvoicerevisionnumber_ = new ::std::string;
  }
  return originalinvoicerevisionnumber_;
}
inline ::std::string* InvoiceCorrectionRevisionMetadata::release_originalinvoicerevisionnumber() {
  clear_has_originalinvoicerevisionnumber();
  if (originalinvoicerevisionnumber_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = originalinvoicerevisionnumber_;
    originalinvoicerevisionnumber_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void InvoiceCorrectionRevisionMetadata::set_allocated_originalinvoicerevisionnumber(::std::string* originalinvoicerevisionnumber) {
  if (originalinvoicerevisionnumber_ != &::google::protobuf::internal::kEmptyString) {
    delete originalinvoicerevisionnumber_;
  }
  if (originalinvoicerevisionnumber) {
    set_has_originalinvoicerevisionnumber();
    originalinvoicerevisionnumber_ = originalinvoicerevisionnumber;
  } else {
    clear_has_originalinvoicerevisionnumber();
    originalinvoicerevisionnumber_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string OriginalInvoiceRevisionDate = 5;
inline bool InvoiceCorrectionRevisionMetadata::has_originalinvoicerevisiondate() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void InvoiceCorrectionRevisionMetadata::set_has_originalinvoicerevisiondate() {
  _has_bits_[0] |= 0x00000010u;
}
inline void InvoiceCorrectionRevisionMetadata::clear_has_originalinvoicerevisiondate() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void InvoiceCorrectionRevisionMetadata::clear_originalinvoicerevisiondate() {
  if (originalinvoicerevisiondate_ != &::google::protobuf::internal::kEmptyString) {
    originalinvoicerevisiondate_->clear();
  }
  clear_has_originalinvoicerevisiondate();
}
inline const ::std::string& InvoiceCorrectionRevisionMetadata::originalinvoicerevisiondate() const {
  return *originalinvoicerevisiondate_;
}
inline void InvoiceCorrectionRevisionMetadata::set_originalinvoicerevisiondate(const ::std::string& value) {
  set_has_originalinvoicerevisiondate();
  if (originalinvoicerevisiondate_ == &::google::protobuf::internal::kEmptyString) {
    originalinvoicerevisiondate_ = new ::std::string;
  }
  originalinvoicerevisiondate_->assign(value);
}
inline void InvoiceCorrectionRevisionMetadata::set_originalinvoicerevisiondate(const char* value) {
  set_has_originalinvoicerevisiondate();
  if (originalinvoicerevisiondate_ == &::google::protobuf::internal::kEmptyString) {
    originalinvoicerevisiondate_ = new ::std::string;
  }
  originalinvoicerevisiondate_->assign(value);
}
inline void InvoiceCorrectionRevisionMetadata::set_originalinvoicerevisiondate(const char* value, size_t size) {
  set_has_originalinvoicerevisiondate();
  if (originalinvoicerevisiondate_ == &::google::protobuf::internal::kEmptyString) {
    originalinvoicerevisiondate_ = new ::std::string;
  }
  originalinvoicerevisiondate_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* InvoiceCorrectionRevisionMetadata::mutable_originalinvoicerevisiondate() {
  set_has_originalinvoicerevisiondate();
  if (originalinvoicerevisiondate_ == &::google::protobuf::internal::kEmptyString) {
    originalinvoicerevisiondate_ = new ::std::string;
  }
  return originalinvoicerevisiondate_;
}
inline ::std::string* InvoiceCorrectionRevisionMetadata::release_originalinvoicerevisiondate() {
  clear_has_originalinvoicerevisiondate();
  if (originalinvoicerevisiondate_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = originalinvoicerevisiondate_;
    originalinvoicerevisiondate_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void InvoiceCorrectionRevisionMetadata::set_allocated_originalinvoicerevisiondate(::std::string* originalinvoicerevisiondate) {
  if (originalinvoicerevisiondate_ != &::google::protobuf::internal::kEmptyString) {
    delete originalinvoicerevisiondate_;
  }
  if (originalinvoicerevisiondate) {
    set_has_originalinvoicerevisiondate();
    originalinvoicerevisiondate_ = originalinvoicerevisiondate;
  } else {
    clear_has_originalinvoicerevisiondate();
    originalinvoicerevisiondate_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string OriginalInvoiceCorrectionNumber = 6;
inline bool InvoiceCorrectionRevisionMetadata::has_originalinvoicecorrectionnumber() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void InvoiceCorrectionRevisionMetadata::set_has_originalinvoicecorrectionnumber() {
  _has_bits_[0] |= 0x00000020u;
}
inline void InvoiceCorrectionRevisionMetadata::clear_has_originalinvoicecorrectionnumber() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void InvoiceCorrectionRevisionMetadata::clear_originalinvoicecorrectionnumber() {
  if (originalinvoicecorrectionnumber_ != &::google::protobuf::internal::kEmptyString) {
    originalinvoicecorrectionnumber_->clear();
  }
  clear_has_originalinvoicecorrectionnumber();
}
inline const ::std::string& InvoiceCorrectionRevisionMetadata::originalinvoicecorrectionnumber() const {
  return *originalinvoicecorrectionnumber_;
}
inline void InvoiceCorrectionRevisionMetadata::set_originalinvoicecorrectionnumber(const ::std::string& value) {
  set_has_originalinvoicecorrectionnumber();
  if (originalinvoicecorrectionnumber_ == &::google::protobuf::internal::kEmptyString) {
    originalinvoicecorrectionnumber_ = new ::std::string;
  }
  originalinvoicecorrectionnumber_->assign(value);
}
inline void InvoiceCorrectionRevisionMetadata::set_originalinvoicecorrectionnumber(const char* value) {
  set_has_originalinvoicecorrectionnumber();
  if (originalinvoicecorrectionnumber_ == &::google::protobuf::internal::kEmptyString) {
    originalinvoicecorrectionnumber_ = new ::std::string;
  }
  originalinvoicecorrectionnumber_->assign(value);
}
inline void InvoiceCorrectionRevisionMetadata::set_originalinvoicecorrectionnumber(const char* value, size_t size) {
  set_has_originalinvoicecorrectionnumber();
  if (originalinvoicecorrectionnumber_ == &::google::protobuf::internal::kEmptyString) {
    originalinvoicecorrectionnumber_ = new ::std::string;
  }
  originalinvoicecorrectionnumber_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* InvoiceCorrectionRevisionMetadata::mutable_originalinvoicecorrectionnumber() {
  set_has_originalinvoicecorrectionnumber();
  if (originalinvoicecorrectionnumber_ == &::google::protobuf::internal::kEmptyString) {
    originalinvoicecorrectionnumber_ = new ::std::string;
  }
  return originalinvoicecorrectionnumber_;
}
inline ::std::string* InvoiceCorrectionRevisionMetadata::release_originalinvoicecorrectionnumber() {
  clear_has_originalinvoicecorrectionnumber();
  if (originalinvoicecorrectionnumber_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = originalinvoicecorrectionnumber_;
    originalinvoicecorrectionnumber_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void InvoiceCorrectionRevisionMetadata::set_allocated_originalinvoicecorrectionnumber(::std::string* originalinvoicecorrectionnumber) {
  if (originalinvoicecorrectionnumber_ != &::google::protobuf::internal::kEmptyString) {
    delete originalinvoicecorrectionnumber_;
  }
  if (originalinvoicecorrectionnumber) {
    set_has_originalinvoicecorrectionnumber();
    originalinvoicecorrectionnumber_ = originalinvoicecorrectionnumber;
  } else {
    clear_has_originalinvoicecorrectionnumber();
    originalinvoicecorrectionnumber_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string OriginalInvoiceCorrectionDate = 7;
inline bool InvoiceCorrectionRevisionMetadata::has_originalinvoicecorrectiondate() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void InvoiceCorrectionRevisionMetadata::set_has_originalinvoicecorrectiondate() {
  _has_bits_[0] |= 0x00000040u;
}
inline void InvoiceCorrectionRevisionMetadata::clear_has_originalinvoicecorrectiondate() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void InvoiceCorrectionRevisionMetadata::clear_originalinvoicecorrectiondate() {
  if (originalinvoicecorrectiondate_ != &::google::protobuf::internal::kEmptyString) {
    originalinvoicecorrectiondate_->clear();
  }
  clear_has_originalinvoicecorrectiondate();
}
inline const ::std::string& InvoiceCorrectionRevisionMetadata::originalinvoicecorrectiondate() const {
  return *originalinvoicecorrectiondate_;
}
inline void InvoiceCorrectionRevisionMetadata::set_originalinvoicecorrectiondate(const ::std::string& value) {
  set_has_originalinvoicecorrectiondate();
  if (originalinvoicecorrectiondate_ == &::google::protobuf::internal::kEmptyString) {
    originalinvoicecorrectiondate_ = new ::std::string;
  }
  originalinvoicecorrectiondate_->assign(value);
}
inline void InvoiceCorrectionRevisionMetadata::set_originalinvoicecorrectiondate(const char* value) {
  set_has_originalinvoicecorrectiondate();
  if (originalinvoicecorrectiondate_ == &::google::protobuf::internal::kEmptyString) {
    originalinvoicecorrectiondate_ = new ::std::string;
  }
  originalinvoicecorrectiondate_->assign(value);
}
inline void InvoiceCorrectionRevisionMetadata::set_originalinvoicecorrectiondate(const char* value, size_t size) {
  set_has_originalinvoicecorrectiondate();
  if (originalinvoicecorrectiondate_ == &::google::protobuf::internal::kEmptyString) {
    originalinvoicecorrectiondate_ = new ::std::string;
  }
  originalinvoicecorrectiondate_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* InvoiceCorrectionRevisionMetadata::mutable_originalinvoicecorrectiondate() {
  set_has_originalinvoicecorrectiondate();
  if (originalinvoicecorrectiondate_ == &::google::protobuf::internal::kEmptyString) {
    originalinvoicecorrectiondate_ = new ::std::string;
  }
  return originalinvoicecorrectiondate_;
}
inline ::std::string* InvoiceCorrectionRevisionMetadata::release_originalinvoicecorrectiondate() {
  clear_has_originalinvoicecorrectiondate();
  if (originalinvoicecorrectiondate_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = originalinvoicecorrectiondate_;
    originalinvoicecorrectiondate_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void InvoiceCorrectionRevisionMetadata::set_allocated_originalinvoicecorrectiondate(::std::string* originalinvoicecorrectiondate) {
  if (originalinvoicecorrectiondate_ != &::google::protobuf::internal::kEmptyString) {
    delete originalinvoicecorrectiondate_;
  }
  if (originalinvoicecorrectiondate) {
    set_has_originalinvoicecorrectiondate();
    originalinvoicecorrectiondate_ = originalinvoicecorrectiondate;
  } else {
    clear_has_originalinvoicecorrectiondate();
    originalinvoicecorrectiondate_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string TotalInc = 8;
inline bool InvoiceCorrectionRevisionMetadata::has_totalinc() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void InvoiceCorrectionRevisionMetadata::set_has_totalinc() {
  _has_bits_[0] |= 0x00000080u;
}
inline void InvoiceCorrectionRevisionMetadata::clear_has_totalinc() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void InvoiceCorrectionRevisionMetadata::clear_totalinc() {
  if (totalinc_ != &::google::protobuf::internal::kEmptyString) {
    totalinc_->clear();
  }
  clear_has_totalinc();
}
inline const ::std::string& InvoiceCorrectionRevisionMetadata::totalinc() const {
  return *totalinc_;
}
inline void InvoiceCorrectionRevisionMetadata::set_totalinc(const ::std::string& value) {
  set_has_totalinc();
  if (totalinc_ == &::google::protobuf::internal::kEmptyString) {
    totalinc_ = new ::std::string;
  }
  totalinc_->assign(value);
}
inline void InvoiceCorrectionRevisionMetadata::set_totalinc(const char* value) {
  set_has_totalinc();
  if (totalinc_ == &::google::protobuf::internal::kEmptyString) {
    totalinc_ = new ::std::string;
  }
  totalinc_->assign(value);
}
inline void InvoiceCorrectionRevisionMetadata::set_totalinc(const char* value, size_t size) {
  set_has_totalinc();
  if (totalinc_ == &::google::protobuf::internal::kEmptyString) {
    totalinc_ = new ::std::string;
  }
  totalinc_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* InvoiceCorrectionRevisionMetadata::mutable_totalinc() {
  set_has_totalinc();
  if (totalinc_ == &::google::protobuf::internal::kEmptyString) {
    totalinc_ = new ::std::string;
  }
  return totalinc_;
}
inline ::std::string* InvoiceCorrectionRevisionMetadata::release_totalinc() {
  clear_has_totalinc();
  if (totalinc_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = totalinc_;
    totalinc_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void InvoiceCorrectionRevisionMetadata::set_allocated_totalinc(::std::string* totalinc) {
  if (totalinc_ != &::google::protobuf::internal::kEmptyString) {
    delete totalinc_;
  }
  if (totalinc) {
    set_has_totalinc();
    totalinc_ = totalinc;
  } else {
    clear_has_totalinc();
    totalinc_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string TotalDec = 9;
inline bool InvoiceCorrectionRevisionMetadata::has_totaldec() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void InvoiceCorrectionRevisionMetadata::set_has_totaldec() {
  _has_bits_[0] |= 0x00000100u;
}
inline void InvoiceCorrectionRevisionMetadata::clear_has_totaldec() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void InvoiceCorrectionRevisionMetadata::clear_totaldec() {
  if (totaldec_ != &::google::protobuf::internal::kEmptyString) {
    totaldec_->clear();
  }
  clear_has_totaldec();
}
inline const ::std::string& InvoiceCorrectionRevisionMetadata::totaldec() const {
  return *totaldec_;
}
inline void InvoiceCorrectionRevisionMetadata::set_totaldec(const ::std::string& value) {
  set_has_totaldec();
  if (totaldec_ == &::google::protobuf::internal::kEmptyString) {
    totaldec_ = new ::std::string;
  }
  totaldec_->assign(value);
}
inline void InvoiceCorrectionRevisionMetadata::set_totaldec(const char* value) {
  set_has_totaldec();
  if (totaldec_ == &::google::protobuf::internal::kEmptyString) {
    totaldec_ = new ::std::string;
  }
  totaldec_->assign(value);
}
inline void InvoiceCorrectionRevisionMetadata::set_totaldec(const char* value, size_t size) {
  set_has_totaldec();
  if (totaldec_ == &::google::protobuf::internal::kEmptyString) {
    totaldec_ = new ::std::string;
  }
  totaldec_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* InvoiceCorrectionRevisionMetadata::mutable_totaldec() {
  set_has_totaldec();
  if (totaldec_ == &::google::protobuf::internal::kEmptyString) {
    totaldec_ = new ::std::string;
  }
  return totaldec_;
}
inline ::std::string* InvoiceCorrectionRevisionMetadata::release_totaldec() {
  clear_has_totaldec();
  if (totaldec_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = totaldec_;
    totaldec_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void InvoiceCorrectionRevisionMetadata::set_allocated_totaldec(::std::string* totaldec) {
  if (totaldec_ != &::google::protobuf::internal::kEmptyString) {
    delete totaldec_;
  }
  if (totaldec) {
    set_has_totaldec();
    totaldec_ = totaldec;
  } else {
    clear_has_totaldec();
    totaldec_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string VatInc = 10;
inline bool InvoiceCorrectionRevisionMetadata::has_vatinc() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void InvoiceCorrectionRevisionMetadata::set_has_vatinc() {
  _has_bits_[0] |= 0x00000200u;
}
inline void InvoiceCorrectionRevisionMetadata::clear_has_vatinc() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void InvoiceCorrectionRevisionMetadata::clear_vatinc() {
  if (vatinc_ != &::google::protobuf::internal::kEmptyString) {
    vatinc_->clear();
  }
  clear_has_vatinc();
}
inline const ::std::string& InvoiceCorrectionRevisionMetadata::vatinc() const {
  return *vatinc_;
}
inline void InvoiceCorrectionRevisionMetadata::set_vatinc(const ::std::string& value) {
  set_has_vatinc();
  if (vatinc_ == &::google::protobuf::internal::kEmptyString) {
    vatinc_ = new ::std::string;
  }
  vatinc_->assign(value);
}
inline void InvoiceCorrectionRevisionMetadata::set_vatinc(const char* value) {
  set_has_vatinc();
  if (vatinc_ == &::google::protobuf::internal::kEmptyString) {
    vatinc_ = new ::std::string;
  }
  vatinc_->assign(value);
}
inline void InvoiceCorrectionRevisionMetadata::set_vatinc(const char* value, size_t size) {
  set_has_vatinc();
  if (vatinc_ == &::google::protobuf::internal::kEmptyString) {
    vatinc_ = new ::std::string;
  }
  vatinc_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* InvoiceCorrectionRevisionMetadata::mutable_vatinc() {
  set_has_vatinc();
  if (vatinc_ == &::google::protobuf::internal::kEmptyString) {
    vatinc_ = new ::std::string;
  }
  return vatinc_;
}
inline ::std::string* InvoiceCorrectionRevisionMetadata::release_vatinc() {
  clear_has_vatinc();
  if (vatinc_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = vatinc_;
    vatinc_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void InvoiceCorrectionRevisionMetadata::set_allocated_vatinc(::std::string* vatinc) {
  if (vatinc_ != &::google::protobuf::internal::kEmptyString) {
    delete vatinc_;
  }
  if (vatinc) {
    set_has_vatinc();
    vatinc_ = vatinc;
  } else {
    clear_has_vatinc();
    vatinc_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string VatDec = 11;
inline bool InvoiceCorrectionRevisionMetadata::has_vatdec() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void InvoiceCorrectionRevisionMetadata::set_has_vatdec() {
  _has_bits_[0] |= 0x00000400u;
}
inline void InvoiceCorrectionRevisionMetadata::clear_has_vatdec() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void InvoiceCorrectionRevisionMetadata::clear_vatdec() {
  if (vatdec_ != &::google::protobuf::internal::kEmptyString) {
    vatdec_->clear();
  }
  clear_has_vatdec();
}
inline const ::std::string& InvoiceCorrectionRevisionMetadata::vatdec() const {
  return *vatdec_;
}
inline void InvoiceCorrectionRevisionMetadata::set_vatdec(const ::std::string& value) {
  set_has_vatdec();
  if (vatdec_ == &::google::protobuf::internal::kEmptyString) {
    vatdec_ = new ::std::string;
  }
  vatdec_->assign(value);
}
inline void InvoiceCorrectionRevisionMetadata::set_vatdec(const char* value) {
  set_has_vatdec();
  if (vatdec_ == &::google::protobuf::internal::kEmptyString) {
    vatdec_ = new ::std::string;
  }
  vatdec_->assign(value);
}
inline void InvoiceCorrectionRevisionMetadata::set_vatdec(const char* value, size_t size) {
  set_has_vatdec();
  if (vatdec_ == &::google::protobuf::internal::kEmptyString) {
    vatdec_ = new ::std::string;
  }
  vatdec_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* InvoiceCorrectionRevisionMetadata::mutable_vatdec() {
  set_has_vatdec();
  if (vatdec_ == &::google::protobuf::internal::kEmptyString) {
    vatdec_ = new ::std::string;
  }
  return vatdec_;
}
inline ::std::string* InvoiceCorrectionRevisionMetadata::release_vatdec() {
  clear_has_vatdec();
  if (vatdec_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = vatdec_;
    vatdec_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void InvoiceCorrectionRevisionMetadata::set_allocated_vatdec(::std::string* vatdec) {
  if (vatdec_ != &::google::protobuf::internal::kEmptyString) {
    delete vatdec_;
  }
  if (vatdec) {
    set_has_vatdec();
    vatdec_ = vatdec;
  } else {
    clear_has_vatdec();
    vatdec_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 Currency = 12;
inline bool InvoiceCorrectionRevisionMetadata::has_currency() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void InvoiceCorrectionRevisionMetadata::set_has_currency() {
  _has_bits_[0] |= 0x00000800u;
}
inline void InvoiceCorrectionRevisionMetadata::clear_has_currency() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void InvoiceCorrectionRevisionMetadata::clear_currency() {
  currency_ = 0;
  clear_has_currency();
}
inline ::google::protobuf::int32 InvoiceCorrectionRevisionMetadata::currency() const {
  return currency_;
}
inline void InvoiceCorrectionRevisionMetadata::set_currency(::google::protobuf::int32 value) {
  set_has_currency();
  currency_ = value;
}

// required sfixed64 ConfirmationDateTimeTicks = 13;
inline bool InvoiceCorrectionRevisionMetadata::has_confirmationdatetimeticks() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void InvoiceCorrectionRevisionMetadata::set_has_confirmationdatetimeticks() {
  _has_bits_[0] |= 0x00001000u;
}
inline void InvoiceCorrectionRevisionMetadata::clear_has_confirmationdatetimeticks() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void InvoiceCorrectionRevisionMetadata::clear_confirmationdatetimeticks() {
  confirmationdatetimeticks_ = GOOGLE_LONGLONG(0);
  clear_has_confirmationdatetimeticks();
}
inline ::google::protobuf::int64 InvoiceCorrectionRevisionMetadata::confirmationdatetimeticks() const {
  return confirmationdatetimeticks_;
}
inline void InvoiceCorrectionRevisionMetadata::set_confirmationdatetimeticks(::google::protobuf::int64 value) {
  set_has_confirmationdatetimeticks();
  confirmationdatetimeticks_ = value;
}

// required int32 InvoiceAmendmentFlags = 14;
inline bool InvoiceCorrectionRevisionMetadata::has_invoiceamendmentflags() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void InvoiceCorrectionRevisionMetadata::set_has_invoiceamendmentflags() {
  _has_bits_[0] |= 0x00002000u;
}
inline void InvoiceCorrectionRevisionMetadata::clear_has_invoiceamendmentflags() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void InvoiceCorrectionRevisionMetadata::clear_invoiceamendmentflags() {
  invoiceamendmentflags_ = 0;
  clear_has_invoiceamendmentflags();
}
inline ::google::protobuf::int32 InvoiceCorrectionRevisionMetadata::invoiceamendmentflags() const {
  return invoiceamendmentflags_;
}
inline void InvoiceCorrectionRevisionMetadata::set_invoiceamendmentflags(::google::protobuf::int32 value) {
  set_has_invoiceamendmentflags();
  invoiceamendmentflags_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace InvoiceDocument
}  // namespace Documents
}  // namespace Proto
}  // namespace Api
}  // namespace Diadoc

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Diadoc::Api::Proto::Documents::InvoiceDocument::InvoiceStatus>() {
  return ::Diadoc::Api::Proto::Documents::InvoiceDocument::InvoiceStatus_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_Documents_2fInvoiceDocument_2eproto__INCLUDED
