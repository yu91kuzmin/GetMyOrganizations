// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Documents/Document.proto

#ifndef PROTOBUF_Documents_2fDocument_2eproto__INCLUDED
#define PROTOBUF_Documents_2fDocument_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "../Content.pb.h"
#include "../DocumentId.pb.h"
#include "../DocumentType.pb.h"
#include "../ResolutionTarget.pb.h"
#include "../ForwardDocumentEvent.pb.h"
#include "InvoiceDocument.pb.h"
#include "BilateralDocument.pb.h"
#include "UnilateralDocument.pb.h"
#include "NonformalizedDocument.pb.h"
#include "AcceptanceCertificateDocument.pb.h"
// @@protoc_insertion_point(includes)

namespace Diadoc {
namespace Api {
namespace Proto {
namespace Documents {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_Documents_2fDocument_2eproto();
void protobuf_AssignDesc_Documents_2fDocument_2eproto();
void protobuf_ShutdownFile_Documents_2fDocument_2eproto();

class Document;
class ResolutionStatus;

enum ResolutionStatusType {
  UnknownResolutionStatus = -1,
  None = 0,
  Approved = 1,
  Disapproved = 2,
  ApprovementRequested = 3,
  SignatureRequested = 4,
  SignatureDenied = 5
};
bool ResolutionStatusType_IsValid(int value);
const ResolutionStatusType ResolutionStatusType_MIN = UnknownResolutionStatus;
const ResolutionStatusType ResolutionStatusType_MAX = SignatureDenied;
const int ResolutionStatusType_ARRAYSIZE = ResolutionStatusType_MAX + 1;

const ::google::protobuf::EnumDescriptor* ResolutionStatusType_descriptor();
inline const ::std::string& ResolutionStatusType_Name(ResolutionStatusType value) {
  return ::google::protobuf::internal::NameOfEnum(
    ResolutionStatusType_descriptor(), value);
}
inline bool ResolutionStatusType_Parse(
    const ::std::string& name, ResolutionStatusType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ResolutionStatusType>(
    ResolutionStatusType_descriptor(), name, value);
}
enum RevocationStatus {
  UnknownRevocationStatus = 0,
  RevocationStatusNone = 1,
  RevocationIsRequestedByMe = 2,
  RequestsMyRevocation = 3,
  RevocationAccepted = 4,
  RevocationRejected = 5
};
bool RevocationStatus_IsValid(int value);
const RevocationStatus RevocationStatus_MIN = UnknownRevocationStatus;
const RevocationStatus RevocationStatus_MAX = RevocationRejected;
const int RevocationStatus_ARRAYSIZE = RevocationStatus_MAX + 1;

const ::google::protobuf::EnumDescriptor* RevocationStatus_descriptor();
inline const ::std::string& RevocationStatus_Name(RevocationStatus value) {
  return ::google::protobuf::internal::NameOfEnum(
    RevocationStatus_descriptor(), value);
}
inline bool RevocationStatus_Parse(
    const ::std::string& name, RevocationStatus* value) {
  return ::google::protobuf::internal::ParseNamedEnum<RevocationStatus>(
    RevocationStatus_descriptor(), name, value);
}
// ===================================================================

class Document : public ::google::protobuf::Message {
 public:
  Document();
  virtual ~Document();

  Document(const Document& from);

  inline Document& operator=(const Document& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Document& default_instance();

  void Swap(Document* other);

  // implements Message ----------------------------------------------

  Document* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Document& from);
  void MergeFrom(const Document& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string IndexKey = 1;
  inline bool has_indexkey() const;
  inline void clear_indexkey();
  static const int kIndexKeyFieldNumber = 1;
  inline const ::std::string& indexkey() const;
  inline void set_indexkey(const ::std::string& value);
  inline void set_indexkey(const char* value);
  inline void set_indexkey(const char* value, size_t size);
  inline ::std::string* mutable_indexkey();
  inline ::std::string* release_indexkey();
  inline void set_allocated_indexkey(::std::string* indexkey);

  // required string MessageId = 2;
  inline bool has_messageid() const;
  inline void clear_messageid();
  static const int kMessageIdFieldNumber = 2;
  inline const ::std::string& messageid() const;
  inline void set_messageid(const ::std::string& value);
  inline void set_messageid(const char* value);
  inline void set_messageid(const char* value, size_t size);
  inline ::std::string* mutable_messageid();
  inline ::std::string* release_messageid();
  inline void set_allocated_messageid(::std::string* messageid);

  // required string EntityId = 3;
  inline bool has_entityid() const;
  inline void clear_entityid();
  static const int kEntityIdFieldNumber = 3;
  inline const ::std::string& entityid() const;
  inline void set_entityid(const ::std::string& value);
  inline void set_entityid(const char* value);
  inline void set_entityid(const char* value, size_t size);
  inline ::std::string* mutable_entityid();
  inline ::std::string* release_entityid();
  inline void set_allocated_entityid(::std::string* entityid);

  // required sfixed64 CreationTimestampTicks = 4;
  inline bool has_creationtimestampticks() const;
  inline void clear_creationtimestampticks();
  static const int kCreationTimestampTicksFieldNumber = 4;
  inline ::google::protobuf::int64 creationtimestampticks() const;
  inline void set_creationtimestampticks(::google::protobuf::int64 value);

  // optional string CounteragentBoxId = 5;
  inline bool has_counteragentboxid() const;
  inline void clear_counteragentboxid();
  static const int kCounteragentBoxIdFieldNumber = 5;
  inline const ::std::string& counteragentboxid() const;
  inline void set_counteragentboxid(const ::std::string& value);
  inline void set_counteragentboxid(const char* value);
  inline void set_counteragentboxid(const char* value, size_t size);
  inline ::std::string* mutable_counteragentboxid();
  inline ::std::string* release_counteragentboxid();
  inline void set_allocated_counteragentboxid(::std::string* counteragentboxid);

  // optional .Diadoc.Api.Proto.DocumentType DocumentType = 6 [default = UnknownDocumentType];
  inline bool has_documenttype() const;
  inline void clear_documenttype();
  static const int kDocumentTypeFieldNumber = 6;
  inline ::Diadoc::Api::Proto::DocumentType documenttype() const;
  inline void set_documenttype(::Diadoc::Api::Proto::DocumentType value);

  // repeated .Diadoc.Api.Proto.DocumentId InitialDocumentIds = 7;
  inline int initialdocumentids_size() const;
  inline void clear_initialdocumentids();
  static const int kInitialDocumentIdsFieldNumber = 7;
  inline const ::Diadoc::Api::Proto::DocumentId& initialdocumentids(int index) const;
  inline ::Diadoc::Api::Proto::DocumentId* mutable_initialdocumentids(int index);
  inline ::Diadoc::Api::Proto::DocumentId* add_initialdocumentids();
  inline const ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::DocumentId >&
      initialdocumentids() const;
  inline ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::DocumentId >*
      mutable_initialdocumentids();

  // repeated .Diadoc.Api.Proto.DocumentId SubordinateDocumentIds = 8;
  inline int subordinatedocumentids_size() const;
  inline void clear_subordinatedocumentids();
  static const int kSubordinateDocumentIdsFieldNumber = 8;
  inline const ::Diadoc::Api::Proto::DocumentId& subordinatedocumentids(int index) const;
  inline ::Diadoc::Api::Proto::DocumentId* mutable_subordinatedocumentids(int index);
  inline ::Diadoc::Api::Proto::DocumentId* add_subordinatedocumentids();
  inline const ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::DocumentId >&
      subordinatedocumentids() const;
  inline ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::DocumentId >*
      mutable_subordinatedocumentids();

  // optional .Diadoc.Api.Proto.Content Content = 9;
  inline bool has_content() const;
  inline void clear_content();
  static const int kContentFieldNumber = 9;
  inline const ::Diadoc::Api::Proto::Content& content() const;
  inline ::Diadoc::Api::Proto::Content* mutable_content();
  inline ::Diadoc::Api::Proto::Content* release_content();
  inline void set_allocated_content(::Diadoc::Api::Proto::Content* content);

  // optional string FileName = 10;
  inline bool has_filename() const;
  inline void clear_filename();
  static const int kFileNameFieldNumber = 10;
  inline const ::std::string& filename() const;
  inline void set_filename(const ::std::string& value);
  inline void set_filename(const char* value);
  inline void set_filename(const char* value, size_t size);
  inline ::std::string* mutable_filename();
  inline ::std::string* release_filename();
  inline void set_allocated_filename(::std::string* filename);

  // optional string DocumentDate = 11;
  inline bool has_documentdate() const;
  inline void clear_documentdate();
  static const int kDocumentDateFieldNumber = 11;
  inline const ::std::string& documentdate() const;
  inline void set_documentdate(const ::std::string& value);
  inline void set_documentdate(const char* value);
  inline void set_documentdate(const char* value, size_t size);
  inline ::std::string* mutable_documentdate();
  inline ::std::string* release_documentdate();
  inline void set_allocated_documentdate(::std::string* documentdate);

  // optional string DocumentNumber = 12;
  inline bool has_documentnumber() const;
  inline void clear_documentnumber();
  static const int kDocumentNumberFieldNumber = 12;
  inline const ::std::string& documentnumber() const;
  inline void set_documentnumber(const ::std::string& value);
  inline void set_documentnumber(const char* value);
  inline void set_documentnumber(const char* value, size_t size);
  inline ::std::string* mutable_documentnumber();
  inline ::std::string* release_documentnumber();
  inline void set_allocated_documentnumber(::std::string* documentnumber);

  // optional .Diadoc.Api.Proto.Documents.NonformalizedDocument.NonformalizedDocumentMetadata NonformalizedDocumentMetadata = 13;
  inline bool has_nonformalizeddocumentmetadata() const;
  inline void clear_nonformalizeddocumentmetadata();
  static const int kNonformalizedDocumentMetadataFieldNumber = 13;
  inline const ::Diadoc::Api::Proto::Documents::NonformalizedDocument::NonformalizedDocumentMetadata& nonformalizeddocumentmetadata() const;
  inline ::Diadoc::Api::Proto::Documents::NonformalizedDocument::NonformalizedDocumentMetadata* mutable_nonformalizeddocumentmetadata();
  inline ::Diadoc::Api::Proto::Documents::NonformalizedDocument::NonformalizedDocumentMetadata* release_nonformalizeddocumentmetadata();
  inline void set_allocated_nonformalizeddocumentmetadata(::Diadoc::Api::Proto::Documents::NonformalizedDocument::NonformalizedDocumentMetadata* nonformalizeddocumentmetadata);

  // optional .Diadoc.Api.Proto.Documents.InvoiceDocument.InvoiceMetadata InvoiceMetadata = 14;
  inline bool has_invoicemetadata() const;
  inline void clear_invoicemetadata();
  static const int kInvoiceMetadataFieldNumber = 14;
  inline const ::Diadoc::Api::Proto::Documents::InvoiceDocument::InvoiceMetadata& invoicemetadata() const;
  inline ::Diadoc::Api::Proto::Documents::InvoiceDocument::InvoiceMetadata* mutable_invoicemetadata();
  inline ::Diadoc::Api::Proto::Documents::InvoiceDocument::InvoiceMetadata* release_invoicemetadata();
  inline void set_allocated_invoicemetadata(::Diadoc::Api::Proto::Documents::InvoiceDocument::InvoiceMetadata* invoicemetadata);

  // optional .Diadoc.Api.Proto.Documents.BilateralDocument.TrustConnectionRequestMetadata TrustConnectionRequestMetadata = 15;
  inline bool has_trustconnectionrequestmetadata() const;
  inline void clear_trustconnectionrequestmetadata();
  static const int kTrustConnectionRequestMetadataFieldNumber = 15;
  inline const ::Diadoc::Api::Proto::Documents::BilateralDocument::TrustConnectionRequestMetadata& trustconnectionrequestmetadata() const;
  inline ::Diadoc::Api::Proto::Documents::BilateralDocument::TrustConnectionRequestMetadata* mutable_trustconnectionrequestmetadata();
  inline ::Diadoc::Api::Proto::Documents::BilateralDocument::TrustConnectionRequestMetadata* release_trustconnectionrequestmetadata();
  inline void set_allocated_trustconnectionrequestmetadata(::Diadoc::Api::Proto::Documents::BilateralDocument::TrustConnectionRequestMetadata* trustconnectionrequestmetadata);

  // optional .Diadoc.Api.Proto.Documents.BilateralDocument.BasicDocumentMetadata Torg12Metadata = 16;
  inline bool has_torg12metadata() const;
  inline void clear_torg12metadata();
  static const int kTorg12MetadataFieldNumber = 16;
  inline const ::Diadoc::Api::Proto::Documents::BilateralDocument::BasicDocumentMetadata& torg12metadata() const;
  inline ::Diadoc::Api::Proto::Documents::BilateralDocument::BasicDocumentMetadata* mutable_torg12metadata();
  inline ::Diadoc::Api::Proto::Documents::BilateralDocument::BasicDocumentMetadata* release_torg12metadata();
  inline void set_allocated_torg12metadata(::Diadoc::Api::Proto::Documents::BilateralDocument::BasicDocumentMetadata* torg12metadata);

  // optional .Diadoc.Api.Proto.Documents.InvoiceDocument.InvoiceRevisionMetadata InvoiceRevisionMetadata = 17;
  inline bool has_invoicerevisionmetadata() const;
  inline void clear_invoicerevisionmetadata();
  static const int kInvoiceRevisionMetadataFieldNumber = 17;
  inline const ::Diadoc::Api::Proto::Documents::InvoiceDocument::InvoiceRevisionMetadata& invoicerevisionmetadata() const;
  inline ::Diadoc::Api::Proto::Documents::InvoiceDocument::InvoiceRevisionMetadata* mutable_invoicerevisionmetadata();
  inline ::Diadoc::Api::Proto::Documents::InvoiceDocument::InvoiceRevisionMetadata* release_invoicerevisionmetadata();
  inline void set_allocated_invoicerevisionmetadata(::Diadoc::Api::Proto::Documents::InvoiceDocument::InvoiceRevisionMetadata* invoicerevisionmetadata);

  // optional .Diadoc.Api.Proto.Documents.InvoiceDocument.InvoiceCorrectionMetadata InvoiceCorrectionMetadata = 18;
  inline bool has_invoicecorrectionmetadata() const;
  inline void clear_invoicecorrectionmetadata();
  static const int kInvoiceCorrectionMetadataFieldNumber = 18;
  inline const ::Diadoc::Api::Proto::Documents::InvoiceDocument::InvoiceCorrectionMetadata& invoicecorrectionmetadata() const;
  inline ::Diadoc::Api::Proto::Documents::InvoiceDocument::InvoiceCorrectionMetadata* mutable_invoicecorrectionmetadata();
  inline ::Diadoc::Api::Proto::Documents::InvoiceDocument::InvoiceCorrectionMetadata* release_invoicecorrectionmetadata();
  inline void set_allocated_invoicecorrectionmetadata(::Diadoc::Api::Proto::Documents::InvoiceDocument::InvoiceCorrectionMetadata* invoicecorrectionmetadata);

  // optional .Diadoc.Api.Proto.Documents.InvoiceDocument.InvoiceCorrectionRevisionMetadata InvoiceCorrectionRevisionMetadata = 19;
  inline bool has_invoicecorrectionrevisionmetadata() const;
  inline void clear_invoicecorrectionrevisionmetadata();
  static const int kInvoiceCorrectionRevisionMetadataFieldNumber = 19;
  inline const ::Diadoc::Api::Proto::Documents::InvoiceDocument::InvoiceCorrectionRevisionMetadata& invoicecorrectionrevisionmetadata() const;
  inline ::Diadoc::Api::Proto::Documents::InvoiceDocument::InvoiceCorrectionRevisionMetadata* mutable_invoicecorrectionrevisionmetadata();
  inline ::Diadoc::Api::Proto::Documents::InvoiceDocument::InvoiceCorrectionRevisionMetadata* release_invoicecorrectionrevisionmetadata();
  inline void set_allocated_invoicecorrectionrevisionmetadata(::Diadoc::Api::Proto::Documents::InvoiceDocument::InvoiceCorrectionRevisionMetadata* invoicecorrectionrevisionmetadata);

  // optional .Diadoc.Api.Proto.Documents.AcceptanceCertificateDocument.AcceptanceCertificateMetadata AcceptanceCertificateMetadata = 20;
  inline bool has_acceptancecertificatemetadata() const;
  inline void clear_acceptancecertificatemetadata();
  static const int kAcceptanceCertificateMetadataFieldNumber = 20;
  inline const ::Diadoc::Api::Proto::Documents::AcceptanceCertificateDocument::AcceptanceCertificateMetadata& acceptancecertificatemetadata() const;
  inline ::Diadoc::Api::Proto::Documents::AcceptanceCertificateDocument::AcceptanceCertificateMetadata* mutable_acceptancecertificatemetadata();
  inline ::Diadoc::Api::Proto::Documents::AcceptanceCertificateDocument::AcceptanceCertificateMetadata* release_acceptancecertificatemetadata();
  inline void set_allocated_acceptancecertificatemetadata(::Diadoc::Api::Proto::Documents::AcceptanceCertificateDocument::AcceptanceCertificateMetadata* acceptancecertificatemetadata);

  // optional .Diadoc.Api.Proto.Documents.UnilateralDocument.ProformaInvoiceMetadata ProformaInvoiceMetadata = 21;
  inline bool has_proformainvoicemetadata() const;
  inline void clear_proformainvoicemetadata();
  static const int kProformaInvoiceMetadataFieldNumber = 21;
  inline const ::Diadoc::Api::Proto::Documents::UnilateralDocument::ProformaInvoiceMetadata& proformainvoicemetadata() const;
  inline ::Diadoc::Api::Proto::Documents::UnilateralDocument::ProformaInvoiceMetadata* mutable_proformainvoicemetadata();
  inline ::Diadoc::Api::Proto::Documents::UnilateralDocument::ProformaInvoiceMetadata* release_proformainvoicemetadata();
  inline void set_allocated_proformainvoicemetadata(::Diadoc::Api::Proto::Documents::UnilateralDocument::ProformaInvoiceMetadata* proformainvoicemetadata);

  // optional .Diadoc.Api.Proto.Documents.BilateralDocument.BasicDocumentMetadata XmlTorg12Metadata = 22;
  inline bool has_xmltorg12metadata() const;
  inline void clear_xmltorg12metadata();
  static const int kXmlTorg12MetadataFieldNumber = 22;
  inline const ::Diadoc::Api::Proto::Documents::BilateralDocument::BasicDocumentMetadata& xmltorg12metadata() const;
  inline ::Diadoc::Api::Proto::Documents::BilateralDocument::BasicDocumentMetadata* mutable_xmltorg12metadata();
  inline ::Diadoc::Api::Proto::Documents::BilateralDocument::BasicDocumentMetadata* release_xmltorg12metadata();
  inline void set_allocated_xmltorg12metadata(::Diadoc::Api::Proto::Documents::BilateralDocument::BasicDocumentMetadata* xmltorg12metadata);

  // optional .Diadoc.Api.Proto.Documents.BilateralDocument.BasicDocumentMetadata XmlAcceptanceCertificateMetadata = 23;
  inline bool has_xmlacceptancecertificatemetadata() const;
  inline void clear_xmlacceptancecertificatemetadata();
  static const int kXmlAcceptanceCertificateMetadataFieldNumber = 23;
  inline const ::Diadoc::Api::Proto::Documents::BilateralDocument::BasicDocumentMetadata& xmlacceptancecertificatemetadata() const;
  inline ::Diadoc::Api::Proto::Documents::BilateralDocument::BasicDocumentMetadata* mutable_xmlacceptancecertificatemetadata();
  inline ::Diadoc::Api::Proto::Documents::BilateralDocument::BasicDocumentMetadata* release_xmlacceptancecertificatemetadata();
  inline void set_allocated_xmlacceptancecertificatemetadata(::Diadoc::Api::Proto::Documents::BilateralDocument::BasicDocumentMetadata* xmlacceptancecertificatemetadata);

  // optional bool IsDeleted = 24 [default = false];
  inline bool has_isdeleted() const;
  inline void clear_isdeleted();
  static const int kIsDeletedFieldNumber = 24;
  inline bool isdeleted() const;
  inline void set_isdeleted(bool value);

  // optional string DepartmentId = 25;
  inline bool has_departmentid() const;
  inline void clear_departmentid();
  static const int kDepartmentIdFieldNumber = 25;
  inline const ::std::string& departmentid() const;
  inline void set_departmentid(const ::std::string& value);
  inline void set_departmentid(const char* value);
  inline void set_departmentid(const char* value, size_t size);
  inline ::std::string* mutable_departmentid();
  inline ::std::string* release_departmentid();
  inline void set_allocated_departmentid(::std::string* departmentid);

  // optional bool IsTest = 26 [default = false];
  inline bool has_istest() const;
  inline void clear_istest();
  static const int kIsTestFieldNumber = 26;
  inline bool istest() const;
  inline void set_istest(bool value);

  // optional string FromDepartmentId = 27;
  inline bool has_fromdepartmentid() const;
  inline void clear_fromdepartmentid();
  static const int kFromDepartmentIdFieldNumber = 27;
  inline const ::std::string& fromdepartmentid() const;
  inline void set_fromdepartmentid(const ::std::string& value);
  inline void set_fromdepartmentid(const char* value);
  inline void set_fromdepartmentid(const char* value, size_t size);
  inline ::std::string* mutable_fromdepartmentid();
  inline ::std::string* release_fromdepartmentid();
  inline void set_allocated_fromdepartmentid(::std::string* fromdepartmentid);

  // optional string ToDepartmentId = 28;
  inline bool has_todepartmentid() const;
  inline void clear_todepartmentid();
  static const int kToDepartmentIdFieldNumber = 28;
  inline const ::std::string& todepartmentid() const;
  inline void set_todepartmentid(const ::std::string& value);
  inline void set_todepartmentid(const char* value);
  inline void set_todepartmentid(const char* value, size_t size);
  inline ::std::string* mutable_todepartmentid();
  inline ::std::string* release_todepartmentid();
  inline void set_allocated_todepartmentid(::std::string* todepartmentid);

  // optional .Diadoc.Api.Proto.Documents.BilateralDocument.PriceListMetadata PriceListMetadata = 29;
  inline bool has_pricelistmetadata() const;
  inline void clear_pricelistmetadata();
  static const int kPriceListMetadataFieldNumber = 29;
  inline const ::Diadoc::Api::Proto::Documents::BilateralDocument::PriceListMetadata& pricelistmetadata() const;
  inline ::Diadoc::Api::Proto::Documents::BilateralDocument::PriceListMetadata* mutable_pricelistmetadata();
  inline ::Diadoc::Api::Proto::Documents::BilateralDocument::PriceListMetadata* release_pricelistmetadata();
  inline void set_allocated_pricelistmetadata(::Diadoc::Api::Proto::Documents::BilateralDocument::PriceListMetadata* pricelistmetadata);

  // optional string CustomDocumentId = 30;
  inline bool has_customdocumentid() const;
  inline void clear_customdocumentid();
  static const int kCustomDocumentIdFieldNumber = 30;
  inline const ::std::string& customdocumentid() const;
  inline void set_customdocumentid(const ::std::string& value);
  inline void set_customdocumentid(const char* value);
  inline void set_customdocumentid(const char* value, size_t size);
  inline ::std::string* mutable_customdocumentid();
  inline ::std::string* release_customdocumentid();
  inline void set_allocated_customdocumentid(::std::string* customdocumentid);

  // optional .Diadoc.Api.Proto.Documents.ResolutionStatus ResolutionStatus = 31;
  inline bool has_resolutionstatus() const;
  inline void clear_resolutionstatus();
  static const int kResolutionStatusFieldNumber = 31;
  inline const ::Diadoc::Api::Proto::Documents::ResolutionStatus& resolutionstatus() const;
  inline ::Diadoc::Api::Proto::Documents::ResolutionStatus* mutable_resolutionstatus();
  inline ::Diadoc::Api::Proto::Documents::ResolutionStatus* release_resolutionstatus();
  inline void set_allocated_resolutionstatus(::Diadoc::Api::Proto::Documents::ResolutionStatus* resolutionstatus);

  // optional .Diadoc.Api.Proto.Documents.RevocationStatus RevocationStatus = 32 [default = UnknownRevocationStatus];
  inline bool has_revocationstatus() const;
  inline void clear_revocationstatus();
  static const int kRevocationStatusFieldNumber = 32;
  inline ::Diadoc::Api::Proto::Documents::RevocationStatus revocationstatus() const;
  inline void set_revocationstatus(::Diadoc::Api::Proto::Documents::RevocationStatus value);

  // optional sfixed64 SendTimestampTicks = 33;
  inline bool has_sendtimestampticks() const;
  inline void clear_sendtimestampticks();
  static const int kSendTimestampTicksFieldNumber = 33;
  inline ::google::protobuf::int64 sendtimestampticks() const;
  inline void set_sendtimestampticks(::google::protobuf::int64 value);

  // optional sfixed64 DeliveryTimestampTicks = 34;
  inline bool has_deliverytimestampticks() const;
  inline void clear_deliverytimestampticks();
  static const int kDeliveryTimestampTicksFieldNumber = 34;
  inline ::google::protobuf::int64 deliverytimestampticks() const;
  inline void set_deliverytimestampticks(::google::protobuf::int64 value);

  // repeated .Diadoc.Api.Proto.ForwardDocumentEvent ForwardDocumentEvents = 35;
  inline int forwarddocumentevents_size() const;
  inline void clear_forwarddocumentevents();
  static const int kForwardDocumentEventsFieldNumber = 35;
  inline const ::Diadoc::Api::Proto::ForwardDocumentEvent& forwarddocumentevents(int index) const;
  inline ::Diadoc::Api::Proto::ForwardDocumentEvent* mutable_forwarddocumentevents(int index);
  inline ::Diadoc::Api::Proto::ForwardDocumentEvent* add_forwarddocumentevents();
  inline const ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::ForwardDocumentEvent >&
      forwarddocumentevents() const;
  inline ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::ForwardDocumentEvent >*
      mutable_forwarddocumentevents();

  // optional .Diadoc.Api.Proto.Documents.BilateralDocument.BilateralDocumentMetadata PriceListAgreementMetadata = 36;
  inline bool has_pricelistagreementmetadata() const;
  inline void clear_pricelistagreementmetadata();
  static const int kPriceListAgreementMetadataFieldNumber = 36;
  inline const ::Diadoc::Api::Proto::Documents::BilateralDocument::BilateralDocumentMetadata& pricelistagreementmetadata() const;
  inline ::Diadoc::Api::Proto::Documents::BilateralDocument::BilateralDocumentMetadata* mutable_pricelistagreementmetadata();
  inline ::Diadoc::Api::Proto::Documents::BilateralDocument::BilateralDocumentMetadata* release_pricelistagreementmetadata();
  inline void set_allocated_pricelistagreementmetadata(::Diadoc::Api::Proto::Documents::BilateralDocument::BilateralDocumentMetadata* pricelistagreementmetadata);

  // optional .Diadoc.Api.Proto.Documents.BilateralDocument.BilateralDocumentMetadata CertificateRegistryMetadata = 37;
  inline bool has_certificateregistrymetadata() const;
  inline void clear_certificateregistrymetadata();
  static const int kCertificateRegistryMetadataFieldNumber = 37;
  inline const ::Diadoc::Api::Proto::Documents::BilateralDocument::BilateralDocumentMetadata& certificateregistrymetadata() const;
  inline ::Diadoc::Api::Proto::Documents::BilateralDocument::BilateralDocumentMetadata* mutable_certificateregistrymetadata();
  inline ::Diadoc::Api::Proto::Documents::BilateralDocument::BilateralDocumentMetadata* release_certificateregistrymetadata();
  inline void set_allocated_certificateregistrymetadata(::Diadoc::Api::Proto::Documents::BilateralDocument::BilateralDocumentMetadata* certificateregistrymetadata);

  // optional .Diadoc.Api.Proto.Documents.BilateralDocument.BilateralDocumentMetadata ReconciliationActMetadata = 38;
  inline bool has_reconciliationactmetadata() const;
  inline void clear_reconciliationactmetadata();
  static const int kReconciliationActMetadataFieldNumber = 38;
  inline const ::Diadoc::Api::Proto::Documents::BilateralDocument::BilateralDocumentMetadata& reconciliationactmetadata() const;
  inline ::Diadoc::Api::Proto::Documents::BilateralDocument::BilateralDocumentMetadata* mutable_reconciliationactmetadata();
  inline ::Diadoc::Api::Proto::Documents::BilateralDocument::BilateralDocumentMetadata* release_reconciliationactmetadata();
  inline void set_allocated_reconciliationactmetadata(::Diadoc::Api::Proto::Documents::BilateralDocument::BilateralDocumentMetadata* reconciliationactmetadata);

  // optional .Diadoc.Api.Proto.Documents.BilateralDocument.ContractMetadata ContractMetadata = 39;
  inline bool has_contractmetadata() const;
  inline void clear_contractmetadata();
  static const int kContractMetadataFieldNumber = 39;
  inline const ::Diadoc::Api::Proto::Documents::BilateralDocument::ContractMetadata& contractmetadata() const;
  inline ::Diadoc::Api::Proto::Documents::BilateralDocument::ContractMetadata* mutable_contractmetadata();
  inline ::Diadoc::Api::Proto::Documents::BilateralDocument::ContractMetadata* release_contractmetadata();
  inline void set_allocated_contractmetadata(::Diadoc::Api::Proto::Documents::BilateralDocument::ContractMetadata* contractmetadata);

  // optional .Diadoc.Api.Proto.Documents.BilateralDocument.BasicDocumentMetadata Torg13Metadata = 40;
  inline bool has_torg13metadata() const;
  inline void clear_torg13metadata();
  static const int kTorg13MetadataFieldNumber = 40;
  inline const ::Diadoc::Api::Proto::Documents::BilateralDocument::BasicDocumentMetadata& torg13metadata() const;
  inline ::Diadoc::Api::Proto::Documents::BilateralDocument::BasicDocumentMetadata* mutable_torg13metadata();
  inline ::Diadoc::Api::Proto::Documents::BilateralDocument::BasicDocumentMetadata* release_torg13metadata();
  inline void set_allocated_torg13metadata(::Diadoc::Api::Proto::Documents::BilateralDocument::BasicDocumentMetadata* torg13metadata);

  // optional .Diadoc.Api.Proto.Documents.UnilateralDocument.ServiceDetailsMetadata ServiceDetailsMetadata = 41;
  inline bool has_servicedetailsmetadata() const;
  inline void clear_servicedetailsmetadata();
  static const int kServiceDetailsMetadataFieldNumber = 41;
  inline const ::Diadoc::Api::Proto::Documents::UnilateralDocument::ServiceDetailsMetadata& servicedetailsmetadata() const;
  inline ::Diadoc::Api::Proto::Documents::UnilateralDocument::ServiceDetailsMetadata* mutable_servicedetailsmetadata();
  inline ::Diadoc::Api::Proto::Documents::UnilateralDocument::ServiceDetailsMetadata* release_servicedetailsmetadata();
  inline void set_allocated_servicedetailsmetadata(::Diadoc::Api::Proto::Documents::UnilateralDocument::ServiceDetailsMetadata* servicedetailsmetadata);

  // @@protoc_insertion_point(class_scope:Diadoc.Api.Proto.Documents.Document)
 private:
  inline void set_has_indexkey();
  inline void clear_has_indexkey();
  inline void set_has_messageid();
  inline void clear_has_messageid();
  inline void set_has_entityid();
  inline void clear_has_entityid();
  inline void set_has_creationtimestampticks();
  inline void clear_has_creationtimestampticks();
  inline void set_has_counteragentboxid();
  inline void clear_has_counteragentboxid();
  inline void set_has_documenttype();
  inline void clear_has_documenttype();
  inline void set_has_content();
  inline void clear_has_content();
  inline void set_has_filename();
  inline void clear_has_filename();
  inline void set_has_documentdate();
  inline void clear_has_documentdate();
  inline void set_has_documentnumber();
  inline void clear_has_documentnumber();
  inline void set_has_nonformalizeddocumentmetadata();
  inline void clear_has_nonformalizeddocumentmetadata();
  inline void set_has_invoicemetadata();
  inline void clear_has_invoicemetadata();
  inline void set_has_trustconnectionrequestmetadata();
  inline void clear_has_trustconnectionrequestmetadata();
  inline void set_has_torg12metadata();
  inline void clear_has_torg12metadata();
  inline void set_has_invoicerevisionmetadata();
  inline void clear_has_invoicerevisionmetadata();
  inline void set_has_invoicecorrectionmetadata();
  inline void clear_has_invoicecorrectionmetadata();
  inline void set_has_invoicecorrectionrevisionmetadata();
  inline void clear_has_invoicecorrectionrevisionmetadata();
  inline void set_has_acceptancecertificatemetadata();
  inline void clear_has_acceptancecertificatemetadata();
  inline void set_has_proformainvoicemetadata();
  inline void clear_has_proformainvoicemetadata();
  inline void set_has_xmltorg12metadata();
  inline void clear_has_xmltorg12metadata();
  inline void set_has_xmlacceptancecertificatemetadata();
  inline void clear_has_xmlacceptancecertificatemetadata();
  inline void set_has_isdeleted();
  inline void clear_has_isdeleted();
  inline void set_has_departmentid();
  inline void clear_has_departmentid();
  inline void set_has_istest();
  inline void clear_has_istest();
  inline void set_has_fromdepartmentid();
  inline void clear_has_fromdepartmentid();
  inline void set_has_todepartmentid();
  inline void clear_has_todepartmentid();
  inline void set_has_pricelistmetadata();
  inline void clear_has_pricelistmetadata();
  inline void set_has_customdocumentid();
  inline void clear_has_customdocumentid();
  inline void set_has_resolutionstatus();
  inline void clear_has_resolutionstatus();
  inline void set_has_revocationstatus();
  inline void clear_has_revocationstatus();
  inline void set_has_sendtimestampticks();
  inline void clear_has_sendtimestampticks();
  inline void set_has_deliverytimestampticks();
  inline void clear_has_deliverytimestampticks();
  inline void set_has_pricelistagreementmetadata();
  inline void clear_has_pricelistagreementmetadata();
  inline void set_has_certificateregistrymetadata();
  inline void clear_has_certificateregistrymetadata();
  inline void set_has_reconciliationactmetadata();
  inline void clear_has_reconciliationactmetadata();
  inline void set_has_contractmetadata();
  inline void clear_has_contractmetadata();
  inline void set_has_torg13metadata();
  inline void clear_has_torg13metadata();
  inline void set_has_servicedetailsmetadata();
  inline void clear_has_servicedetailsmetadata();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* indexkey_;
  ::std::string* messageid_;
  ::std::string* entityid_;
  ::google::protobuf::int64 creationtimestampticks_;
  ::std::string* counteragentboxid_;
  ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::DocumentId > initialdocumentids_;
  ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::DocumentId > subordinatedocumentids_;
  ::Diadoc::Api::Proto::Content* content_;
  ::std::string* filename_;
  ::std::string* documentdate_;
  ::std::string* documentnumber_;
  ::Diadoc::Api::Proto::Documents::NonformalizedDocument::NonformalizedDocumentMetadata* nonformalizeddocumentmetadata_;
  ::Diadoc::Api::Proto::Documents::InvoiceDocument::InvoiceMetadata* invoicemetadata_;
  ::Diadoc::Api::Proto::Documents::BilateralDocument::TrustConnectionRequestMetadata* trustconnectionrequestmetadata_;
  ::Diadoc::Api::Proto::Documents::BilateralDocument::BasicDocumentMetadata* torg12metadata_;
  ::Diadoc::Api::Proto::Documents::InvoiceDocument::InvoiceRevisionMetadata* invoicerevisionmetadata_;
  ::Diadoc::Api::Proto::Documents::InvoiceDocument::InvoiceCorrectionMetadata* invoicecorrectionmetadata_;
  int documenttype_;
  bool isdeleted_;
  bool istest_;
  ::Diadoc::Api::Proto::Documents::InvoiceDocument::InvoiceCorrectionRevisionMetadata* invoicecorrectionrevisionmetadata_;
  ::Diadoc::Api::Proto::Documents::AcceptanceCertificateDocument::AcceptanceCertificateMetadata* acceptancecertificatemetadata_;
  ::Diadoc::Api::Proto::Documents::UnilateralDocument::ProformaInvoiceMetadata* proformainvoicemetadata_;
  ::Diadoc::Api::Proto::Documents::BilateralDocument::BasicDocumentMetadata* xmltorg12metadata_;
  ::Diadoc::Api::Proto::Documents::BilateralDocument::BasicDocumentMetadata* xmlacceptancecertificatemetadata_;
  ::std::string* departmentid_;
  ::std::string* fromdepartmentid_;
  ::std::string* todepartmentid_;
  ::Diadoc::Api::Proto::Documents::BilateralDocument::PriceListMetadata* pricelistmetadata_;
  ::std::string* customdocumentid_;
  ::Diadoc::Api::Proto::Documents::ResolutionStatus* resolutionstatus_;
  ::google::protobuf::int64 sendtimestampticks_;
  ::google::protobuf::int64 deliverytimestampticks_;
  ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::ForwardDocumentEvent > forwarddocumentevents_;
  ::Diadoc::Api::Proto::Documents::BilateralDocument::BilateralDocumentMetadata* pricelistagreementmetadata_;
  ::Diadoc::Api::Proto::Documents::BilateralDocument::BilateralDocumentMetadata* certificateregistrymetadata_;
  ::Diadoc::Api::Proto::Documents::BilateralDocument::BilateralDocumentMetadata* reconciliationactmetadata_;
  ::Diadoc::Api::Proto::Documents::BilateralDocument::ContractMetadata* contractmetadata_;
  ::Diadoc::Api::Proto::Documents::BilateralDocument::BasicDocumentMetadata* torg13metadata_;
  ::Diadoc::Api::Proto::Documents::UnilateralDocument::ServiceDetailsMetadata* servicedetailsmetadata_;
  int revocationstatus_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(41 + 31) / 32];

  friend void  protobuf_AddDesc_Documents_2fDocument_2eproto();
  friend void protobuf_AssignDesc_Documents_2fDocument_2eproto();
  friend void protobuf_ShutdownFile_Documents_2fDocument_2eproto();

  void InitAsDefaultInstance();
  static Document* default_instance_;
};
// -------------------------------------------------------------------

class ResolutionStatus : public ::google::protobuf::Message {
 public:
  ResolutionStatus();
  virtual ~ResolutionStatus();

  ResolutionStatus(const ResolutionStatus& from);

  inline ResolutionStatus& operator=(const ResolutionStatus& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ResolutionStatus& default_instance();

  void Swap(ResolutionStatus* other);

  // implements Message ----------------------------------------------

  ResolutionStatus* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ResolutionStatus& from);
  void MergeFrom(const ResolutionStatus& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Diadoc.Api.Proto.Documents.ResolutionStatusType Type = 1 [default = UnknownResolutionStatus];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::Diadoc::Api::Proto::Documents::ResolutionStatusType type() const;
  inline void set_type(::Diadoc::Api::Proto::Documents::ResolutionStatusType value);

  // optional .Diadoc.Api.Proto.ResolutionTarget Target = 2;
  inline bool has_target() const;
  inline void clear_target();
  static const int kTargetFieldNumber = 2;
  inline const ::Diadoc::Api::Proto::ResolutionTarget& target() const;
  inline ::Diadoc::Api::Proto::ResolutionTarget* mutable_target();
  inline ::Diadoc::Api::Proto::ResolutionTarget* release_target();
  inline void set_allocated_target(::Diadoc::Api::Proto::ResolutionTarget* target);

  // required string AuthorUserId = 3;
  inline bool has_authoruserid() const;
  inline void clear_authoruserid();
  static const int kAuthorUserIdFieldNumber = 3;
  inline const ::std::string& authoruserid() const;
  inline void set_authoruserid(const ::std::string& value);
  inline void set_authoruserid(const char* value);
  inline void set_authoruserid(const char* value, size_t size);
  inline ::std::string* mutable_authoruserid();
  inline ::std::string* release_authoruserid();
  inline void set_allocated_authoruserid(::std::string* authoruserid);

  // required string AuthorFIO = 4;
  inline bool has_authorfio() const;
  inline void clear_authorfio();
  static const int kAuthorFIOFieldNumber = 4;
  inline const ::std::string& authorfio() const;
  inline void set_authorfio(const ::std::string& value);
  inline void set_authorfio(const char* value);
  inline void set_authorfio(const char* value, size_t size);
  inline ::std::string* mutable_authorfio();
  inline ::std::string* release_authorfio();
  inline void set_allocated_authorfio(::std::string* authorfio);

  // @@protoc_insertion_point(class_scope:Diadoc.Api.Proto.Documents.ResolutionStatus)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_target();
  inline void clear_has_target();
  inline void set_has_authoruserid();
  inline void clear_has_authoruserid();
  inline void set_has_authorfio();
  inline void clear_has_authorfio();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::Diadoc::Api::Proto::ResolutionTarget* target_;
  ::std::string* authoruserid_;
  ::std::string* authorfio_;
  int type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_Documents_2fDocument_2eproto();
  friend void protobuf_AssignDesc_Documents_2fDocument_2eproto();
  friend void protobuf_ShutdownFile_Documents_2fDocument_2eproto();

  void InitAsDefaultInstance();
  static ResolutionStatus* default_instance_;
};
// ===================================================================


// ===================================================================

// Document

// optional string IndexKey = 1;
inline bool Document::has_indexkey() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Document::set_has_indexkey() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Document::clear_has_indexkey() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Document::clear_indexkey() {
  if (indexkey_ != &::google::protobuf::internal::kEmptyString) {
    indexkey_->clear();
  }
  clear_has_indexkey();
}
inline const ::std::string& Document::indexkey() const {
  return *indexkey_;
}
inline void Document::set_indexkey(const ::std::string& value) {
  set_has_indexkey();
  if (indexkey_ == &::google::protobuf::internal::kEmptyString) {
    indexkey_ = new ::std::string;
  }
  indexkey_->assign(value);
}
inline void Document::set_indexkey(const char* value) {
  set_has_indexkey();
  if (indexkey_ == &::google::protobuf::internal::kEmptyString) {
    indexkey_ = new ::std::string;
  }
  indexkey_->assign(value);
}
inline void Document::set_indexkey(const char* value, size_t size) {
  set_has_indexkey();
  if (indexkey_ == &::google::protobuf::internal::kEmptyString) {
    indexkey_ = new ::std::string;
  }
  indexkey_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Document::mutable_indexkey() {
  set_has_indexkey();
  if (indexkey_ == &::google::protobuf::internal::kEmptyString) {
    indexkey_ = new ::std::string;
  }
  return indexkey_;
}
inline ::std::string* Document::release_indexkey() {
  clear_has_indexkey();
  if (indexkey_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = indexkey_;
    indexkey_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Document::set_allocated_indexkey(::std::string* indexkey) {
  if (indexkey_ != &::google::protobuf::internal::kEmptyString) {
    delete indexkey_;
  }
  if (indexkey) {
    set_has_indexkey();
    indexkey_ = indexkey;
  } else {
    clear_has_indexkey();
    indexkey_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string MessageId = 2;
inline bool Document::has_messageid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Document::set_has_messageid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Document::clear_has_messageid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Document::clear_messageid() {
  if (messageid_ != &::google::protobuf::internal::kEmptyString) {
    messageid_->clear();
  }
  clear_has_messageid();
}
inline const ::std::string& Document::messageid() const {
  return *messageid_;
}
inline void Document::set_messageid(const ::std::string& value) {
  set_has_messageid();
  if (messageid_ == &::google::protobuf::internal::kEmptyString) {
    messageid_ = new ::std::string;
  }
  messageid_->assign(value);
}
inline void Document::set_messageid(const char* value) {
  set_has_messageid();
  if (messageid_ == &::google::protobuf::internal::kEmptyString) {
    messageid_ = new ::std::string;
  }
  messageid_->assign(value);
}
inline void Document::set_messageid(const char* value, size_t size) {
  set_has_messageid();
  if (messageid_ == &::google::protobuf::internal::kEmptyString) {
    messageid_ = new ::std::string;
  }
  messageid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Document::mutable_messageid() {
  set_has_messageid();
  if (messageid_ == &::google::protobuf::internal::kEmptyString) {
    messageid_ = new ::std::string;
  }
  return messageid_;
}
inline ::std::string* Document::release_messageid() {
  clear_has_messageid();
  if (messageid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = messageid_;
    messageid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Document::set_allocated_messageid(::std::string* messageid) {
  if (messageid_ != &::google::protobuf::internal::kEmptyString) {
    delete messageid_;
  }
  if (messageid) {
    set_has_messageid();
    messageid_ = messageid;
  } else {
    clear_has_messageid();
    messageid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string EntityId = 3;
inline bool Document::has_entityid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Document::set_has_entityid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Document::clear_has_entityid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Document::clear_entityid() {
  if (entityid_ != &::google::protobuf::internal::kEmptyString) {
    entityid_->clear();
  }
  clear_has_entityid();
}
inline const ::std::string& Document::entityid() const {
  return *entityid_;
}
inline void Document::set_entityid(const ::std::string& value) {
  set_has_entityid();
  if (entityid_ == &::google::protobuf::internal::kEmptyString) {
    entityid_ = new ::std::string;
  }
  entityid_->assign(value);
}
inline void Document::set_entityid(const char* value) {
  set_has_entityid();
  if (entityid_ == &::google::protobuf::internal::kEmptyString) {
    entityid_ = new ::std::string;
  }
  entityid_->assign(value);
}
inline void Document::set_entityid(const char* value, size_t size) {
  set_has_entityid();
  if (entityid_ == &::google::protobuf::internal::kEmptyString) {
    entityid_ = new ::std::string;
  }
  entityid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Document::mutable_entityid() {
  set_has_entityid();
  if (entityid_ == &::google::protobuf::internal::kEmptyString) {
    entityid_ = new ::std::string;
  }
  return entityid_;
}
inline ::std::string* Document::release_entityid() {
  clear_has_entityid();
  if (entityid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = entityid_;
    entityid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Document::set_allocated_entityid(::std::string* entityid) {
  if (entityid_ != &::google::protobuf::internal::kEmptyString) {
    delete entityid_;
  }
  if (entityid) {
    set_has_entityid();
    entityid_ = entityid;
  } else {
    clear_has_entityid();
    entityid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required sfixed64 CreationTimestampTicks = 4;
inline bool Document::has_creationtimestampticks() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Document::set_has_creationtimestampticks() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Document::clear_has_creationtimestampticks() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Document::clear_creationtimestampticks() {
  creationtimestampticks_ = GOOGLE_LONGLONG(0);
  clear_has_creationtimestampticks();
}
inline ::google::protobuf::int64 Document::creationtimestampticks() const {
  return creationtimestampticks_;
}
inline void Document::set_creationtimestampticks(::google::protobuf::int64 value) {
  set_has_creationtimestampticks();
  creationtimestampticks_ = value;
}

// optional string CounteragentBoxId = 5;
inline bool Document::has_counteragentboxid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Document::set_has_counteragentboxid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Document::clear_has_counteragentboxid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Document::clear_counteragentboxid() {
  if (counteragentboxid_ != &::google::protobuf::internal::kEmptyString) {
    counteragentboxid_->clear();
  }
  clear_has_counteragentboxid();
}
inline const ::std::string& Document::counteragentboxid() const {
  return *counteragentboxid_;
}
inline void Document::set_counteragentboxid(const ::std::string& value) {
  set_has_counteragentboxid();
  if (counteragentboxid_ == &::google::protobuf::internal::kEmptyString) {
    counteragentboxid_ = new ::std::string;
  }
  counteragentboxid_->assign(value);
}
inline void Document::set_counteragentboxid(const char* value) {
  set_has_counteragentboxid();
  if (counteragentboxid_ == &::google::protobuf::internal::kEmptyString) {
    counteragentboxid_ = new ::std::string;
  }
  counteragentboxid_->assign(value);
}
inline void Document::set_counteragentboxid(const char* value, size_t size) {
  set_has_counteragentboxid();
  if (counteragentboxid_ == &::google::protobuf::internal::kEmptyString) {
    counteragentboxid_ = new ::std::string;
  }
  counteragentboxid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Document::mutable_counteragentboxid() {
  set_has_counteragentboxid();
  if (counteragentboxid_ == &::google::protobuf::internal::kEmptyString) {
    counteragentboxid_ = new ::std::string;
  }
  return counteragentboxid_;
}
inline ::std::string* Document::release_counteragentboxid() {
  clear_has_counteragentboxid();
  if (counteragentboxid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = counteragentboxid_;
    counteragentboxid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Document::set_allocated_counteragentboxid(::std::string* counteragentboxid) {
  if (counteragentboxid_ != &::google::protobuf::internal::kEmptyString) {
    delete counteragentboxid_;
  }
  if (counteragentboxid) {
    set_has_counteragentboxid();
    counteragentboxid_ = counteragentboxid;
  } else {
    clear_has_counteragentboxid();
    counteragentboxid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional .Diadoc.Api.Proto.DocumentType DocumentType = 6 [default = UnknownDocumentType];
inline bool Document::has_documenttype() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Document::set_has_documenttype() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Document::clear_has_documenttype() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Document::clear_documenttype() {
  documenttype_ = -1;
  clear_has_documenttype();
}
inline ::Diadoc::Api::Proto::DocumentType Document::documenttype() const {
  return static_cast< ::Diadoc::Api::Proto::DocumentType >(documenttype_);
}
inline void Document::set_documenttype(::Diadoc::Api::Proto::DocumentType value) {
  assert(::Diadoc::Api::Proto::DocumentType_IsValid(value));
  set_has_documenttype();
  documenttype_ = value;
}

// repeated .Diadoc.Api.Proto.DocumentId InitialDocumentIds = 7;
inline int Document::initialdocumentids_size() const {
  return initialdocumentids_.size();
}
inline void Document::clear_initialdocumentids() {
  initialdocumentids_.Clear();
}
inline const ::Diadoc::Api::Proto::DocumentId& Document::initialdocumentids(int index) const {
  return initialdocumentids_.Get(index);
}
inline ::Diadoc::Api::Proto::DocumentId* Document::mutable_initialdocumentids(int index) {
  return initialdocumentids_.Mutable(index);
}
inline ::Diadoc::Api::Proto::DocumentId* Document::add_initialdocumentids() {
  return initialdocumentids_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::DocumentId >&
Document::initialdocumentids() const {
  return initialdocumentids_;
}
inline ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::DocumentId >*
Document::mutable_initialdocumentids() {
  return &initialdocumentids_;
}

// repeated .Diadoc.Api.Proto.DocumentId SubordinateDocumentIds = 8;
inline int Document::subordinatedocumentids_size() const {
  return subordinatedocumentids_.size();
}
inline void Document::clear_subordinatedocumentids() {
  subordinatedocumentids_.Clear();
}
inline const ::Diadoc::Api::Proto::DocumentId& Document::subordinatedocumentids(int index) const {
  return subordinatedocumentids_.Get(index);
}
inline ::Diadoc::Api::Proto::DocumentId* Document::mutable_subordinatedocumentids(int index) {
  return subordinatedocumentids_.Mutable(index);
}
inline ::Diadoc::Api::Proto::DocumentId* Document::add_subordinatedocumentids() {
  return subordinatedocumentids_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::DocumentId >&
Document::subordinatedocumentids() const {
  return subordinatedocumentids_;
}
inline ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::DocumentId >*
Document::mutable_subordinatedocumentids() {
  return &subordinatedocumentids_;
}

// optional .Diadoc.Api.Proto.Content Content = 9;
inline bool Document::has_content() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Document::set_has_content() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Document::clear_has_content() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Document::clear_content() {
  if (content_ != NULL) content_->::Diadoc::Api::Proto::Content::Clear();
  clear_has_content();
}
inline const ::Diadoc::Api::Proto::Content& Document::content() const {
  return content_ != NULL ? *content_ : *default_instance_->content_;
}
inline ::Diadoc::Api::Proto::Content* Document::mutable_content() {
  set_has_content();
  if (content_ == NULL) content_ = new ::Diadoc::Api::Proto::Content;
  return content_;
}
inline ::Diadoc::Api::Proto::Content* Document::release_content() {
  clear_has_content();
  ::Diadoc::Api::Proto::Content* temp = content_;
  content_ = NULL;
  return temp;
}
inline void Document::set_allocated_content(::Diadoc::Api::Proto::Content* content) {
  delete content_;
  content_ = content;
  if (content) {
    set_has_content();
  } else {
    clear_has_content();
  }
}

// optional string FileName = 10;
inline bool Document::has_filename() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Document::set_has_filename() {
  _has_bits_[0] |= 0x00000200u;
}
inline void Document::clear_has_filename() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void Document::clear_filename() {
  if (filename_ != &::google::protobuf::internal::kEmptyString) {
    filename_->clear();
  }
  clear_has_filename();
}
inline const ::std::string& Document::filename() const {
  return *filename_;
}
inline void Document::set_filename(const ::std::string& value) {
  set_has_filename();
  if (filename_ == &::google::protobuf::internal::kEmptyString) {
    filename_ = new ::std::string;
  }
  filename_->assign(value);
}
inline void Document::set_filename(const char* value) {
  set_has_filename();
  if (filename_ == &::google::protobuf::internal::kEmptyString) {
    filename_ = new ::std::string;
  }
  filename_->assign(value);
}
inline void Document::set_filename(const char* value, size_t size) {
  set_has_filename();
  if (filename_ == &::google::protobuf::internal::kEmptyString) {
    filename_ = new ::std::string;
  }
  filename_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Document::mutable_filename() {
  set_has_filename();
  if (filename_ == &::google::protobuf::internal::kEmptyString) {
    filename_ = new ::std::string;
  }
  return filename_;
}
inline ::std::string* Document::release_filename() {
  clear_has_filename();
  if (filename_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = filename_;
    filename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Document::set_allocated_filename(::std::string* filename) {
  if (filename_ != &::google::protobuf::internal::kEmptyString) {
    delete filename_;
  }
  if (filename) {
    set_has_filename();
    filename_ = filename;
  } else {
    clear_has_filename();
    filename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string DocumentDate = 11;
inline bool Document::has_documentdate() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void Document::set_has_documentdate() {
  _has_bits_[0] |= 0x00000400u;
}
inline void Document::clear_has_documentdate() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void Document::clear_documentdate() {
  if (documentdate_ != &::google::protobuf::internal::kEmptyString) {
    documentdate_->clear();
  }
  clear_has_documentdate();
}
inline const ::std::string& Document::documentdate() const {
  return *documentdate_;
}
inline void Document::set_documentdate(const ::std::string& value) {
  set_has_documentdate();
  if (documentdate_ == &::google::protobuf::internal::kEmptyString) {
    documentdate_ = new ::std::string;
  }
  documentdate_->assign(value);
}
inline void Document::set_documentdate(const char* value) {
  set_has_documentdate();
  if (documentdate_ == &::google::protobuf::internal::kEmptyString) {
    documentdate_ = new ::std::string;
  }
  documentdate_->assign(value);
}
inline void Document::set_documentdate(const char* value, size_t size) {
  set_has_documentdate();
  if (documentdate_ == &::google::protobuf::internal::kEmptyString) {
    documentdate_ = new ::std::string;
  }
  documentdate_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Document::mutable_documentdate() {
  set_has_documentdate();
  if (documentdate_ == &::google::protobuf::internal::kEmptyString) {
    documentdate_ = new ::std::string;
  }
  return documentdate_;
}
inline ::std::string* Document::release_documentdate() {
  clear_has_documentdate();
  if (documentdate_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = documentdate_;
    documentdate_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Document::set_allocated_documentdate(::std::string* documentdate) {
  if (documentdate_ != &::google::protobuf::internal::kEmptyString) {
    delete documentdate_;
  }
  if (documentdate) {
    set_has_documentdate();
    documentdate_ = documentdate;
  } else {
    clear_has_documentdate();
    documentdate_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string DocumentNumber = 12;
inline bool Document::has_documentnumber() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void Document::set_has_documentnumber() {
  _has_bits_[0] |= 0x00000800u;
}
inline void Document::clear_has_documentnumber() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void Document::clear_documentnumber() {
  if (documentnumber_ != &::google::protobuf::internal::kEmptyString) {
    documentnumber_->clear();
  }
  clear_has_documentnumber();
}
inline const ::std::string& Document::documentnumber() const {
  return *documentnumber_;
}
inline void Document::set_documentnumber(const ::std::string& value) {
  set_has_documentnumber();
  if (documentnumber_ == &::google::protobuf::internal::kEmptyString) {
    documentnumber_ = new ::std::string;
  }
  documentnumber_->assign(value);
}
inline void Document::set_documentnumber(const char* value) {
  set_has_documentnumber();
  if (documentnumber_ == &::google::protobuf::internal::kEmptyString) {
    documentnumber_ = new ::std::string;
  }
  documentnumber_->assign(value);
}
inline void Document::set_documentnumber(const char* value, size_t size) {
  set_has_documentnumber();
  if (documentnumber_ == &::google::protobuf::internal::kEmptyString) {
    documentnumber_ = new ::std::string;
  }
  documentnumber_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Document::mutable_documentnumber() {
  set_has_documentnumber();
  if (documentnumber_ == &::google::protobuf::internal::kEmptyString) {
    documentnumber_ = new ::std::string;
  }
  return documentnumber_;
}
inline ::std::string* Document::release_documentnumber() {
  clear_has_documentnumber();
  if (documentnumber_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = documentnumber_;
    documentnumber_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Document::set_allocated_documentnumber(::std::string* documentnumber) {
  if (documentnumber_ != &::google::protobuf::internal::kEmptyString) {
    delete documentnumber_;
  }
  if (documentnumber) {
    set_has_documentnumber();
    documentnumber_ = documentnumber;
  } else {
    clear_has_documentnumber();
    documentnumber_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional .Diadoc.Api.Proto.Documents.NonformalizedDocument.NonformalizedDocumentMetadata NonformalizedDocumentMetadata = 13;
inline bool Document::has_nonformalizeddocumentmetadata() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void Document::set_has_nonformalizeddocumentmetadata() {
  _has_bits_[0] |= 0x00001000u;
}
inline void Document::clear_has_nonformalizeddocumentmetadata() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void Document::clear_nonformalizeddocumentmetadata() {
  if (nonformalizeddocumentmetadata_ != NULL) nonformalizeddocumentmetadata_->::Diadoc::Api::Proto::Documents::NonformalizedDocument::NonformalizedDocumentMetadata::Clear();
  clear_has_nonformalizeddocumentmetadata();
}
inline const ::Diadoc::Api::Proto::Documents::NonformalizedDocument::NonformalizedDocumentMetadata& Document::nonformalizeddocumentmetadata() const {
  return nonformalizeddocumentmetadata_ != NULL ? *nonformalizeddocumentmetadata_ : *default_instance_->nonformalizeddocumentmetadata_;
}
inline ::Diadoc::Api::Proto::Documents::NonformalizedDocument::NonformalizedDocumentMetadata* Document::mutable_nonformalizeddocumentmetadata() {
  set_has_nonformalizeddocumentmetadata();
  if (nonformalizeddocumentmetadata_ == NULL) nonformalizeddocumentmetadata_ = new ::Diadoc::Api::Proto::Documents::NonformalizedDocument::NonformalizedDocumentMetadata;
  return nonformalizeddocumentmetadata_;
}
inline ::Diadoc::Api::Proto::Documents::NonformalizedDocument::NonformalizedDocumentMetadata* Document::release_nonformalizeddocumentmetadata() {
  clear_has_nonformalizeddocumentmetadata();
  ::Diadoc::Api::Proto::Documents::NonformalizedDocument::NonformalizedDocumentMetadata* temp = nonformalizeddocumentmetadata_;
  nonformalizeddocumentmetadata_ = NULL;
  return temp;
}
inline void Document::set_allocated_nonformalizeddocumentmetadata(::Diadoc::Api::Proto::Documents::NonformalizedDocument::NonformalizedDocumentMetadata* nonformalizeddocumentmetadata) {
  delete nonformalizeddocumentmetadata_;
  nonformalizeddocumentmetadata_ = nonformalizeddocumentmetadata;
  if (nonformalizeddocumentmetadata) {
    set_has_nonformalizeddocumentmetadata();
  } else {
    clear_has_nonformalizeddocumentmetadata();
  }
}

// optional .Diadoc.Api.Proto.Documents.InvoiceDocument.InvoiceMetadata InvoiceMetadata = 14;
inline bool Document::has_invoicemetadata() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void Document::set_has_invoicemetadata() {
  _has_bits_[0] |= 0x00002000u;
}
inline void Document::clear_has_invoicemetadata() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void Document::clear_invoicemetadata() {
  if (invoicemetadata_ != NULL) invoicemetadata_->::Diadoc::Api::Proto::Documents::InvoiceDocument::InvoiceMetadata::Clear();
  clear_has_invoicemetadata();
}
inline const ::Diadoc::Api::Proto::Documents::InvoiceDocument::InvoiceMetadata& Document::invoicemetadata() const {
  return invoicemetadata_ != NULL ? *invoicemetadata_ : *default_instance_->invoicemetadata_;
}
inline ::Diadoc::Api::Proto::Documents::InvoiceDocument::InvoiceMetadata* Document::mutable_invoicemetadata() {
  set_has_invoicemetadata();
  if (invoicemetadata_ == NULL) invoicemetadata_ = new ::Diadoc::Api::Proto::Documents::InvoiceDocument::InvoiceMetadata;
  return invoicemetadata_;
}
inline ::Diadoc::Api::Proto::Documents::InvoiceDocument::InvoiceMetadata* Document::release_invoicemetadata() {
  clear_has_invoicemetadata();
  ::Diadoc::Api::Proto::Documents::InvoiceDocument::InvoiceMetadata* temp = invoicemetadata_;
  invoicemetadata_ = NULL;
  return temp;
}
inline void Document::set_allocated_invoicemetadata(::Diadoc::Api::Proto::Documents::InvoiceDocument::InvoiceMetadata* invoicemetadata) {
  delete invoicemetadata_;
  invoicemetadata_ = invoicemetadata;
  if (invoicemetadata) {
    set_has_invoicemetadata();
  } else {
    clear_has_invoicemetadata();
  }
}

// optional .Diadoc.Api.Proto.Documents.BilateralDocument.TrustConnectionRequestMetadata TrustConnectionRequestMetadata = 15;
inline bool Document::has_trustconnectionrequestmetadata() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void Document::set_has_trustconnectionrequestmetadata() {
  _has_bits_[0] |= 0x00004000u;
}
inline void Document::clear_has_trustconnectionrequestmetadata() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void Document::clear_trustconnectionrequestmetadata() {
  if (trustconnectionrequestmetadata_ != NULL) trustconnectionrequestmetadata_->::Diadoc::Api::Proto::Documents::BilateralDocument::TrustConnectionRequestMetadata::Clear();
  clear_has_trustconnectionrequestmetadata();
}
inline const ::Diadoc::Api::Proto::Documents::BilateralDocument::TrustConnectionRequestMetadata& Document::trustconnectionrequestmetadata() const {
  return trustconnectionrequestmetadata_ != NULL ? *trustconnectionrequestmetadata_ : *default_instance_->trustconnectionrequestmetadata_;
}
inline ::Diadoc::Api::Proto::Documents::BilateralDocument::TrustConnectionRequestMetadata* Document::mutable_trustconnectionrequestmetadata() {
  set_has_trustconnectionrequestmetadata();
  if (trustconnectionrequestmetadata_ == NULL) trustconnectionrequestmetadata_ = new ::Diadoc::Api::Proto::Documents::BilateralDocument::TrustConnectionRequestMetadata;
  return trustconnectionrequestmetadata_;
}
inline ::Diadoc::Api::Proto::Documents::BilateralDocument::TrustConnectionRequestMetadata* Document::release_trustconnectionrequestmetadata() {
  clear_has_trustconnectionrequestmetadata();
  ::Diadoc::Api::Proto::Documents::BilateralDocument::TrustConnectionRequestMetadata* temp = trustconnectionrequestmetadata_;
  trustconnectionrequestmetadata_ = NULL;
  return temp;
}
inline void Document::set_allocated_trustconnectionrequestmetadata(::Diadoc::Api::Proto::Documents::BilateralDocument::TrustConnectionRequestMetadata* trustconnectionrequestmetadata) {
  delete trustconnectionrequestmetadata_;
  trustconnectionrequestmetadata_ = trustconnectionrequestmetadata;
  if (trustconnectionrequestmetadata) {
    set_has_trustconnectionrequestmetadata();
  } else {
    clear_has_trustconnectionrequestmetadata();
  }
}

// optional .Diadoc.Api.Proto.Documents.BilateralDocument.BasicDocumentMetadata Torg12Metadata = 16;
inline bool Document::has_torg12metadata() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void Document::set_has_torg12metadata() {
  _has_bits_[0] |= 0x00008000u;
}
inline void Document::clear_has_torg12metadata() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void Document::clear_torg12metadata() {
  if (torg12metadata_ != NULL) torg12metadata_->::Diadoc::Api::Proto::Documents::BilateralDocument::BasicDocumentMetadata::Clear();
  clear_has_torg12metadata();
}
inline const ::Diadoc::Api::Proto::Documents::BilateralDocument::BasicDocumentMetadata& Document::torg12metadata() const {
  return torg12metadata_ != NULL ? *torg12metadata_ : *default_instance_->torg12metadata_;
}
inline ::Diadoc::Api::Proto::Documents::BilateralDocument::BasicDocumentMetadata* Document::mutable_torg12metadata() {
  set_has_torg12metadata();
  if (torg12metadata_ == NULL) torg12metadata_ = new ::Diadoc::Api::Proto::Documents::BilateralDocument::BasicDocumentMetadata;
  return torg12metadata_;
}
inline ::Diadoc::Api::Proto::Documents::BilateralDocument::BasicDocumentMetadata* Document::release_torg12metadata() {
  clear_has_torg12metadata();
  ::Diadoc::Api::Proto::Documents::BilateralDocument::BasicDocumentMetadata* temp = torg12metadata_;
  torg12metadata_ = NULL;
  return temp;
}
inline void Document::set_allocated_torg12metadata(::Diadoc::Api::Proto::Documents::BilateralDocument::BasicDocumentMetadata* torg12metadata) {
  delete torg12metadata_;
  torg12metadata_ = torg12metadata;
  if (torg12metadata) {
    set_has_torg12metadata();
  } else {
    clear_has_torg12metadata();
  }
}

// optional .Diadoc.Api.Proto.Documents.InvoiceDocument.InvoiceRevisionMetadata InvoiceRevisionMetadata = 17;
inline bool Document::has_invoicerevisionmetadata() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void Document::set_has_invoicerevisionmetadata() {
  _has_bits_[0] |= 0x00010000u;
}
inline void Document::clear_has_invoicerevisionmetadata() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void Document::clear_invoicerevisionmetadata() {
  if (invoicerevisionmetadata_ != NULL) invoicerevisionmetadata_->::Diadoc::Api::Proto::Documents::InvoiceDocument::InvoiceRevisionMetadata::Clear();
  clear_has_invoicerevisionmetadata();
}
inline const ::Diadoc::Api::Proto::Documents::InvoiceDocument::InvoiceRevisionMetadata& Document::invoicerevisionmetadata() const {
  return invoicerevisionmetadata_ != NULL ? *invoicerevisionmetadata_ : *default_instance_->invoicerevisionmetadata_;
}
inline ::Diadoc::Api::Proto::Documents::InvoiceDocument::InvoiceRevisionMetadata* Document::mutable_invoicerevisionmetadata() {
  set_has_invoicerevisionmetadata();
  if (invoicerevisionmetadata_ == NULL) invoicerevisionmetadata_ = new ::Diadoc::Api::Proto::Documents::InvoiceDocument::InvoiceRevisionMetadata;
  return invoicerevisionmetadata_;
}
inline ::Diadoc::Api::Proto::Documents::InvoiceDocument::InvoiceRevisionMetadata* Document::release_invoicerevisionmetadata() {
  clear_has_invoicerevisionmetadata();
  ::Diadoc::Api::Proto::Documents::InvoiceDocument::InvoiceRevisionMetadata* temp = invoicerevisionmetadata_;
  invoicerevisionmetadata_ = NULL;
  return temp;
}
inline void Document::set_allocated_invoicerevisionmetadata(::Diadoc::Api::Proto::Documents::InvoiceDocument::InvoiceRevisionMetadata* invoicerevisionmetadata) {
  delete invoicerevisionmetadata_;
  invoicerevisionmetadata_ = invoicerevisionmetadata;
  if (invoicerevisionmetadata) {
    set_has_invoicerevisionmetadata();
  } else {
    clear_has_invoicerevisionmetadata();
  }
}

// optional .Diadoc.Api.Proto.Documents.InvoiceDocument.InvoiceCorrectionMetadata InvoiceCorrectionMetadata = 18;
inline bool Document::has_invoicecorrectionmetadata() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void Document::set_has_invoicecorrectionmetadata() {
  _has_bits_[0] |= 0x00020000u;
}
inline void Document::clear_has_invoicecorrectionmetadata() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void Document::clear_invoicecorrectionmetadata() {
  if (invoicecorrectionmetadata_ != NULL) invoicecorrectionmetadata_->::Diadoc::Api::Proto::Documents::InvoiceDocument::InvoiceCorrectionMetadata::Clear();
  clear_has_invoicecorrectionmetadata();
}
inline const ::Diadoc::Api::Proto::Documents::InvoiceDocument::InvoiceCorrectionMetadata& Document::invoicecorrectionmetadata() const {
  return invoicecorrectionmetadata_ != NULL ? *invoicecorrectionmetadata_ : *default_instance_->invoicecorrectionmetadata_;
}
inline ::Diadoc::Api::Proto::Documents::InvoiceDocument::InvoiceCorrectionMetadata* Document::mutable_invoicecorrectionmetadata() {
  set_has_invoicecorrectionmetadata();
  if (invoicecorrectionmetadata_ == NULL) invoicecorrectionmetadata_ = new ::Diadoc::Api::Proto::Documents::InvoiceDocument::InvoiceCorrectionMetadata;
  return invoicecorrectionmetadata_;
}
inline ::Diadoc::Api::Proto::Documents::InvoiceDocument::InvoiceCorrectionMetadata* Document::release_invoicecorrectionmetadata() {
  clear_has_invoicecorrectionmetadata();
  ::Diadoc::Api::Proto::Documents::InvoiceDocument::InvoiceCorrectionMetadata* temp = invoicecorrectionmetadata_;
  invoicecorrectionmetadata_ = NULL;
  return temp;
}
inline void Document::set_allocated_invoicecorrectionmetadata(::Diadoc::Api::Proto::Documents::InvoiceDocument::InvoiceCorrectionMetadata* invoicecorrectionmetadata) {
  delete invoicecorrectionmetadata_;
  invoicecorrectionmetadata_ = invoicecorrectionmetadata;
  if (invoicecorrectionmetadata) {
    set_has_invoicecorrectionmetadata();
  } else {
    clear_has_invoicecorrectionmetadata();
  }
}

// optional .Diadoc.Api.Proto.Documents.InvoiceDocument.InvoiceCorrectionRevisionMetadata InvoiceCorrectionRevisionMetadata = 19;
inline bool Document::has_invoicecorrectionrevisionmetadata() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void Document::set_has_invoicecorrectionrevisionmetadata() {
  _has_bits_[0] |= 0x00040000u;
}
inline void Document::clear_has_invoicecorrectionrevisionmetadata() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void Document::clear_invoicecorrectionrevisionmetadata() {
  if (invoicecorrectionrevisionmetadata_ != NULL) invoicecorrectionrevisionmetadata_->::Diadoc::Api::Proto::Documents::InvoiceDocument::InvoiceCorrectionRevisionMetadata::Clear();
  clear_has_invoicecorrectionrevisionmetadata();
}
inline const ::Diadoc::Api::Proto::Documents::InvoiceDocument::InvoiceCorrectionRevisionMetadata& Document::invoicecorrectionrevisionmetadata() const {
  return invoicecorrectionrevisionmetadata_ != NULL ? *invoicecorrectionrevisionmetadata_ : *default_instance_->invoicecorrectionrevisionmetadata_;
}
inline ::Diadoc::Api::Proto::Documents::InvoiceDocument::InvoiceCorrectionRevisionMetadata* Document::mutable_invoicecorrectionrevisionmetadata() {
  set_has_invoicecorrectionrevisionmetadata();
  if (invoicecorrectionrevisionmetadata_ == NULL) invoicecorrectionrevisionmetadata_ = new ::Diadoc::Api::Proto::Documents::InvoiceDocument::InvoiceCorrectionRevisionMetadata;
  return invoicecorrectionrevisionmetadata_;
}
inline ::Diadoc::Api::Proto::Documents::InvoiceDocument::InvoiceCorrectionRevisionMetadata* Document::release_invoicecorrectionrevisionmetadata() {
  clear_has_invoicecorrectionrevisionmetadata();
  ::Diadoc::Api::Proto::Documents::InvoiceDocument::InvoiceCorrectionRevisionMetadata* temp = invoicecorrectionrevisionmetadata_;
  invoicecorrectionrevisionmetadata_ = NULL;
  return temp;
}
inline void Document::set_allocated_invoicecorrectionrevisionmetadata(::Diadoc::Api::Proto::Documents::InvoiceDocument::InvoiceCorrectionRevisionMetadata* invoicecorrectionrevisionmetadata) {
  delete invoicecorrectionrevisionmetadata_;
  invoicecorrectionrevisionmetadata_ = invoicecorrectionrevisionmetadata;
  if (invoicecorrectionrevisionmetadata) {
    set_has_invoicecorrectionrevisionmetadata();
  } else {
    clear_has_invoicecorrectionrevisionmetadata();
  }
}

// optional .Diadoc.Api.Proto.Documents.AcceptanceCertificateDocument.AcceptanceCertificateMetadata AcceptanceCertificateMetadata = 20;
inline bool Document::has_acceptancecertificatemetadata() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void Document::set_has_acceptancecertificatemetadata() {
  _has_bits_[0] |= 0x00080000u;
}
inline void Document::clear_has_acceptancecertificatemetadata() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void Document::clear_acceptancecertificatemetadata() {
  if (acceptancecertificatemetadata_ != NULL) acceptancecertificatemetadata_->::Diadoc::Api::Proto::Documents::AcceptanceCertificateDocument::AcceptanceCertificateMetadata::Clear();
  clear_has_acceptancecertificatemetadata();
}
inline const ::Diadoc::Api::Proto::Documents::AcceptanceCertificateDocument::AcceptanceCertificateMetadata& Document::acceptancecertificatemetadata() const {
  return acceptancecertificatemetadata_ != NULL ? *acceptancecertificatemetadata_ : *default_instance_->acceptancecertificatemetadata_;
}
inline ::Diadoc::Api::Proto::Documents::AcceptanceCertificateDocument::AcceptanceCertificateMetadata* Document::mutable_acceptancecertificatemetadata() {
  set_has_acceptancecertificatemetadata();
  if (acceptancecertificatemetadata_ == NULL) acceptancecertificatemetadata_ = new ::Diadoc::Api::Proto::Documents::AcceptanceCertificateDocument::AcceptanceCertificateMetadata;
  return acceptancecertificatemetadata_;
}
inline ::Diadoc::Api::Proto::Documents::AcceptanceCertificateDocument::AcceptanceCertificateMetadata* Document::release_acceptancecertificatemetadata() {
  clear_has_acceptancecertificatemetadata();
  ::Diadoc::Api::Proto::Documents::AcceptanceCertificateDocument::AcceptanceCertificateMetadata* temp = acceptancecertificatemetadata_;
  acceptancecertificatemetadata_ = NULL;
  return temp;
}
inline void Document::set_allocated_acceptancecertificatemetadata(::Diadoc::Api::Proto::Documents::AcceptanceCertificateDocument::AcceptanceCertificateMetadata* acceptancecertificatemetadata) {
  delete acceptancecertificatemetadata_;
  acceptancecertificatemetadata_ = acceptancecertificatemetadata;
  if (acceptancecertificatemetadata) {
    set_has_acceptancecertificatemetadata();
  } else {
    clear_has_acceptancecertificatemetadata();
  }
}

// optional .Diadoc.Api.Proto.Documents.UnilateralDocument.ProformaInvoiceMetadata ProformaInvoiceMetadata = 21;
inline bool Document::has_proformainvoicemetadata() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void Document::set_has_proformainvoicemetadata() {
  _has_bits_[0] |= 0x00100000u;
}
inline void Document::clear_has_proformainvoicemetadata() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void Document::clear_proformainvoicemetadata() {
  if (proformainvoicemetadata_ != NULL) proformainvoicemetadata_->::Diadoc::Api::Proto::Documents::UnilateralDocument::ProformaInvoiceMetadata::Clear();
  clear_has_proformainvoicemetadata();
}
inline const ::Diadoc::Api::Proto::Documents::UnilateralDocument::ProformaInvoiceMetadata& Document::proformainvoicemetadata() const {
  return proformainvoicemetadata_ != NULL ? *proformainvoicemetadata_ : *default_instance_->proformainvoicemetadata_;
}
inline ::Diadoc::Api::Proto::Documents::UnilateralDocument::ProformaInvoiceMetadata* Document::mutable_proformainvoicemetadata() {
  set_has_proformainvoicemetadata();
  if (proformainvoicemetadata_ == NULL) proformainvoicemetadata_ = new ::Diadoc::Api::Proto::Documents::UnilateralDocument::ProformaInvoiceMetadata;
  return proformainvoicemetadata_;
}
inline ::Diadoc::Api::Proto::Documents::UnilateralDocument::ProformaInvoiceMetadata* Document::release_proformainvoicemetadata() {
  clear_has_proformainvoicemetadata();
  ::Diadoc::Api::Proto::Documents::UnilateralDocument::ProformaInvoiceMetadata* temp = proformainvoicemetadata_;
  proformainvoicemetadata_ = NULL;
  return temp;
}
inline void Document::set_allocated_proformainvoicemetadata(::Diadoc::Api::Proto::Documents::UnilateralDocument::ProformaInvoiceMetadata* proformainvoicemetadata) {
  delete proformainvoicemetadata_;
  proformainvoicemetadata_ = proformainvoicemetadata;
  if (proformainvoicemetadata) {
    set_has_proformainvoicemetadata();
  } else {
    clear_has_proformainvoicemetadata();
  }
}

// optional .Diadoc.Api.Proto.Documents.BilateralDocument.BasicDocumentMetadata XmlTorg12Metadata = 22;
inline bool Document::has_xmltorg12metadata() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void Document::set_has_xmltorg12metadata() {
  _has_bits_[0] |= 0x00200000u;
}
inline void Document::clear_has_xmltorg12metadata() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void Document::clear_xmltorg12metadata() {
  if (xmltorg12metadata_ != NULL) xmltorg12metadata_->::Diadoc::Api::Proto::Documents::BilateralDocument::BasicDocumentMetadata::Clear();
  clear_has_xmltorg12metadata();
}
inline const ::Diadoc::Api::Proto::Documents::BilateralDocument::BasicDocumentMetadata& Document::xmltorg12metadata() const {
  return xmltorg12metadata_ != NULL ? *xmltorg12metadata_ : *default_instance_->xmltorg12metadata_;
}
inline ::Diadoc::Api::Proto::Documents::BilateralDocument::BasicDocumentMetadata* Document::mutable_xmltorg12metadata() {
  set_has_xmltorg12metadata();
  if (xmltorg12metadata_ == NULL) xmltorg12metadata_ = new ::Diadoc::Api::Proto::Documents::BilateralDocument::BasicDocumentMetadata;
  return xmltorg12metadata_;
}
inline ::Diadoc::Api::Proto::Documents::BilateralDocument::BasicDocumentMetadata* Document::release_xmltorg12metadata() {
  clear_has_xmltorg12metadata();
  ::Diadoc::Api::Proto::Documents::BilateralDocument::BasicDocumentMetadata* temp = xmltorg12metadata_;
  xmltorg12metadata_ = NULL;
  return temp;
}
inline void Document::set_allocated_xmltorg12metadata(::Diadoc::Api::Proto::Documents::BilateralDocument::BasicDocumentMetadata* xmltorg12metadata) {
  delete xmltorg12metadata_;
  xmltorg12metadata_ = xmltorg12metadata;
  if (xmltorg12metadata) {
    set_has_xmltorg12metadata();
  } else {
    clear_has_xmltorg12metadata();
  }
}

// optional .Diadoc.Api.Proto.Documents.BilateralDocument.BasicDocumentMetadata XmlAcceptanceCertificateMetadata = 23;
inline bool Document::has_xmlacceptancecertificatemetadata() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void Document::set_has_xmlacceptancecertificatemetadata() {
  _has_bits_[0] |= 0x00400000u;
}
inline void Document::clear_has_xmlacceptancecertificatemetadata() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void Document::clear_xmlacceptancecertificatemetadata() {
  if (xmlacceptancecertificatemetadata_ != NULL) xmlacceptancecertificatemetadata_->::Diadoc::Api::Proto::Documents::BilateralDocument::BasicDocumentMetadata::Clear();
  clear_has_xmlacceptancecertificatemetadata();
}
inline const ::Diadoc::Api::Proto::Documents::BilateralDocument::BasicDocumentMetadata& Document::xmlacceptancecertificatemetadata() const {
  return xmlacceptancecertificatemetadata_ != NULL ? *xmlacceptancecertificatemetadata_ : *default_instance_->xmlacceptancecertificatemetadata_;
}
inline ::Diadoc::Api::Proto::Documents::BilateralDocument::BasicDocumentMetadata* Document::mutable_xmlacceptancecertificatemetadata() {
  set_has_xmlacceptancecertificatemetadata();
  if (xmlacceptancecertificatemetadata_ == NULL) xmlacceptancecertificatemetadata_ = new ::Diadoc::Api::Proto::Documents::BilateralDocument::BasicDocumentMetadata;
  return xmlacceptancecertificatemetadata_;
}
inline ::Diadoc::Api::Proto::Documents::BilateralDocument::BasicDocumentMetadata* Document::release_xmlacceptancecertificatemetadata() {
  clear_has_xmlacceptancecertificatemetadata();
  ::Diadoc::Api::Proto::Documents::BilateralDocument::BasicDocumentMetadata* temp = xmlacceptancecertificatemetadata_;
  xmlacceptancecertificatemetadata_ = NULL;
  return temp;
}
inline void Document::set_allocated_xmlacceptancecertificatemetadata(::Diadoc::Api::Proto::Documents::BilateralDocument::BasicDocumentMetadata* xmlacceptancecertificatemetadata) {
  delete xmlacceptancecertificatemetadata_;
  xmlacceptancecertificatemetadata_ = xmlacceptancecertificatemetadata;
  if (xmlacceptancecertificatemetadata) {
    set_has_xmlacceptancecertificatemetadata();
  } else {
    clear_has_xmlacceptancecertificatemetadata();
  }
}

// optional bool IsDeleted = 24 [default = false];
inline bool Document::has_isdeleted() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void Document::set_has_isdeleted() {
  _has_bits_[0] |= 0x00800000u;
}
inline void Document::clear_has_isdeleted() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void Document::clear_isdeleted() {
  isdeleted_ = false;
  clear_has_isdeleted();
}
inline bool Document::isdeleted() const {
  return isdeleted_;
}
inline void Document::set_isdeleted(bool value) {
  set_has_isdeleted();
  isdeleted_ = value;
}

// optional string DepartmentId = 25;
inline bool Document::has_departmentid() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void Document::set_has_departmentid() {
  _has_bits_[0] |= 0x01000000u;
}
inline void Document::clear_has_departmentid() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void Document::clear_departmentid() {
  if (departmentid_ != &::google::protobuf::internal::kEmptyString) {
    departmentid_->clear();
  }
  clear_has_departmentid();
}
inline const ::std::string& Document::departmentid() const {
  return *departmentid_;
}
inline void Document::set_departmentid(const ::std::string& value) {
  set_has_departmentid();
  if (departmentid_ == &::google::protobuf::internal::kEmptyString) {
    departmentid_ = new ::std::string;
  }
  departmentid_->assign(value);
}
inline void Document::set_departmentid(const char* value) {
  set_has_departmentid();
  if (departmentid_ == &::google::protobuf::internal::kEmptyString) {
    departmentid_ = new ::std::string;
  }
  departmentid_->assign(value);
}
inline void Document::set_departmentid(const char* value, size_t size) {
  set_has_departmentid();
  if (departmentid_ == &::google::protobuf::internal::kEmptyString) {
    departmentid_ = new ::std::string;
  }
  departmentid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Document::mutable_departmentid() {
  set_has_departmentid();
  if (departmentid_ == &::google::protobuf::internal::kEmptyString) {
    departmentid_ = new ::std::string;
  }
  return departmentid_;
}
inline ::std::string* Document::release_departmentid() {
  clear_has_departmentid();
  if (departmentid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = departmentid_;
    departmentid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Document::set_allocated_departmentid(::std::string* departmentid) {
  if (departmentid_ != &::google::protobuf::internal::kEmptyString) {
    delete departmentid_;
  }
  if (departmentid) {
    set_has_departmentid();
    departmentid_ = departmentid;
  } else {
    clear_has_departmentid();
    departmentid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bool IsTest = 26 [default = false];
inline bool Document::has_istest() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void Document::set_has_istest() {
  _has_bits_[0] |= 0x02000000u;
}
inline void Document::clear_has_istest() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void Document::clear_istest() {
  istest_ = false;
  clear_has_istest();
}
inline bool Document::istest() const {
  return istest_;
}
inline void Document::set_istest(bool value) {
  set_has_istest();
  istest_ = value;
}

// optional string FromDepartmentId = 27;
inline bool Document::has_fromdepartmentid() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void Document::set_has_fromdepartmentid() {
  _has_bits_[0] |= 0x04000000u;
}
inline void Document::clear_has_fromdepartmentid() {
  _has_bits_[0] &= ~0x04000000u;
}
inline void Document::clear_fromdepartmentid() {
  if (fromdepartmentid_ != &::google::protobuf::internal::kEmptyString) {
    fromdepartmentid_->clear();
  }
  clear_has_fromdepartmentid();
}
inline const ::std::string& Document::fromdepartmentid() const {
  return *fromdepartmentid_;
}
inline void Document::set_fromdepartmentid(const ::std::string& value) {
  set_has_fromdepartmentid();
  if (fromdepartmentid_ == &::google::protobuf::internal::kEmptyString) {
    fromdepartmentid_ = new ::std::string;
  }
  fromdepartmentid_->assign(value);
}
inline void Document::set_fromdepartmentid(const char* value) {
  set_has_fromdepartmentid();
  if (fromdepartmentid_ == &::google::protobuf::internal::kEmptyString) {
    fromdepartmentid_ = new ::std::string;
  }
  fromdepartmentid_->assign(value);
}
inline void Document::set_fromdepartmentid(const char* value, size_t size) {
  set_has_fromdepartmentid();
  if (fromdepartmentid_ == &::google::protobuf::internal::kEmptyString) {
    fromdepartmentid_ = new ::std::string;
  }
  fromdepartmentid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Document::mutable_fromdepartmentid() {
  set_has_fromdepartmentid();
  if (fromdepartmentid_ == &::google::protobuf::internal::kEmptyString) {
    fromdepartmentid_ = new ::std::string;
  }
  return fromdepartmentid_;
}
inline ::std::string* Document::release_fromdepartmentid() {
  clear_has_fromdepartmentid();
  if (fromdepartmentid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = fromdepartmentid_;
    fromdepartmentid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Document::set_allocated_fromdepartmentid(::std::string* fromdepartmentid) {
  if (fromdepartmentid_ != &::google::protobuf::internal::kEmptyString) {
    delete fromdepartmentid_;
  }
  if (fromdepartmentid) {
    set_has_fromdepartmentid();
    fromdepartmentid_ = fromdepartmentid;
  } else {
    clear_has_fromdepartmentid();
    fromdepartmentid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string ToDepartmentId = 28;
inline bool Document::has_todepartmentid() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
inline void Document::set_has_todepartmentid() {
  _has_bits_[0] |= 0x08000000u;
}
inline void Document::clear_has_todepartmentid() {
  _has_bits_[0] &= ~0x08000000u;
}
inline void Document::clear_todepartmentid() {
  if (todepartmentid_ != &::google::protobuf::internal::kEmptyString) {
    todepartmentid_->clear();
  }
  clear_has_todepartmentid();
}
inline const ::std::string& Document::todepartmentid() const {
  return *todepartmentid_;
}
inline void Document::set_todepartmentid(const ::std::string& value) {
  set_has_todepartmentid();
  if (todepartmentid_ == &::google::protobuf::internal::kEmptyString) {
    todepartmentid_ = new ::std::string;
  }
  todepartmentid_->assign(value);
}
inline void Document::set_todepartmentid(const char* value) {
  set_has_todepartmentid();
  if (todepartmentid_ == &::google::protobuf::internal::kEmptyString) {
    todepartmentid_ = new ::std::string;
  }
  todepartmentid_->assign(value);
}
inline void Document::set_todepartmentid(const char* value, size_t size) {
  set_has_todepartmentid();
  if (todepartmentid_ == &::google::protobuf::internal::kEmptyString) {
    todepartmentid_ = new ::std::string;
  }
  todepartmentid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Document::mutable_todepartmentid() {
  set_has_todepartmentid();
  if (todepartmentid_ == &::google::protobuf::internal::kEmptyString) {
    todepartmentid_ = new ::std::string;
  }
  return todepartmentid_;
}
inline ::std::string* Document::release_todepartmentid() {
  clear_has_todepartmentid();
  if (todepartmentid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = todepartmentid_;
    todepartmentid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Document::set_allocated_todepartmentid(::std::string* todepartmentid) {
  if (todepartmentid_ != &::google::protobuf::internal::kEmptyString) {
    delete todepartmentid_;
  }
  if (todepartmentid) {
    set_has_todepartmentid();
    todepartmentid_ = todepartmentid;
  } else {
    clear_has_todepartmentid();
    todepartmentid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional .Diadoc.Api.Proto.Documents.BilateralDocument.PriceListMetadata PriceListMetadata = 29;
inline bool Document::has_pricelistmetadata() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
inline void Document::set_has_pricelistmetadata() {
  _has_bits_[0] |= 0x10000000u;
}
inline void Document::clear_has_pricelistmetadata() {
  _has_bits_[0] &= ~0x10000000u;
}
inline void Document::clear_pricelistmetadata() {
  if (pricelistmetadata_ != NULL) pricelistmetadata_->::Diadoc::Api::Proto::Documents::BilateralDocument::PriceListMetadata::Clear();
  clear_has_pricelistmetadata();
}
inline const ::Diadoc::Api::Proto::Documents::BilateralDocument::PriceListMetadata& Document::pricelistmetadata() const {
  return pricelistmetadata_ != NULL ? *pricelistmetadata_ : *default_instance_->pricelistmetadata_;
}
inline ::Diadoc::Api::Proto::Documents::BilateralDocument::PriceListMetadata* Document::mutable_pricelistmetadata() {
  set_has_pricelistmetadata();
  if (pricelistmetadata_ == NULL) pricelistmetadata_ = new ::Diadoc::Api::Proto::Documents::BilateralDocument::PriceListMetadata;
  return pricelistmetadata_;
}
inline ::Diadoc::Api::Proto::Documents::BilateralDocument::PriceListMetadata* Document::release_pricelistmetadata() {
  clear_has_pricelistmetadata();
  ::Diadoc::Api::Proto::Documents::BilateralDocument::PriceListMetadata* temp = pricelistmetadata_;
  pricelistmetadata_ = NULL;
  return temp;
}
inline void Document::set_allocated_pricelistmetadata(::Diadoc::Api::Proto::Documents::BilateralDocument::PriceListMetadata* pricelistmetadata) {
  delete pricelistmetadata_;
  pricelistmetadata_ = pricelistmetadata;
  if (pricelistmetadata) {
    set_has_pricelistmetadata();
  } else {
    clear_has_pricelistmetadata();
  }
}

// optional string CustomDocumentId = 30;
inline bool Document::has_customdocumentid() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
inline void Document::set_has_customdocumentid() {
  _has_bits_[0] |= 0x20000000u;
}
inline void Document::clear_has_customdocumentid() {
  _has_bits_[0] &= ~0x20000000u;
}
inline void Document::clear_customdocumentid() {
  if (customdocumentid_ != &::google::protobuf::internal::kEmptyString) {
    customdocumentid_->clear();
  }
  clear_has_customdocumentid();
}
inline const ::std::string& Document::customdocumentid() const {
  return *customdocumentid_;
}
inline void Document::set_customdocumentid(const ::std::string& value) {
  set_has_customdocumentid();
  if (customdocumentid_ == &::google::protobuf::internal::kEmptyString) {
    customdocumentid_ = new ::std::string;
  }
  customdocumentid_->assign(value);
}
inline void Document::set_customdocumentid(const char* value) {
  set_has_customdocumentid();
  if (customdocumentid_ == &::google::protobuf::internal::kEmptyString) {
    customdocumentid_ = new ::std::string;
  }
  customdocumentid_->assign(value);
}
inline void Document::set_customdocumentid(const char* value, size_t size) {
  set_has_customdocumentid();
  if (customdocumentid_ == &::google::protobuf::internal::kEmptyString) {
    customdocumentid_ = new ::std::string;
  }
  customdocumentid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Document::mutable_customdocumentid() {
  set_has_customdocumentid();
  if (customdocumentid_ == &::google::protobuf::internal::kEmptyString) {
    customdocumentid_ = new ::std::string;
  }
  return customdocumentid_;
}
inline ::std::string* Document::release_customdocumentid() {
  clear_has_customdocumentid();
  if (customdocumentid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = customdocumentid_;
    customdocumentid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Document::set_allocated_customdocumentid(::std::string* customdocumentid) {
  if (customdocumentid_ != &::google::protobuf::internal::kEmptyString) {
    delete customdocumentid_;
  }
  if (customdocumentid) {
    set_has_customdocumentid();
    customdocumentid_ = customdocumentid;
  } else {
    clear_has_customdocumentid();
    customdocumentid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional .Diadoc.Api.Proto.Documents.ResolutionStatus ResolutionStatus = 31;
inline bool Document::has_resolutionstatus() const {
  return (_has_bits_[0] & 0x40000000u) != 0;
}
inline void Document::set_has_resolutionstatus() {
  _has_bits_[0] |= 0x40000000u;
}
inline void Document::clear_has_resolutionstatus() {
  _has_bits_[0] &= ~0x40000000u;
}
inline void Document::clear_resolutionstatus() {
  if (resolutionstatus_ != NULL) resolutionstatus_->::Diadoc::Api::Proto::Documents::ResolutionStatus::Clear();
  clear_has_resolutionstatus();
}
inline const ::Diadoc::Api::Proto::Documents::ResolutionStatus& Document::resolutionstatus() const {
  return resolutionstatus_ != NULL ? *resolutionstatus_ : *default_instance_->resolutionstatus_;
}
inline ::Diadoc::Api::Proto::Documents::ResolutionStatus* Document::mutable_resolutionstatus() {
  set_has_resolutionstatus();
  if (resolutionstatus_ == NULL) resolutionstatus_ = new ::Diadoc::Api::Proto::Documents::ResolutionStatus;
  return resolutionstatus_;
}
inline ::Diadoc::Api::Proto::Documents::ResolutionStatus* Document::release_resolutionstatus() {
  clear_has_resolutionstatus();
  ::Diadoc::Api::Proto::Documents::ResolutionStatus* temp = resolutionstatus_;
  resolutionstatus_ = NULL;
  return temp;
}
inline void Document::set_allocated_resolutionstatus(::Diadoc::Api::Proto::Documents::ResolutionStatus* resolutionstatus) {
  delete resolutionstatus_;
  resolutionstatus_ = resolutionstatus;
  if (resolutionstatus) {
    set_has_resolutionstatus();
  } else {
    clear_has_resolutionstatus();
  }
}

// optional .Diadoc.Api.Proto.Documents.RevocationStatus RevocationStatus = 32 [default = UnknownRevocationStatus];
inline bool Document::has_revocationstatus() const {
  return (_has_bits_[0] & 0x80000000u) != 0;
}
inline void Document::set_has_revocationstatus() {
  _has_bits_[0] |= 0x80000000u;
}
inline void Document::clear_has_revocationstatus() {
  _has_bits_[0] &= ~0x80000000u;
}
inline void Document::clear_revocationstatus() {
  revocationstatus_ = 0;
  clear_has_revocationstatus();
}
inline ::Diadoc::Api::Proto::Documents::RevocationStatus Document::revocationstatus() const {
  return static_cast< ::Diadoc::Api::Proto::Documents::RevocationStatus >(revocationstatus_);
}
inline void Document::set_revocationstatus(::Diadoc::Api::Proto::Documents::RevocationStatus value) {
  assert(::Diadoc::Api::Proto::Documents::RevocationStatus_IsValid(value));
  set_has_revocationstatus();
  revocationstatus_ = value;
}

// optional sfixed64 SendTimestampTicks = 33;
inline bool Document::has_sendtimestampticks() const {
  return (_has_bits_[1] & 0x00000001u) != 0;
}
inline void Document::set_has_sendtimestampticks() {
  _has_bits_[1] |= 0x00000001u;
}
inline void Document::clear_has_sendtimestampticks() {
  _has_bits_[1] &= ~0x00000001u;
}
inline void Document::clear_sendtimestampticks() {
  sendtimestampticks_ = GOOGLE_LONGLONG(0);
  clear_has_sendtimestampticks();
}
inline ::google::protobuf::int64 Document::sendtimestampticks() const {
  return sendtimestampticks_;
}
inline void Document::set_sendtimestampticks(::google::protobuf::int64 value) {
  set_has_sendtimestampticks();
  sendtimestampticks_ = value;
}

// optional sfixed64 DeliveryTimestampTicks = 34;
inline bool Document::has_deliverytimestampticks() const {
  return (_has_bits_[1] & 0x00000002u) != 0;
}
inline void Document::set_has_deliverytimestampticks() {
  _has_bits_[1] |= 0x00000002u;
}
inline void Document::clear_has_deliverytimestampticks() {
  _has_bits_[1] &= ~0x00000002u;
}
inline void Document::clear_deliverytimestampticks() {
  deliverytimestampticks_ = GOOGLE_LONGLONG(0);
  clear_has_deliverytimestampticks();
}
inline ::google::protobuf::int64 Document::deliverytimestampticks() const {
  return deliverytimestampticks_;
}
inline void Document::set_deliverytimestampticks(::google::protobuf::int64 value) {
  set_has_deliverytimestampticks();
  deliverytimestampticks_ = value;
}

// repeated .Diadoc.Api.Proto.ForwardDocumentEvent ForwardDocumentEvents = 35;
inline int Document::forwarddocumentevents_size() const {
  return forwarddocumentevents_.size();
}
inline void Document::clear_forwarddocumentevents() {
  forwarddocumentevents_.Clear();
}
inline const ::Diadoc::Api::Proto::ForwardDocumentEvent& Document::forwarddocumentevents(int index) const {
  return forwarddocumentevents_.Get(index);
}
inline ::Diadoc::Api::Proto::ForwardDocumentEvent* Document::mutable_forwarddocumentevents(int index) {
  return forwarddocumentevents_.Mutable(index);
}
inline ::Diadoc::Api::Proto::ForwardDocumentEvent* Document::add_forwarddocumentevents() {
  return forwarddocumentevents_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::ForwardDocumentEvent >&
Document::forwarddocumentevents() const {
  return forwarddocumentevents_;
}
inline ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::ForwardDocumentEvent >*
Document::mutable_forwarddocumentevents() {
  return &forwarddocumentevents_;
}

// optional .Diadoc.Api.Proto.Documents.BilateralDocument.BilateralDocumentMetadata PriceListAgreementMetadata = 36;
inline bool Document::has_pricelistagreementmetadata() const {
  return (_has_bits_[1] & 0x00000008u) != 0;
}
inline void Document::set_has_pricelistagreementmetadata() {
  _has_bits_[1] |= 0x00000008u;
}
inline void Document::clear_has_pricelistagreementmetadata() {
  _has_bits_[1] &= ~0x00000008u;
}
inline void Document::clear_pricelistagreementmetadata() {
  if (pricelistagreementmetadata_ != NULL) pricelistagreementmetadata_->::Diadoc::Api::Proto::Documents::BilateralDocument::BilateralDocumentMetadata::Clear();
  clear_has_pricelistagreementmetadata();
}
inline const ::Diadoc::Api::Proto::Documents::BilateralDocument::BilateralDocumentMetadata& Document::pricelistagreementmetadata() const {
  return pricelistagreementmetadata_ != NULL ? *pricelistagreementmetadata_ : *default_instance_->pricelistagreementmetadata_;
}
inline ::Diadoc::Api::Proto::Documents::BilateralDocument::BilateralDocumentMetadata* Document::mutable_pricelistagreementmetadata() {
  set_has_pricelistagreementmetadata();
  if (pricelistagreementmetadata_ == NULL) pricelistagreementmetadata_ = new ::Diadoc::Api::Proto::Documents::BilateralDocument::BilateralDocumentMetadata;
  return pricelistagreementmetadata_;
}
inline ::Diadoc::Api::Proto::Documents::BilateralDocument::BilateralDocumentMetadata* Document::release_pricelistagreementmetadata() {
  clear_has_pricelistagreementmetadata();
  ::Diadoc::Api::Proto::Documents::BilateralDocument::BilateralDocumentMetadata* temp = pricelistagreementmetadata_;
  pricelistagreementmetadata_ = NULL;
  return temp;
}
inline void Document::set_allocated_pricelistagreementmetadata(::Diadoc::Api::Proto::Documents::BilateralDocument::BilateralDocumentMetadata* pricelistagreementmetadata) {
  delete pricelistagreementmetadata_;
  pricelistagreementmetadata_ = pricelistagreementmetadata;
  if (pricelistagreementmetadata) {
    set_has_pricelistagreementmetadata();
  } else {
    clear_has_pricelistagreementmetadata();
  }
}

// optional .Diadoc.Api.Proto.Documents.BilateralDocument.BilateralDocumentMetadata CertificateRegistryMetadata = 37;
inline bool Document::has_certificateregistrymetadata() const {
  return (_has_bits_[1] & 0x00000010u) != 0;
}
inline void Document::set_has_certificateregistrymetadata() {
  _has_bits_[1] |= 0x00000010u;
}
inline void Document::clear_has_certificateregistrymetadata() {
  _has_bits_[1] &= ~0x00000010u;
}
inline void Document::clear_certificateregistrymetadata() {
  if (certificateregistrymetadata_ != NULL) certificateregistrymetadata_->::Diadoc::Api::Proto::Documents::BilateralDocument::BilateralDocumentMetadata::Clear();
  clear_has_certificateregistrymetadata();
}
inline const ::Diadoc::Api::Proto::Documents::BilateralDocument::BilateralDocumentMetadata& Document::certificateregistrymetadata() const {
  return certificateregistrymetadata_ != NULL ? *certificateregistrymetadata_ : *default_instance_->certificateregistrymetadata_;
}
inline ::Diadoc::Api::Proto::Documents::BilateralDocument::BilateralDocumentMetadata* Document::mutable_certificateregistrymetadata() {
  set_has_certificateregistrymetadata();
  if (certificateregistrymetadata_ == NULL) certificateregistrymetadata_ = new ::Diadoc::Api::Proto::Documents::BilateralDocument::BilateralDocumentMetadata;
  return certificateregistrymetadata_;
}
inline ::Diadoc::Api::Proto::Documents::BilateralDocument::BilateralDocumentMetadata* Document::release_certificateregistrymetadata() {
  clear_has_certificateregistrymetadata();
  ::Diadoc::Api::Proto::Documents::BilateralDocument::BilateralDocumentMetadata* temp = certificateregistrymetadata_;
  certificateregistrymetadata_ = NULL;
  return temp;
}
inline void Document::set_allocated_certificateregistrymetadata(::Diadoc::Api::Proto::Documents::BilateralDocument::BilateralDocumentMetadata* certificateregistrymetadata) {
  delete certificateregistrymetadata_;
  certificateregistrymetadata_ = certificateregistrymetadata;
  if (certificateregistrymetadata) {
    set_has_certificateregistrymetadata();
  } else {
    clear_has_certificateregistrymetadata();
  }
}

// optional .Diadoc.Api.Proto.Documents.BilateralDocument.BilateralDocumentMetadata ReconciliationActMetadata = 38;
inline bool Document::has_reconciliationactmetadata() const {
  return (_has_bits_[1] & 0x00000020u) != 0;
}
inline void Document::set_has_reconciliationactmetadata() {
  _has_bits_[1] |= 0x00000020u;
}
inline void Document::clear_has_reconciliationactmetadata() {
  _has_bits_[1] &= ~0x00000020u;
}
inline void Document::clear_reconciliationactmetadata() {
  if (reconciliationactmetadata_ != NULL) reconciliationactmetadata_->::Diadoc::Api::Proto::Documents::BilateralDocument::BilateralDocumentMetadata::Clear();
  clear_has_reconciliationactmetadata();
}
inline const ::Diadoc::Api::Proto::Documents::BilateralDocument::BilateralDocumentMetadata& Document::reconciliationactmetadata() const {
  return reconciliationactmetadata_ != NULL ? *reconciliationactmetadata_ : *default_instance_->reconciliationactmetadata_;
}
inline ::Diadoc::Api::Proto::Documents::BilateralDocument::BilateralDocumentMetadata* Document::mutable_reconciliationactmetadata() {
  set_has_reconciliationactmetadata();
  if (reconciliationactmetadata_ == NULL) reconciliationactmetadata_ = new ::Diadoc::Api::Proto::Documents::BilateralDocument::BilateralDocumentMetadata;
  return reconciliationactmetadata_;
}
inline ::Diadoc::Api::Proto::Documents::BilateralDocument::BilateralDocumentMetadata* Document::release_reconciliationactmetadata() {
  clear_has_reconciliationactmetadata();
  ::Diadoc::Api::Proto::Documents::BilateralDocument::BilateralDocumentMetadata* temp = reconciliationactmetadata_;
  reconciliationactmetadata_ = NULL;
  return temp;
}
inline void Document::set_allocated_reconciliationactmetadata(::Diadoc::Api::Proto::Documents::BilateralDocument::BilateralDocumentMetadata* reconciliationactmetadata) {
  delete reconciliationactmetadata_;
  reconciliationactmetadata_ = reconciliationactmetadata;
  if (reconciliationactmetadata) {
    set_has_reconciliationactmetadata();
  } else {
    clear_has_reconciliationactmetadata();
  }
}

// optional .Diadoc.Api.Proto.Documents.BilateralDocument.ContractMetadata ContractMetadata = 39;
inline bool Document::has_contractmetadata() const {
  return (_has_bits_[1] & 0x00000040u) != 0;
}
inline void Document::set_has_contractmetadata() {
  _has_bits_[1] |= 0x00000040u;
}
inline void Document::clear_has_contractmetadata() {
  _has_bits_[1] &= ~0x00000040u;
}
inline void Document::clear_contractmetadata() {
  if (contractmetadata_ != NULL) contractmetadata_->::Diadoc::Api::Proto::Documents::BilateralDocument::ContractMetadata::Clear();
  clear_has_contractmetadata();
}
inline const ::Diadoc::Api::Proto::Documents::BilateralDocument::ContractMetadata& Document::contractmetadata() const {
  return contractmetadata_ != NULL ? *contractmetadata_ : *default_instance_->contractmetadata_;
}
inline ::Diadoc::Api::Proto::Documents::BilateralDocument::ContractMetadata* Document::mutable_contractmetadata() {
  set_has_contractmetadata();
  if (contractmetadata_ == NULL) contractmetadata_ = new ::Diadoc::Api::Proto::Documents::BilateralDocument::ContractMetadata;
  return contractmetadata_;
}
inline ::Diadoc::Api::Proto::Documents::BilateralDocument::ContractMetadata* Document::release_contractmetadata() {
  clear_has_contractmetadata();
  ::Diadoc::Api::Proto::Documents::BilateralDocument::ContractMetadata* temp = contractmetadata_;
  contractmetadata_ = NULL;
  return temp;
}
inline void Document::set_allocated_contractmetadata(::Diadoc::Api::Proto::Documents::BilateralDocument::ContractMetadata* contractmetadata) {
  delete contractmetadata_;
  contractmetadata_ = contractmetadata;
  if (contractmetadata) {
    set_has_contractmetadata();
  } else {
    clear_has_contractmetadata();
  }
}

// optional .Diadoc.Api.Proto.Documents.BilateralDocument.BasicDocumentMetadata Torg13Metadata = 40;
inline bool Document::has_torg13metadata() const {
  return (_has_bits_[1] & 0x00000080u) != 0;
}
inline void Document::set_has_torg13metadata() {
  _has_bits_[1] |= 0x00000080u;
}
inline void Document::clear_has_torg13metadata() {
  _has_bits_[1] &= ~0x00000080u;
}
inline void Document::clear_torg13metadata() {
  if (torg13metadata_ != NULL) torg13metadata_->::Diadoc::Api::Proto::Documents::BilateralDocument::BasicDocumentMetadata::Clear();
  clear_has_torg13metadata();
}
inline const ::Diadoc::Api::Proto::Documents::BilateralDocument::BasicDocumentMetadata& Document::torg13metadata() const {
  return torg13metadata_ != NULL ? *torg13metadata_ : *default_instance_->torg13metadata_;
}
inline ::Diadoc::Api::Proto::Documents::BilateralDocument::BasicDocumentMetadata* Document::mutable_torg13metadata() {
  set_has_torg13metadata();
  if (torg13metadata_ == NULL) torg13metadata_ = new ::Diadoc::Api::Proto::Documents::BilateralDocument::BasicDocumentMetadata;
  return torg13metadata_;
}
inline ::Diadoc::Api::Proto::Documents::BilateralDocument::BasicDocumentMetadata* Document::release_torg13metadata() {
  clear_has_torg13metadata();
  ::Diadoc::Api::Proto::Documents::BilateralDocument::BasicDocumentMetadata* temp = torg13metadata_;
  torg13metadata_ = NULL;
  return temp;
}
inline void Document::set_allocated_torg13metadata(::Diadoc::Api::Proto::Documents::BilateralDocument::BasicDocumentMetadata* torg13metadata) {
  delete torg13metadata_;
  torg13metadata_ = torg13metadata;
  if (torg13metadata) {
    set_has_torg13metadata();
  } else {
    clear_has_torg13metadata();
  }
}

// optional .Diadoc.Api.Proto.Documents.UnilateralDocument.ServiceDetailsMetadata ServiceDetailsMetadata = 41;
inline bool Document::has_servicedetailsmetadata() const {
  return (_has_bits_[1] & 0x00000100u) != 0;
}
inline void Document::set_has_servicedetailsmetadata() {
  _has_bits_[1] |= 0x00000100u;
}
inline void Document::clear_has_servicedetailsmetadata() {
  _has_bits_[1] &= ~0x00000100u;
}
inline void Document::clear_servicedetailsmetadata() {
  if (servicedetailsmetadata_ != NULL) servicedetailsmetadata_->::Diadoc::Api::Proto::Documents::UnilateralDocument::ServiceDetailsMetadata::Clear();
  clear_has_servicedetailsmetadata();
}
inline const ::Diadoc::Api::Proto::Documents::UnilateralDocument::ServiceDetailsMetadata& Document::servicedetailsmetadata() const {
  return servicedetailsmetadata_ != NULL ? *servicedetailsmetadata_ : *default_instance_->servicedetailsmetadata_;
}
inline ::Diadoc::Api::Proto::Documents::UnilateralDocument::ServiceDetailsMetadata* Document::mutable_servicedetailsmetadata() {
  set_has_servicedetailsmetadata();
  if (servicedetailsmetadata_ == NULL) servicedetailsmetadata_ = new ::Diadoc::Api::Proto::Documents::UnilateralDocument::ServiceDetailsMetadata;
  return servicedetailsmetadata_;
}
inline ::Diadoc::Api::Proto::Documents::UnilateralDocument::ServiceDetailsMetadata* Document::release_servicedetailsmetadata() {
  clear_has_servicedetailsmetadata();
  ::Diadoc::Api::Proto::Documents::UnilateralDocument::ServiceDetailsMetadata* temp = servicedetailsmetadata_;
  servicedetailsmetadata_ = NULL;
  return temp;
}
inline void Document::set_allocated_servicedetailsmetadata(::Diadoc::Api::Proto::Documents::UnilateralDocument::ServiceDetailsMetadata* servicedetailsmetadata) {
  delete servicedetailsmetadata_;
  servicedetailsmetadata_ = servicedetailsmetadata;
  if (servicedetailsmetadata) {
    set_has_servicedetailsmetadata();
  } else {
    clear_has_servicedetailsmetadata();
  }
}

// -------------------------------------------------------------------

// ResolutionStatus

// optional .Diadoc.Api.Proto.Documents.ResolutionStatusType Type = 1 [default = UnknownResolutionStatus];
inline bool ResolutionStatus::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ResolutionStatus::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ResolutionStatus::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ResolutionStatus::clear_type() {
  type_ = -1;
  clear_has_type();
}
inline ::Diadoc::Api::Proto::Documents::ResolutionStatusType ResolutionStatus::type() const {
  return static_cast< ::Diadoc::Api::Proto::Documents::ResolutionStatusType >(type_);
}
inline void ResolutionStatus::set_type(::Diadoc::Api::Proto::Documents::ResolutionStatusType value) {
  assert(::Diadoc::Api::Proto::Documents::ResolutionStatusType_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional .Diadoc.Api.Proto.ResolutionTarget Target = 2;
inline bool ResolutionStatus::has_target() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ResolutionStatus::set_has_target() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ResolutionStatus::clear_has_target() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ResolutionStatus::clear_target() {
  if (target_ != NULL) target_->::Diadoc::Api::Proto::ResolutionTarget::Clear();
  clear_has_target();
}
inline const ::Diadoc::Api::Proto::ResolutionTarget& ResolutionStatus::target() const {
  return target_ != NULL ? *target_ : *default_instance_->target_;
}
inline ::Diadoc::Api::Proto::ResolutionTarget* ResolutionStatus::mutable_target() {
  set_has_target();
  if (target_ == NULL) target_ = new ::Diadoc::Api::Proto::ResolutionTarget;
  return target_;
}
inline ::Diadoc::Api::Proto::ResolutionTarget* ResolutionStatus::release_target() {
  clear_has_target();
  ::Diadoc::Api::Proto::ResolutionTarget* temp = target_;
  target_ = NULL;
  return temp;
}
inline void ResolutionStatus::set_allocated_target(::Diadoc::Api::Proto::ResolutionTarget* target) {
  delete target_;
  target_ = target;
  if (target) {
    set_has_target();
  } else {
    clear_has_target();
  }
}

// required string AuthorUserId = 3;
inline bool ResolutionStatus::has_authoruserid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ResolutionStatus::set_has_authoruserid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ResolutionStatus::clear_has_authoruserid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ResolutionStatus::clear_authoruserid() {
  if (authoruserid_ != &::google::protobuf::internal::kEmptyString) {
    authoruserid_->clear();
  }
  clear_has_authoruserid();
}
inline const ::std::string& ResolutionStatus::authoruserid() const {
  return *authoruserid_;
}
inline void ResolutionStatus::set_authoruserid(const ::std::string& value) {
  set_has_authoruserid();
  if (authoruserid_ == &::google::protobuf::internal::kEmptyString) {
    authoruserid_ = new ::std::string;
  }
  authoruserid_->assign(value);
}
inline void ResolutionStatus::set_authoruserid(const char* value) {
  set_has_authoruserid();
  if (authoruserid_ == &::google::protobuf::internal::kEmptyString) {
    authoruserid_ = new ::std::string;
  }
  authoruserid_->assign(value);
}
inline void ResolutionStatus::set_authoruserid(const char* value, size_t size) {
  set_has_authoruserid();
  if (authoruserid_ == &::google::protobuf::internal::kEmptyString) {
    authoruserid_ = new ::std::string;
  }
  authoruserid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ResolutionStatus::mutable_authoruserid() {
  set_has_authoruserid();
  if (authoruserid_ == &::google::protobuf::internal::kEmptyString) {
    authoruserid_ = new ::std::string;
  }
  return authoruserid_;
}
inline ::std::string* ResolutionStatus::release_authoruserid() {
  clear_has_authoruserid();
  if (authoruserid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = authoruserid_;
    authoruserid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ResolutionStatus::set_allocated_authoruserid(::std::string* authoruserid) {
  if (authoruserid_ != &::google::protobuf::internal::kEmptyString) {
    delete authoruserid_;
  }
  if (authoruserid) {
    set_has_authoruserid();
    authoruserid_ = authoruserid;
  } else {
    clear_has_authoruserid();
    authoruserid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string AuthorFIO = 4;
inline bool ResolutionStatus::has_authorfio() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ResolutionStatus::set_has_authorfio() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ResolutionStatus::clear_has_authorfio() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ResolutionStatus::clear_authorfio() {
  if (authorfio_ != &::google::protobuf::internal::kEmptyString) {
    authorfio_->clear();
  }
  clear_has_authorfio();
}
inline const ::std::string& ResolutionStatus::authorfio() const {
  return *authorfio_;
}
inline void ResolutionStatus::set_authorfio(const ::std::string& value) {
  set_has_authorfio();
  if (authorfio_ == &::google::protobuf::internal::kEmptyString) {
    authorfio_ = new ::std::string;
  }
  authorfio_->assign(value);
}
inline void ResolutionStatus::set_authorfio(const char* value) {
  set_has_authorfio();
  if (authorfio_ == &::google::protobuf::internal::kEmptyString) {
    authorfio_ = new ::std::string;
  }
  authorfio_->assign(value);
}
inline void ResolutionStatus::set_authorfio(const char* value, size_t size) {
  set_has_authorfio();
  if (authorfio_ == &::google::protobuf::internal::kEmptyString) {
    authorfio_ = new ::std::string;
  }
  authorfio_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ResolutionStatus::mutable_authorfio() {
  set_has_authorfio();
  if (authorfio_ == &::google::protobuf::internal::kEmptyString) {
    authorfio_ = new ::std::string;
  }
  return authorfio_;
}
inline ::std::string* ResolutionStatus::release_authorfio() {
  clear_has_authorfio();
  if (authorfio_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = authorfio_;
    authorfio_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ResolutionStatus::set_allocated_authorfio(::std::string* authorfio) {
  if (authorfio_ != &::google::protobuf::internal::kEmptyString) {
    delete authorfio_;
  }
  if (authorfio) {
    set_has_authorfio();
    authorfio_ = authorfio;
  } else {
    clear_has_authorfio();
    authorfio_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Documents
}  // namespace Proto
}  // namespace Api
}  // namespace Diadoc

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Diadoc::Api::Proto::Documents::ResolutionStatusType>() {
  return ::Diadoc::Api::Proto::Documents::ResolutionStatusType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Diadoc::Api::Proto::Documents::RevocationStatus>() {
  return ::Diadoc::Api::Proto::Documents::RevocationStatus_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_Documents_2fDocument_2eproto__INCLUDED
