// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Documents/AcceptanceCertificateDocument.proto

#ifndef PROTOBUF_Documents_2fAcceptanceCertificateDocument_2eproto__INCLUDED
#define PROTOBUF_Documents_2fAcceptanceCertificateDocument_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "ReceiptStatus.pb.h"
// @@protoc_insertion_point(includes)

namespace Diadoc {
namespace Api {
namespace Proto {
namespace Documents {
namespace AcceptanceCertificateDocument {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_Documents_2fAcceptanceCertificateDocument_2eproto();
void protobuf_AssignDesc_Documents_2fAcceptanceCertificateDocument_2eproto();
void protobuf_ShutdownFile_Documents_2fAcceptanceCertificateDocument_2eproto();

class AcceptanceCertificateMetadata;

enum AcceptanceCertificateDocumentStatus {
  UnknownAcceptanceCertificateDocumentStatus = 0,
  OutboundWaitingForRecipientSignature = 1,
  OutboundWithRecipientSignature = 2,
  OutboundRecipientSignatureRequestRejected = 3,
  OutboundWaitingForSenderSignature = 10,
  OutboundInvalidSenderSignature = 11,
  OutboundNoRecipientSignatureRequest = 16,
  InboundWaitingForRecipientSignature = 4,
  InboundWithRecipientSignature = 5,
  InboundRecipientSignatureRequestRejected = 6,
  InboundInvalidRecipientSignature = 12,
  InboundNoRecipientSignatureRequest = 17,
  InternalWaitingForRecipientSignature = 7,
  InternalWithRecipientSignature = 8,
  InternalRecipientSignatureRequestRejected = 9,
  InternalWaitingForSenderSignature = 13,
  InternalInvalidSenderSignature = 14,
  InternalInvalidRecipientSignature = 15,
  InternalNoRecipientSignatureRequest = 18
};
bool AcceptanceCertificateDocumentStatus_IsValid(int value);
const AcceptanceCertificateDocumentStatus AcceptanceCertificateDocumentStatus_MIN = UnknownAcceptanceCertificateDocumentStatus;
const AcceptanceCertificateDocumentStatus AcceptanceCertificateDocumentStatus_MAX = InternalNoRecipientSignatureRequest;
const int AcceptanceCertificateDocumentStatus_ARRAYSIZE = AcceptanceCertificateDocumentStatus_MAX + 1;

const ::google::protobuf::EnumDescriptor* AcceptanceCertificateDocumentStatus_descriptor();
inline const ::std::string& AcceptanceCertificateDocumentStatus_Name(AcceptanceCertificateDocumentStatus value) {
  return ::google::protobuf::internal::NameOfEnum(
    AcceptanceCertificateDocumentStatus_descriptor(), value);
}
inline bool AcceptanceCertificateDocumentStatus_Parse(
    const ::std::string& name, AcceptanceCertificateDocumentStatus* value) {
  return ::google::protobuf::internal::ParseNamedEnum<AcceptanceCertificateDocumentStatus>(
    AcceptanceCertificateDocumentStatus_descriptor(), name, value);
}
// ===================================================================

class AcceptanceCertificateMetadata : public ::google::protobuf::Message {
 public:
  AcceptanceCertificateMetadata();
  virtual ~AcceptanceCertificateMetadata();

  AcceptanceCertificateMetadata(const AcceptanceCertificateMetadata& from);

  inline AcceptanceCertificateMetadata& operator=(const AcceptanceCertificateMetadata& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AcceptanceCertificateMetadata& default_instance();

  void Swap(AcceptanceCertificateMetadata* other);

  // implements Message ----------------------------------------------

  AcceptanceCertificateMetadata* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AcceptanceCertificateMetadata& from);
  void MergeFrom(const AcceptanceCertificateMetadata& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Diadoc.Api.Proto.Documents.AcceptanceCertificateDocument.AcceptanceCertificateDocumentStatus DocumentStatus = 1 [default = UnknownAcceptanceCertificateDocumentStatus];
  inline bool has_documentstatus() const;
  inline void clear_documentstatus();
  static const int kDocumentStatusFieldNumber = 1;
  inline ::Diadoc::Api::Proto::Documents::AcceptanceCertificateDocument::AcceptanceCertificateDocumentStatus documentstatus() const;
  inline void set_documentstatus(::Diadoc::Api::Proto::Documents::AcceptanceCertificateDocument::AcceptanceCertificateDocumentStatus value);

  // required string Total = 2;
  inline bool has_total() const;
  inline void clear_total();
  static const int kTotalFieldNumber = 2;
  inline const ::std::string& total() const;
  inline void set_total(const ::std::string& value);
  inline void set_total(const char* value);
  inline void set_total(const char* value, size_t size);
  inline ::std::string* mutable_total();
  inline ::std::string* release_total();
  inline void set_allocated_total(::std::string* total);

  // optional string Vat = 3;
  inline bool has_vat() const;
  inline void clear_vat();
  static const int kVatFieldNumber = 3;
  inline const ::std::string& vat() const;
  inline void set_vat(const ::std::string& value);
  inline void set_vat(const char* value);
  inline void set_vat(const char* value, size_t size);
  inline ::std::string* mutable_vat();
  inline ::std::string* release_vat();
  inline void set_allocated_vat(::std::string* vat);

  // optional string Grounds = 4;
  inline bool has_grounds() const;
  inline void clear_grounds();
  static const int kGroundsFieldNumber = 4;
  inline const ::std::string& grounds() const;
  inline void set_grounds(const ::std::string& value);
  inline void set_grounds(const char* value);
  inline void set_grounds(const char* value, size_t size);
  inline ::std::string* mutable_grounds();
  inline ::std::string* release_grounds();
  inline void set_allocated_grounds(::std::string* grounds);

  // optional .Diadoc.Api.Proto.Documents.ReceiptStatus ReceiptStatus = 5 [default = UnknownReceiptStatus];
  inline bool has_receiptstatus() const;
  inline void clear_receiptstatus();
  static const int kReceiptStatusFieldNumber = 5;
  inline ::Diadoc::Api::Proto::Documents::ReceiptStatus receiptstatus() const;
  inline void set_receiptstatus(::Diadoc::Api::Proto::Documents::ReceiptStatus value);

  // @@protoc_insertion_point(class_scope:Diadoc.Api.Proto.Documents.AcceptanceCertificateDocument.AcceptanceCertificateMetadata)
 private:
  inline void set_has_documentstatus();
  inline void clear_has_documentstatus();
  inline void set_has_total();
  inline void clear_has_total();
  inline void set_has_vat();
  inline void clear_has_vat();
  inline void set_has_grounds();
  inline void clear_has_grounds();
  inline void set_has_receiptstatus();
  inline void clear_has_receiptstatus();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* total_;
  ::std::string* vat_;
  int documentstatus_;
  int receiptstatus_;
  ::std::string* grounds_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_Documents_2fAcceptanceCertificateDocument_2eproto();
  friend void protobuf_AssignDesc_Documents_2fAcceptanceCertificateDocument_2eproto();
  friend void protobuf_ShutdownFile_Documents_2fAcceptanceCertificateDocument_2eproto();

  void InitAsDefaultInstance();
  static AcceptanceCertificateMetadata* default_instance_;
};
// ===================================================================


// ===================================================================

// AcceptanceCertificateMetadata

// optional .Diadoc.Api.Proto.Documents.AcceptanceCertificateDocument.AcceptanceCertificateDocumentStatus DocumentStatus = 1 [default = UnknownAcceptanceCertificateDocumentStatus];
inline bool AcceptanceCertificateMetadata::has_documentstatus() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AcceptanceCertificateMetadata::set_has_documentstatus() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AcceptanceCertificateMetadata::clear_has_documentstatus() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AcceptanceCertificateMetadata::clear_documentstatus() {
  documentstatus_ = 0;
  clear_has_documentstatus();
}
inline ::Diadoc::Api::Proto::Documents::AcceptanceCertificateDocument::AcceptanceCertificateDocumentStatus AcceptanceCertificateMetadata::documentstatus() const {
  return static_cast< ::Diadoc::Api::Proto::Documents::AcceptanceCertificateDocument::AcceptanceCertificateDocumentStatus >(documentstatus_);
}
inline void AcceptanceCertificateMetadata::set_documentstatus(::Diadoc::Api::Proto::Documents::AcceptanceCertificateDocument::AcceptanceCertificateDocumentStatus value) {
  assert(::Diadoc::Api::Proto::Documents::AcceptanceCertificateDocument::AcceptanceCertificateDocumentStatus_IsValid(value));
  set_has_documentstatus();
  documentstatus_ = value;
}

// required string Total = 2;
inline bool AcceptanceCertificateMetadata::has_total() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AcceptanceCertificateMetadata::set_has_total() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AcceptanceCertificateMetadata::clear_has_total() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AcceptanceCertificateMetadata::clear_total() {
  if (total_ != &::google::protobuf::internal::kEmptyString) {
    total_->clear();
  }
  clear_has_total();
}
inline const ::std::string& AcceptanceCertificateMetadata::total() const {
  return *total_;
}
inline void AcceptanceCertificateMetadata::set_total(const ::std::string& value) {
  set_has_total();
  if (total_ == &::google::protobuf::internal::kEmptyString) {
    total_ = new ::std::string;
  }
  total_->assign(value);
}
inline void AcceptanceCertificateMetadata::set_total(const char* value) {
  set_has_total();
  if (total_ == &::google::protobuf::internal::kEmptyString) {
    total_ = new ::std::string;
  }
  total_->assign(value);
}
inline void AcceptanceCertificateMetadata::set_total(const char* value, size_t size) {
  set_has_total();
  if (total_ == &::google::protobuf::internal::kEmptyString) {
    total_ = new ::std::string;
  }
  total_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* AcceptanceCertificateMetadata::mutable_total() {
  set_has_total();
  if (total_ == &::google::protobuf::internal::kEmptyString) {
    total_ = new ::std::string;
  }
  return total_;
}
inline ::std::string* AcceptanceCertificateMetadata::release_total() {
  clear_has_total();
  if (total_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = total_;
    total_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void AcceptanceCertificateMetadata::set_allocated_total(::std::string* total) {
  if (total_ != &::google::protobuf::internal::kEmptyString) {
    delete total_;
  }
  if (total) {
    set_has_total();
    total_ = total;
  } else {
    clear_has_total();
    total_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string Vat = 3;
inline bool AcceptanceCertificateMetadata::has_vat() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AcceptanceCertificateMetadata::set_has_vat() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AcceptanceCertificateMetadata::clear_has_vat() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AcceptanceCertificateMetadata::clear_vat() {
  if (vat_ != &::google::protobuf::internal::kEmptyString) {
    vat_->clear();
  }
  clear_has_vat();
}
inline const ::std::string& AcceptanceCertificateMetadata::vat() const {
  return *vat_;
}
inline void AcceptanceCertificateMetadata::set_vat(const ::std::string& value) {
  set_has_vat();
  if (vat_ == &::google::protobuf::internal::kEmptyString) {
    vat_ = new ::std::string;
  }
  vat_->assign(value);
}
inline void AcceptanceCertificateMetadata::set_vat(const char* value) {
  set_has_vat();
  if (vat_ == &::google::protobuf::internal::kEmptyString) {
    vat_ = new ::std::string;
  }
  vat_->assign(value);
}
inline void AcceptanceCertificateMetadata::set_vat(const char* value, size_t size) {
  set_has_vat();
  if (vat_ == &::google::protobuf::internal::kEmptyString) {
    vat_ = new ::std::string;
  }
  vat_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* AcceptanceCertificateMetadata::mutable_vat() {
  set_has_vat();
  if (vat_ == &::google::protobuf::internal::kEmptyString) {
    vat_ = new ::std::string;
  }
  return vat_;
}
inline ::std::string* AcceptanceCertificateMetadata::release_vat() {
  clear_has_vat();
  if (vat_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = vat_;
    vat_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void AcceptanceCertificateMetadata::set_allocated_vat(::std::string* vat) {
  if (vat_ != &::google::protobuf::internal::kEmptyString) {
    delete vat_;
  }
  if (vat) {
    set_has_vat();
    vat_ = vat;
  } else {
    clear_has_vat();
    vat_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string Grounds = 4;
inline bool AcceptanceCertificateMetadata::has_grounds() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void AcceptanceCertificateMetadata::set_has_grounds() {
  _has_bits_[0] |= 0x00000008u;
}
inline void AcceptanceCertificateMetadata::clear_has_grounds() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void AcceptanceCertificateMetadata::clear_grounds() {
  if (grounds_ != &::google::protobuf::internal::kEmptyString) {
    grounds_->clear();
  }
  clear_has_grounds();
}
inline const ::std::string& AcceptanceCertificateMetadata::grounds() const {
  return *grounds_;
}
inline void AcceptanceCertificateMetadata::set_grounds(const ::std::string& value) {
  set_has_grounds();
  if (grounds_ == &::google::protobuf::internal::kEmptyString) {
    grounds_ = new ::std::string;
  }
  grounds_->assign(value);
}
inline void AcceptanceCertificateMetadata::set_grounds(const char* value) {
  set_has_grounds();
  if (grounds_ == &::google::protobuf::internal::kEmptyString) {
    grounds_ = new ::std::string;
  }
  grounds_->assign(value);
}
inline void AcceptanceCertificateMetadata::set_grounds(const char* value, size_t size) {
  set_has_grounds();
  if (grounds_ == &::google::protobuf::internal::kEmptyString) {
    grounds_ = new ::std::string;
  }
  grounds_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* AcceptanceCertificateMetadata::mutable_grounds() {
  set_has_grounds();
  if (grounds_ == &::google::protobuf::internal::kEmptyString) {
    grounds_ = new ::std::string;
  }
  return grounds_;
}
inline ::std::string* AcceptanceCertificateMetadata::release_grounds() {
  clear_has_grounds();
  if (grounds_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = grounds_;
    grounds_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void AcceptanceCertificateMetadata::set_allocated_grounds(::std::string* grounds) {
  if (grounds_ != &::google::protobuf::internal::kEmptyString) {
    delete grounds_;
  }
  if (grounds) {
    set_has_grounds();
    grounds_ = grounds;
  } else {
    clear_has_grounds();
    grounds_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional .Diadoc.Api.Proto.Documents.ReceiptStatus ReceiptStatus = 5 [default = UnknownReceiptStatus];
inline bool AcceptanceCertificateMetadata::has_receiptstatus() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void AcceptanceCertificateMetadata::set_has_receiptstatus() {
  _has_bits_[0] |= 0x00000010u;
}
inline void AcceptanceCertificateMetadata::clear_has_receiptstatus() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void AcceptanceCertificateMetadata::clear_receiptstatus() {
  receiptstatus_ = 0;
  clear_has_receiptstatus();
}
inline ::Diadoc::Api::Proto::Documents::ReceiptStatus AcceptanceCertificateMetadata::receiptstatus() const {
  return static_cast< ::Diadoc::Api::Proto::Documents::ReceiptStatus >(receiptstatus_);
}
inline void AcceptanceCertificateMetadata::set_receiptstatus(::Diadoc::Api::Proto::Documents::ReceiptStatus value) {
  assert(::Diadoc::Api::Proto::Documents::ReceiptStatus_IsValid(value));
  set_has_receiptstatus();
  receiptstatus_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace AcceptanceCertificateDocument
}  // namespace Documents
}  // namespace Proto
}  // namespace Api
}  // namespace Diadoc

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Diadoc::Api::Proto::Documents::AcceptanceCertificateDocument::AcceptanceCertificateDocumentStatus>() {
  return ::Diadoc::Api::Proto::Documents::AcceptanceCertificateDocument::AcceptanceCertificateDocumentStatus_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_Documents_2fAcceptanceCertificateDocument_2eproto__INCLUDED
