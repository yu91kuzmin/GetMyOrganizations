// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Documents/BilateralDocument.proto

#ifndef PROTOBUF_Documents_2fBilateralDocument_2eproto__INCLUDED
#define PROTOBUF_Documents_2fBilateralDocument_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "ReceiptStatus.pb.h"
// @@protoc_insertion_point(includes)

namespace Diadoc {
namespace Api {
namespace Proto {
namespace Documents {
namespace BilateralDocument {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_Documents_2fBilateralDocument_2eproto();
void protobuf_AssignDesc_Documents_2fBilateralDocument_2eproto();
void protobuf_ShutdownFile_Documents_2fBilateralDocument_2eproto();

class TrustConnectionRequestMetadata;
class BasicDocumentMetadata;
class PriceListMetadata;
class ContractMetadata;
class BilateralDocumentMetadata;

enum BilateralDocumentStatus {
  UnknownBilateralDocumentStatus = 0,
  OutboundWaitingForRecipientSignature = 1,
  OutboundWithRecipientSignature = 2,
  OutboundRecipientSignatureRequestRejected = 3,
  OutboundWaitingForSenderSignature = 10,
  OutboundInvalidSenderSignature = 11,
  InboundWaitingForRecipientSignature = 4,
  InboundWithRecipientSignature = 5,
  InboundRecipientSignatureRequestRejected = 6,
  InboundInvalidRecipientSignature = 12,
  InternalWaitingForRecipientSignature = 7,
  InternalWithRecipientSignature = 8,
  InternalRecipientSignatureRequestRejected = 9,
  InternalWaitingForSenderSignature = 13,
  InternalInvalidSenderSignature = 14,
  InternalInvalidRecipientSignature = 15
};
bool BilateralDocumentStatus_IsValid(int value);
const BilateralDocumentStatus BilateralDocumentStatus_MIN = UnknownBilateralDocumentStatus;
const BilateralDocumentStatus BilateralDocumentStatus_MAX = InternalInvalidRecipientSignature;
const int BilateralDocumentStatus_ARRAYSIZE = BilateralDocumentStatus_MAX + 1;

const ::google::protobuf::EnumDescriptor* BilateralDocumentStatus_descriptor();
inline const ::std::string& BilateralDocumentStatus_Name(BilateralDocumentStatus value) {
  return ::google::protobuf::internal::NameOfEnum(
    BilateralDocumentStatus_descriptor(), value);
}
inline bool BilateralDocumentStatus_Parse(
    const ::std::string& name, BilateralDocumentStatus* value) {
  return ::google::protobuf::internal::ParseNamedEnum<BilateralDocumentStatus>(
    BilateralDocumentStatus_descriptor(), name, value);
}
// ===================================================================

class TrustConnectionRequestMetadata : public ::google::protobuf::Message {
 public:
  TrustConnectionRequestMetadata();
  virtual ~TrustConnectionRequestMetadata();

  TrustConnectionRequestMetadata(const TrustConnectionRequestMetadata& from);

  inline TrustConnectionRequestMetadata& operator=(const TrustConnectionRequestMetadata& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TrustConnectionRequestMetadata& default_instance();

  void Swap(TrustConnectionRequestMetadata* other);

  // implements Message ----------------------------------------------

  TrustConnectionRequestMetadata* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TrustConnectionRequestMetadata& from);
  void MergeFrom(const TrustConnectionRequestMetadata& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Diadoc.Api.Proto.Documents.BilateralDocument.BilateralDocumentStatus TrustConnectionRequestStatus = 1 [default = UnknownBilateralDocumentStatus];
  inline bool has_trustconnectionrequeststatus() const;
  inline void clear_trustconnectionrequeststatus();
  static const int kTrustConnectionRequestStatusFieldNumber = 1;
  inline ::Diadoc::Api::Proto::Documents::BilateralDocument::BilateralDocumentStatus trustconnectionrequeststatus() const;
  inline void set_trustconnectionrequeststatus(::Diadoc::Api::Proto::Documents::BilateralDocument::BilateralDocumentStatus value);

  // @@protoc_insertion_point(class_scope:Diadoc.Api.Proto.Documents.BilateralDocument.TrustConnectionRequestMetadata)
 private:
  inline void set_has_trustconnectionrequeststatus();
  inline void clear_has_trustconnectionrequeststatus();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int trustconnectionrequeststatus_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Documents_2fBilateralDocument_2eproto();
  friend void protobuf_AssignDesc_Documents_2fBilateralDocument_2eproto();
  friend void protobuf_ShutdownFile_Documents_2fBilateralDocument_2eproto();

  void InitAsDefaultInstance();
  static TrustConnectionRequestMetadata* default_instance_;
};
// -------------------------------------------------------------------

class BasicDocumentMetadata : public ::google::protobuf::Message {
 public:
  BasicDocumentMetadata();
  virtual ~BasicDocumentMetadata();

  BasicDocumentMetadata(const BasicDocumentMetadata& from);

  inline BasicDocumentMetadata& operator=(const BasicDocumentMetadata& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BasicDocumentMetadata& default_instance();

  void Swap(BasicDocumentMetadata* other);

  // implements Message ----------------------------------------------

  BasicDocumentMetadata* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BasicDocumentMetadata& from);
  void MergeFrom(const BasicDocumentMetadata& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Diadoc.Api.Proto.Documents.BilateralDocument.BilateralDocumentStatus DocumentStatus = 1 [default = UnknownBilateralDocumentStatus];
  inline bool has_documentstatus() const;
  inline void clear_documentstatus();
  static const int kDocumentStatusFieldNumber = 1;
  inline ::Diadoc::Api::Proto::Documents::BilateralDocument::BilateralDocumentStatus documentstatus() const;
  inline void set_documentstatus(::Diadoc::Api::Proto::Documents::BilateralDocument::BilateralDocumentStatus value);

  // required string Total = 2;
  inline bool has_total() const;
  inline void clear_total();
  static const int kTotalFieldNumber = 2;
  inline const ::std::string& total() const;
  inline void set_total(const ::std::string& value);
  inline void set_total(const char* value);
  inline void set_total(const char* value, size_t size);
  inline ::std::string* mutable_total();
  inline ::std::string* release_total();
  inline void set_allocated_total(::std::string* total);

  // optional string Vat = 3;
  inline bool has_vat() const;
  inline void clear_vat();
  static const int kVatFieldNumber = 3;
  inline const ::std::string& vat() const;
  inline void set_vat(const ::std::string& value);
  inline void set_vat(const char* value);
  inline void set_vat(const char* value, size_t size);
  inline ::std::string* mutable_vat();
  inline ::std::string* release_vat();
  inline void set_allocated_vat(::std::string* vat);

  // optional string Grounds = 4;
  inline bool has_grounds() const;
  inline void clear_grounds();
  static const int kGroundsFieldNumber = 4;
  inline const ::std::string& grounds() const;
  inline void set_grounds(const ::std::string& value);
  inline void set_grounds(const char* value);
  inline void set_grounds(const char* value, size_t size);
  inline ::std::string* mutable_grounds();
  inline ::std::string* release_grounds();
  inline void set_allocated_grounds(::std::string* grounds);

  // optional .Diadoc.Api.Proto.Documents.ReceiptStatus ReceiptStatus = 5 [default = UnknownReceiptStatus];
  inline bool has_receiptstatus() const;
  inline void clear_receiptstatus();
  static const int kReceiptStatusFieldNumber = 5;
  inline ::Diadoc::Api::Proto::Documents::ReceiptStatus receiptstatus() const;
  inline void set_receiptstatus(::Diadoc::Api::Proto::Documents::ReceiptStatus value);

  // @@protoc_insertion_point(class_scope:Diadoc.Api.Proto.Documents.BilateralDocument.BasicDocumentMetadata)
 private:
  inline void set_has_documentstatus();
  inline void clear_has_documentstatus();
  inline void set_has_total();
  inline void clear_has_total();
  inline void set_has_vat();
  inline void clear_has_vat();
  inline void set_has_grounds();
  inline void clear_has_grounds();
  inline void set_has_receiptstatus();
  inline void clear_has_receiptstatus();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* total_;
  ::std::string* vat_;
  int documentstatus_;
  int receiptstatus_;
  ::std::string* grounds_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_Documents_2fBilateralDocument_2eproto();
  friend void protobuf_AssignDesc_Documents_2fBilateralDocument_2eproto();
  friend void protobuf_ShutdownFile_Documents_2fBilateralDocument_2eproto();

  void InitAsDefaultInstance();
  static BasicDocumentMetadata* default_instance_;
};
// -------------------------------------------------------------------

class PriceListMetadata : public ::google::protobuf::Message {
 public:
  PriceListMetadata();
  virtual ~PriceListMetadata();

  PriceListMetadata(const PriceListMetadata& from);

  inline PriceListMetadata& operator=(const PriceListMetadata& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PriceListMetadata& default_instance();

  void Swap(PriceListMetadata* other);

  // implements Message ----------------------------------------------

  PriceListMetadata* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PriceListMetadata& from);
  void MergeFrom(const PriceListMetadata& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Diadoc.Api.Proto.Documents.BilateralDocument.BilateralDocumentStatus DocumentStatus = 1 [default = UnknownBilateralDocumentStatus];
  inline bool has_documentstatus() const;
  inline void clear_documentstatus();
  static const int kDocumentStatusFieldNumber = 1;
  inline ::Diadoc::Api::Proto::Documents::BilateralDocument::BilateralDocumentStatus documentstatus() const;
  inline void set_documentstatus(::Diadoc::Api::Proto::Documents::BilateralDocument::BilateralDocumentStatus value);

  // optional string PriceListEffectiveDate = 2;
  inline bool has_pricelisteffectivedate() const;
  inline void clear_pricelisteffectivedate();
  static const int kPriceListEffectiveDateFieldNumber = 2;
  inline const ::std::string& pricelisteffectivedate() const;
  inline void set_pricelisteffectivedate(const ::std::string& value);
  inline void set_pricelisteffectivedate(const char* value);
  inline void set_pricelisteffectivedate(const char* value, size_t size);
  inline ::std::string* mutable_pricelisteffectivedate();
  inline ::std::string* release_pricelisteffectivedate();
  inline void set_allocated_pricelisteffectivedate(::std::string* pricelisteffectivedate);

  // optional string ContractDocumentDate = 3;
  inline bool has_contractdocumentdate() const;
  inline void clear_contractdocumentdate();
  static const int kContractDocumentDateFieldNumber = 3;
  inline const ::std::string& contractdocumentdate() const;
  inline void set_contractdocumentdate(const ::std::string& value);
  inline void set_contractdocumentdate(const char* value);
  inline void set_contractdocumentdate(const char* value, size_t size);
  inline ::std::string* mutable_contractdocumentdate();
  inline ::std::string* release_contractdocumentdate();
  inline void set_allocated_contractdocumentdate(::std::string* contractdocumentdate);

  // optional string ContractDocumentNumber = 4;
  inline bool has_contractdocumentnumber() const;
  inline void clear_contractdocumentnumber();
  static const int kContractDocumentNumberFieldNumber = 4;
  inline const ::std::string& contractdocumentnumber() const;
  inline void set_contractdocumentnumber(const ::std::string& value);
  inline void set_contractdocumentnumber(const char* value);
  inline void set_contractdocumentnumber(const char* value, size_t size);
  inline ::std::string* mutable_contractdocumentnumber();
  inline ::std::string* release_contractdocumentnumber();
  inline void set_allocated_contractdocumentnumber(::std::string* contractdocumentnumber);

  // optional .Diadoc.Api.Proto.Documents.ReceiptStatus ReceiptStatus = 5 [default = UnknownReceiptStatus];
  inline bool has_receiptstatus() const;
  inline void clear_receiptstatus();
  static const int kReceiptStatusFieldNumber = 5;
  inline ::Diadoc::Api::Proto::Documents::ReceiptStatus receiptstatus() const;
  inline void set_receiptstatus(::Diadoc::Api::Proto::Documents::ReceiptStatus value);

  // @@protoc_insertion_point(class_scope:Diadoc.Api.Proto.Documents.BilateralDocument.PriceListMetadata)
 private:
  inline void set_has_documentstatus();
  inline void clear_has_documentstatus();
  inline void set_has_pricelisteffectivedate();
  inline void clear_has_pricelisteffectivedate();
  inline void set_has_contractdocumentdate();
  inline void clear_has_contractdocumentdate();
  inline void set_has_contractdocumentnumber();
  inline void clear_has_contractdocumentnumber();
  inline void set_has_receiptstatus();
  inline void clear_has_receiptstatus();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* pricelisteffectivedate_;
  ::std::string* contractdocumentdate_;
  int documentstatus_;
  int receiptstatus_;
  ::std::string* contractdocumentnumber_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_Documents_2fBilateralDocument_2eproto();
  friend void protobuf_AssignDesc_Documents_2fBilateralDocument_2eproto();
  friend void protobuf_ShutdownFile_Documents_2fBilateralDocument_2eproto();

  void InitAsDefaultInstance();
  static PriceListMetadata* default_instance_;
};
// -------------------------------------------------------------------

class ContractMetadata : public ::google::protobuf::Message {
 public:
  ContractMetadata();
  virtual ~ContractMetadata();

  ContractMetadata(const ContractMetadata& from);

  inline ContractMetadata& operator=(const ContractMetadata& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ContractMetadata& default_instance();

  void Swap(ContractMetadata* other);

  // implements Message ----------------------------------------------

  ContractMetadata* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ContractMetadata& from);
  void MergeFrom(const ContractMetadata& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .Diadoc.Api.Proto.Documents.BilateralDocument.BilateralDocumentStatus DocumentStatus = 1 [default = UnknownBilateralDocumentStatus];
  inline bool has_documentstatus() const;
  inline void clear_documentstatus();
  static const int kDocumentStatusFieldNumber = 1;
  inline ::Diadoc::Api::Proto::Documents::BilateralDocument::BilateralDocumentStatus documentstatus() const;
  inline void set_documentstatus(::Diadoc::Api::Proto::Documents::BilateralDocument::BilateralDocumentStatus value);

  // optional string ContractPrice = 2;
  inline bool has_contractprice() const;
  inline void clear_contractprice();
  static const int kContractPriceFieldNumber = 2;
  inline const ::std::string& contractprice() const;
  inline void set_contractprice(const ::std::string& value);
  inline void set_contractprice(const char* value);
  inline void set_contractprice(const char* value, size_t size);
  inline ::std::string* mutable_contractprice();
  inline ::std::string* release_contractprice();
  inline void set_allocated_contractprice(::std::string* contractprice);

  // optional string ContractType = 3;
  inline bool has_contracttype() const;
  inline void clear_contracttype();
  static const int kContractTypeFieldNumber = 3;
  inline const ::std::string& contracttype() const;
  inline void set_contracttype(const ::std::string& value);
  inline void set_contracttype(const char* value);
  inline void set_contracttype(const char* value, size_t size);
  inline ::std::string* mutable_contracttype();
  inline ::std::string* release_contracttype();
  inline void set_allocated_contracttype(::std::string* contracttype);

  // required .Diadoc.Api.Proto.Documents.ReceiptStatus ReceiptStatus = 4 [default = UnknownReceiptStatus];
  inline bool has_receiptstatus() const;
  inline void clear_receiptstatus();
  static const int kReceiptStatusFieldNumber = 4;
  inline ::Diadoc::Api::Proto::Documents::ReceiptStatus receiptstatus() const;
  inline void set_receiptstatus(::Diadoc::Api::Proto::Documents::ReceiptStatus value);

  // @@protoc_insertion_point(class_scope:Diadoc.Api.Proto.Documents.BilateralDocument.ContractMetadata)
 private:
  inline void set_has_documentstatus();
  inline void clear_has_documentstatus();
  inline void set_has_contractprice();
  inline void clear_has_contractprice();
  inline void set_has_contracttype();
  inline void clear_has_contracttype();
  inline void set_has_receiptstatus();
  inline void clear_has_receiptstatus();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* contractprice_;
  int documentstatus_;
  int receiptstatus_;
  ::std::string* contracttype_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_Documents_2fBilateralDocument_2eproto();
  friend void protobuf_AssignDesc_Documents_2fBilateralDocument_2eproto();
  friend void protobuf_ShutdownFile_Documents_2fBilateralDocument_2eproto();

  void InitAsDefaultInstance();
  static ContractMetadata* default_instance_;
};
// -------------------------------------------------------------------

class BilateralDocumentMetadata : public ::google::protobuf::Message {
 public:
  BilateralDocumentMetadata();
  virtual ~BilateralDocumentMetadata();

  BilateralDocumentMetadata(const BilateralDocumentMetadata& from);

  inline BilateralDocumentMetadata& operator=(const BilateralDocumentMetadata& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BilateralDocumentMetadata& default_instance();

  void Swap(BilateralDocumentMetadata* other);

  // implements Message ----------------------------------------------

  BilateralDocumentMetadata* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BilateralDocumentMetadata& from);
  void MergeFrom(const BilateralDocumentMetadata& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .Diadoc.Api.Proto.Documents.BilateralDocument.BilateralDocumentStatus DocumentStatus = 1 [default = UnknownBilateralDocumentStatus];
  inline bool has_documentstatus() const;
  inline void clear_documentstatus();
  static const int kDocumentStatusFieldNumber = 1;
  inline ::Diadoc::Api::Proto::Documents::BilateralDocument::BilateralDocumentStatus documentstatus() const;
  inline void set_documentstatus(::Diadoc::Api::Proto::Documents::BilateralDocument::BilateralDocumentStatus value);

  // required .Diadoc.Api.Proto.Documents.ReceiptStatus ReceiptStatus = 2 [default = UnknownReceiptStatus];
  inline bool has_receiptstatus() const;
  inline void clear_receiptstatus();
  static const int kReceiptStatusFieldNumber = 2;
  inline ::Diadoc::Api::Proto::Documents::ReceiptStatus receiptstatus() const;
  inline void set_receiptstatus(::Diadoc::Api::Proto::Documents::ReceiptStatus value);

  // @@protoc_insertion_point(class_scope:Diadoc.Api.Proto.Documents.BilateralDocument.BilateralDocumentMetadata)
 private:
  inline void set_has_documentstatus();
  inline void clear_has_documentstatus();
  inline void set_has_receiptstatus();
  inline void clear_has_receiptstatus();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int documentstatus_;
  int receiptstatus_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Documents_2fBilateralDocument_2eproto();
  friend void protobuf_AssignDesc_Documents_2fBilateralDocument_2eproto();
  friend void protobuf_ShutdownFile_Documents_2fBilateralDocument_2eproto();

  void InitAsDefaultInstance();
  static BilateralDocumentMetadata* default_instance_;
};
// ===================================================================


// ===================================================================

// TrustConnectionRequestMetadata

// optional .Diadoc.Api.Proto.Documents.BilateralDocument.BilateralDocumentStatus TrustConnectionRequestStatus = 1 [default = UnknownBilateralDocumentStatus];
inline bool TrustConnectionRequestMetadata::has_trustconnectionrequeststatus() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TrustConnectionRequestMetadata::set_has_trustconnectionrequeststatus() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TrustConnectionRequestMetadata::clear_has_trustconnectionrequeststatus() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TrustConnectionRequestMetadata::clear_trustconnectionrequeststatus() {
  trustconnectionrequeststatus_ = 0;
  clear_has_trustconnectionrequeststatus();
}
inline ::Diadoc::Api::Proto::Documents::BilateralDocument::BilateralDocumentStatus TrustConnectionRequestMetadata::trustconnectionrequeststatus() const {
  return static_cast< ::Diadoc::Api::Proto::Documents::BilateralDocument::BilateralDocumentStatus >(trustconnectionrequeststatus_);
}
inline void TrustConnectionRequestMetadata::set_trustconnectionrequeststatus(::Diadoc::Api::Proto::Documents::BilateralDocument::BilateralDocumentStatus value) {
  assert(::Diadoc::Api::Proto::Documents::BilateralDocument::BilateralDocumentStatus_IsValid(value));
  set_has_trustconnectionrequeststatus();
  trustconnectionrequeststatus_ = value;
}

// -------------------------------------------------------------------

// BasicDocumentMetadata

// optional .Diadoc.Api.Proto.Documents.BilateralDocument.BilateralDocumentStatus DocumentStatus = 1 [default = UnknownBilateralDocumentStatus];
inline bool BasicDocumentMetadata::has_documentstatus() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BasicDocumentMetadata::set_has_documentstatus() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BasicDocumentMetadata::clear_has_documentstatus() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BasicDocumentMetadata::clear_documentstatus() {
  documentstatus_ = 0;
  clear_has_documentstatus();
}
inline ::Diadoc::Api::Proto::Documents::BilateralDocument::BilateralDocumentStatus BasicDocumentMetadata::documentstatus() const {
  return static_cast< ::Diadoc::Api::Proto::Documents::BilateralDocument::BilateralDocumentStatus >(documentstatus_);
}
inline void BasicDocumentMetadata::set_documentstatus(::Diadoc::Api::Proto::Documents::BilateralDocument::BilateralDocumentStatus value) {
  assert(::Diadoc::Api::Proto::Documents::BilateralDocument::BilateralDocumentStatus_IsValid(value));
  set_has_documentstatus();
  documentstatus_ = value;
}

// required string Total = 2;
inline bool BasicDocumentMetadata::has_total() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BasicDocumentMetadata::set_has_total() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BasicDocumentMetadata::clear_has_total() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BasicDocumentMetadata::clear_total() {
  if (total_ != &::google::protobuf::internal::kEmptyString) {
    total_->clear();
  }
  clear_has_total();
}
inline const ::std::string& BasicDocumentMetadata::total() const {
  return *total_;
}
inline void BasicDocumentMetadata::set_total(const ::std::string& value) {
  set_has_total();
  if (total_ == &::google::protobuf::internal::kEmptyString) {
    total_ = new ::std::string;
  }
  total_->assign(value);
}
inline void BasicDocumentMetadata::set_total(const char* value) {
  set_has_total();
  if (total_ == &::google::protobuf::internal::kEmptyString) {
    total_ = new ::std::string;
  }
  total_->assign(value);
}
inline void BasicDocumentMetadata::set_total(const char* value, size_t size) {
  set_has_total();
  if (total_ == &::google::protobuf::internal::kEmptyString) {
    total_ = new ::std::string;
  }
  total_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BasicDocumentMetadata::mutable_total() {
  set_has_total();
  if (total_ == &::google::protobuf::internal::kEmptyString) {
    total_ = new ::std::string;
  }
  return total_;
}
inline ::std::string* BasicDocumentMetadata::release_total() {
  clear_has_total();
  if (total_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = total_;
    total_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void BasicDocumentMetadata::set_allocated_total(::std::string* total) {
  if (total_ != &::google::protobuf::internal::kEmptyString) {
    delete total_;
  }
  if (total) {
    set_has_total();
    total_ = total;
  } else {
    clear_has_total();
    total_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string Vat = 3;
inline bool BasicDocumentMetadata::has_vat() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BasicDocumentMetadata::set_has_vat() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BasicDocumentMetadata::clear_has_vat() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BasicDocumentMetadata::clear_vat() {
  if (vat_ != &::google::protobuf::internal::kEmptyString) {
    vat_->clear();
  }
  clear_has_vat();
}
inline const ::std::string& BasicDocumentMetadata::vat() const {
  return *vat_;
}
inline void BasicDocumentMetadata::set_vat(const ::std::string& value) {
  set_has_vat();
  if (vat_ == &::google::protobuf::internal::kEmptyString) {
    vat_ = new ::std::string;
  }
  vat_->assign(value);
}
inline void BasicDocumentMetadata::set_vat(const char* value) {
  set_has_vat();
  if (vat_ == &::google::protobuf::internal::kEmptyString) {
    vat_ = new ::std::string;
  }
  vat_->assign(value);
}
inline void BasicDocumentMetadata::set_vat(const char* value, size_t size) {
  set_has_vat();
  if (vat_ == &::google::protobuf::internal::kEmptyString) {
    vat_ = new ::std::string;
  }
  vat_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BasicDocumentMetadata::mutable_vat() {
  set_has_vat();
  if (vat_ == &::google::protobuf::internal::kEmptyString) {
    vat_ = new ::std::string;
  }
  return vat_;
}
inline ::std::string* BasicDocumentMetadata::release_vat() {
  clear_has_vat();
  if (vat_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = vat_;
    vat_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void BasicDocumentMetadata::set_allocated_vat(::std::string* vat) {
  if (vat_ != &::google::protobuf::internal::kEmptyString) {
    delete vat_;
  }
  if (vat) {
    set_has_vat();
    vat_ = vat;
  } else {
    clear_has_vat();
    vat_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string Grounds = 4;
inline bool BasicDocumentMetadata::has_grounds() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BasicDocumentMetadata::set_has_grounds() {
  _has_bits_[0] |= 0x00000008u;
}
inline void BasicDocumentMetadata::clear_has_grounds() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void BasicDocumentMetadata::clear_grounds() {
  if (grounds_ != &::google::protobuf::internal::kEmptyString) {
    grounds_->clear();
  }
  clear_has_grounds();
}
inline const ::std::string& BasicDocumentMetadata::grounds() const {
  return *grounds_;
}
inline void BasicDocumentMetadata::set_grounds(const ::std::string& value) {
  set_has_grounds();
  if (grounds_ == &::google::protobuf::internal::kEmptyString) {
    grounds_ = new ::std::string;
  }
  grounds_->assign(value);
}
inline void BasicDocumentMetadata::set_grounds(const char* value) {
  set_has_grounds();
  if (grounds_ == &::google::protobuf::internal::kEmptyString) {
    grounds_ = new ::std::string;
  }
  grounds_->assign(value);
}
inline void BasicDocumentMetadata::set_grounds(const char* value, size_t size) {
  set_has_grounds();
  if (grounds_ == &::google::protobuf::internal::kEmptyString) {
    grounds_ = new ::std::string;
  }
  grounds_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BasicDocumentMetadata::mutable_grounds() {
  set_has_grounds();
  if (grounds_ == &::google::protobuf::internal::kEmptyString) {
    grounds_ = new ::std::string;
  }
  return grounds_;
}
inline ::std::string* BasicDocumentMetadata::release_grounds() {
  clear_has_grounds();
  if (grounds_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = grounds_;
    grounds_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void BasicDocumentMetadata::set_allocated_grounds(::std::string* grounds) {
  if (grounds_ != &::google::protobuf::internal::kEmptyString) {
    delete grounds_;
  }
  if (grounds) {
    set_has_grounds();
    grounds_ = grounds;
  } else {
    clear_has_grounds();
    grounds_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional .Diadoc.Api.Proto.Documents.ReceiptStatus ReceiptStatus = 5 [default = UnknownReceiptStatus];
inline bool BasicDocumentMetadata::has_receiptstatus() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void BasicDocumentMetadata::set_has_receiptstatus() {
  _has_bits_[0] |= 0x00000010u;
}
inline void BasicDocumentMetadata::clear_has_receiptstatus() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void BasicDocumentMetadata::clear_receiptstatus() {
  receiptstatus_ = 0;
  clear_has_receiptstatus();
}
inline ::Diadoc::Api::Proto::Documents::ReceiptStatus BasicDocumentMetadata::receiptstatus() const {
  return static_cast< ::Diadoc::Api::Proto::Documents::ReceiptStatus >(receiptstatus_);
}
inline void BasicDocumentMetadata::set_receiptstatus(::Diadoc::Api::Proto::Documents::ReceiptStatus value) {
  assert(::Diadoc::Api::Proto::Documents::ReceiptStatus_IsValid(value));
  set_has_receiptstatus();
  receiptstatus_ = value;
}

// -------------------------------------------------------------------

// PriceListMetadata

// optional .Diadoc.Api.Proto.Documents.BilateralDocument.BilateralDocumentStatus DocumentStatus = 1 [default = UnknownBilateralDocumentStatus];
inline bool PriceListMetadata::has_documentstatus() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PriceListMetadata::set_has_documentstatus() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PriceListMetadata::clear_has_documentstatus() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PriceListMetadata::clear_documentstatus() {
  documentstatus_ = 0;
  clear_has_documentstatus();
}
inline ::Diadoc::Api::Proto::Documents::BilateralDocument::BilateralDocumentStatus PriceListMetadata::documentstatus() const {
  return static_cast< ::Diadoc::Api::Proto::Documents::BilateralDocument::BilateralDocumentStatus >(documentstatus_);
}
inline void PriceListMetadata::set_documentstatus(::Diadoc::Api::Proto::Documents::BilateralDocument::BilateralDocumentStatus value) {
  assert(::Diadoc::Api::Proto::Documents::BilateralDocument::BilateralDocumentStatus_IsValid(value));
  set_has_documentstatus();
  documentstatus_ = value;
}

// optional string PriceListEffectiveDate = 2;
inline bool PriceListMetadata::has_pricelisteffectivedate() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PriceListMetadata::set_has_pricelisteffectivedate() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PriceListMetadata::clear_has_pricelisteffectivedate() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PriceListMetadata::clear_pricelisteffectivedate() {
  if (pricelisteffectivedate_ != &::google::protobuf::internal::kEmptyString) {
    pricelisteffectivedate_->clear();
  }
  clear_has_pricelisteffectivedate();
}
inline const ::std::string& PriceListMetadata::pricelisteffectivedate() const {
  return *pricelisteffectivedate_;
}
inline void PriceListMetadata::set_pricelisteffectivedate(const ::std::string& value) {
  set_has_pricelisteffectivedate();
  if (pricelisteffectivedate_ == &::google::protobuf::internal::kEmptyString) {
    pricelisteffectivedate_ = new ::std::string;
  }
  pricelisteffectivedate_->assign(value);
}
inline void PriceListMetadata::set_pricelisteffectivedate(const char* value) {
  set_has_pricelisteffectivedate();
  if (pricelisteffectivedate_ == &::google::protobuf::internal::kEmptyString) {
    pricelisteffectivedate_ = new ::std::string;
  }
  pricelisteffectivedate_->assign(value);
}
inline void PriceListMetadata::set_pricelisteffectivedate(const char* value, size_t size) {
  set_has_pricelisteffectivedate();
  if (pricelisteffectivedate_ == &::google::protobuf::internal::kEmptyString) {
    pricelisteffectivedate_ = new ::std::string;
  }
  pricelisteffectivedate_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PriceListMetadata::mutable_pricelisteffectivedate() {
  set_has_pricelisteffectivedate();
  if (pricelisteffectivedate_ == &::google::protobuf::internal::kEmptyString) {
    pricelisteffectivedate_ = new ::std::string;
  }
  return pricelisteffectivedate_;
}
inline ::std::string* PriceListMetadata::release_pricelisteffectivedate() {
  clear_has_pricelisteffectivedate();
  if (pricelisteffectivedate_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = pricelisteffectivedate_;
    pricelisteffectivedate_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void PriceListMetadata::set_allocated_pricelisteffectivedate(::std::string* pricelisteffectivedate) {
  if (pricelisteffectivedate_ != &::google::protobuf::internal::kEmptyString) {
    delete pricelisteffectivedate_;
  }
  if (pricelisteffectivedate) {
    set_has_pricelisteffectivedate();
    pricelisteffectivedate_ = pricelisteffectivedate;
  } else {
    clear_has_pricelisteffectivedate();
    pricelisteffectivedate_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string ContractDocumentDate = 3;
inline bool PriceListMetadata::has_contractdocumentdate() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PriceListMetadata::set_has_contractdocumentdate() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PriceListMetadata::clear_has_contractdocumentdate() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PriceListMetadata::clear_contractdocumentdate() {
  if (contractdocumentdate_ != &::google::protobuf::internal::kEmptyString) {
    contractdocumentdate_->clear();
  }
  clear_has_contractdocumentdate();
}
inline const ::std::string& PriceListMetadata::contractdocumentdate() const {
  return *contractdocumentdate_;
}
inline void PriceListMetadata::set_contractdocumentdate(const ::std::string& value) {
  set_has_contractdocumentdate();
  if (contractdocumentdate_ == &::google::protobuf::internal::kEmptyString) {
    contractdocumentdate_ = new ::std::string;
  }
  contractdocumentdate_->assign(value);
}
inline void PriceListMetadata::set_contractdocumentdate(const char* value) {
  set_has_contractdocumentdate();
  if (contractdocumentdate_ == &::google::protobuf::internal::kEmptyString) {
    contractdocumentdate_ = new ::std::string;
  }
  contractdocumentdate_->assign(value);
}
inline void PriceListMetadata::set_contractdocumentdate(const char* value, size_t size) {
  set_has_contractdocumentdate();
  if (contractdocumentdate_ == &::google::protobuf::internal::kEmptyString) {
    contractdocumentdate_ = new ::std::string;
  }
  contractdocumentdate_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PriceListMetadata::mutable_contractdocumentdate() {
  set_has_contractdocumentdate();
  if (contractdocumentdate_ == &::google::protobuf::internal::kEmptyString) {
    contractdocumentdate_ = new ::std::string;
  }
  return contractdocumentdate_;
}
inline ::std::string* PriceListMetadata::release_contractdocumentdate() {
  clear_has_contractdocumentdate();
  if (contractdocumentdate_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = contractdocumentdate_;
    contractdocumentdate_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void PriceListMetadata::set_allocated_contractdocumentdate(::std::string* contractdocumentdate) {
  if (contractdocumentdate_ != &::google::protobuf::internal::kEmptyString) {
    delete contractdocumentdate_;
  }
  if (contractdocumentdate) {
    set_has_contractdocumentdate();
    contractdocumentdate_ = contractdocumentdate;
  } else {
    clear_has_contractdocumentdate();
    contractdocumentdate_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string ContractDocumentNumber = 4;
inline bool PriceListMetadata::has_contractdocumentnumber() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PriceListMetadata::set_has_contractdocumentnumber() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PriceListMetadata::clear_has_contractdocumentnumber() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PriceListMetadata::clear_contractdocumentnumber() {
  if (contractdocumentnumber_ != &::google::protobuf::internal::kEmptyString) {
    contractdocumentnumber_->clear();
  }
  clear_has_contractdocumentnumber();
}
inline const ::std::string& PriceListMetadata::contractdocumentnumber() const {
  return *contractdocumentnumber_;
}
inline void PriceListMetadata::set_contractdocumentnumber(const ::std::string& value) {
  set_has_contractdocumentnumber();
  if (contractdocumentnumber_ == &::google::protobuf::internal::kEmptyString) {
    contractdocumentnumber_ = new ::std::string;
  }
  contractdocumentnumber_->assign(value);
}
inline void PriceListMetadata::set_contractdocumentnumber(const char* value) {
  set_has_contractdocumentnumber();
  if (contractdocumentnumber_ == &::google::protobuf::internal::kEmptyString) {
    contractdocumentnumber_ = new ::std::string;
  }
  contractdocumentnumber_->assign(value);
}
inline void PriceListMetadata::set_contractdocumentnumber(const char* value, size_t size) {
  set_has_contractdocumentnumber();
  if (contractdocumentnumber_ == &::google::protobuf::internal::kEmptyString) {
    contractdocumentnumber_ = new ::std::string;
  }
  contractdocumentnumber_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PriceListMetadata::mutable_contractdocumentnumber() {
  set_has_contractdocumentnumber();
  if (contractdocumentnumber_ == &::google::protobuf::internal::kEmptyString) {
    contractdocumentnumber_ = new ::std::string;
  }
  return contractdocumentnumber_;
}
inline ::std::string* PriceListMetadata::release_contractdocumentnumber() {
  clear_has_contractdocumentnumber();
  if (contractdocumentnumber_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = contractdocumentnumber_;
    contractdocumentnumber_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void PriceListMetadata::set_allocated_contractdocumentnumber(::std::string* contractdocumentnumber) {
  if (contractdocumentnumber_ != &::google::protobuf::internal::kEmptyString) {
    delete contractdocumentnumber_;
  }
  if (contractdocumentnumber) {
    set_has_contractdocumentnumber();
    contractdocumentnumber_ = contractdocumentnumber;
  } else {
    clear_has_contractdocumentnumber();
    contractdocumentnumber_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional .Diadoc.Api.Proto.Documents.ReceiptStatus ReceiptStatus = 5 [default = UnknownReceiptStatus];
inline bool PriceListMetadata::has_receiptstatus() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PriceListMetadata::set_has_receiptstatus() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PriceListMetadata::clear_has_receiptstatus() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PriceListMetadata::clear_receiptstatus() {
  receiptstatus_ = 0;
  clear_has_receiptstatus();
}
inline ::Diadoc::Api::Proto::Documents::ReceiptStatus PriceListMetadata::receiptstatus() const {
  return static_cast< ::Diadoc::Api::Proto::Documents::ReceiptStatus >(receiptstatus_);
}
inline void PriceListMetadata::set_receiptstatus(::Diadoc::Api::Proto::Documents::ReceiptStatus value) {
  assert(::Diadoc::Api::Proto::Documents::ReceiptStatus_IsValid(value));
  set_has_receiptstatus();
  receiptstatus_ = value;
}

// -------------------------------------------------------------------

// ContractMetadata

// required .Diadoc.Api.Proto.Documents.BilateralDocument.BilateralDocumentStatus DocumentStatus = 1 [default = UnknownBilateralDocumentStatus];
inline bool ContractMetadata::has_documentstatus() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ContractMetadata::set_has_documentstatus() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ContractMetadata::clear_has_documentstatus() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ContractMetadata::clear_documentstatus() {
  documentstatus_ = 0;
  clear_has_documentstatus();
}
inline ::Diadoc::Api::Proto::Documents::BilateralDocument::BilateralDocumentStatus ContractMetadata::documentstatus() const {
  return static_cast< ::Diadoc::Api::Proto::Documents::BilateralDocument::BilateralDocumentStatus >(documentstatus_);
}
inline void ContractMetadata::set_documentstatus(::Diadoc::Api::Proto::Documents::BilateralDocument::BilateralDocumentStatus value) {
  assert(::Diadoc::Api::Proto::Documents::BilateralDocument::BilateralDocumentStatus_IsValid(value));
  set_has_documentstatus();
  documentstatus_ = value;
}

// optional string ContractPrice = 2;
inline bool ContractMetadata::has_contractprice() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ContractMetadata::set_has_contractprice() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ContractMetadata::clear_has_contractprice() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ContractMetadata::clear_contractprice() {
  if (contractprice_ != &::google::protobuf::internal::kEmptyString) {
    contractprice_->clear();
  }
  clear_has_contractprice();
}
inline const ::std::string& ContractMetadata::contractprice() const {
  return *contractprice_;
}
inline void ContractMetadata::set_contractprice(const ::std::string& value) {
  set_has_contractprice();
  if (contractprice_ == &::google::protobuf::internal::kEmptyString) {
    contractprice_ = new ::std::string;
  }
  contractprice_->assign(value);
}
inline void ContractMetadata::set_contractprice(const char* value) {
  set_has_contractprice();
  if (contractprice_ == &::google::protobuf::internal::kEmptyString) {
    contractprice_ = new ::std::string;
  }
  contractprice_->assign(value);
}
inline void ContractMetadata::set_contractprice(const char* value, size_t size) {
  set_has_contractprice();
  if (contractprice_ == &::google::protobuf::internal::kEmptyString) {
    contractprice_ = new ::std::string;
  }
  contractprice_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ContractMetadata::mutable_contractprice() {
  set_has_contractprice();
  if (contractprice_ == &::google::protobuf::internal::kEmptyString) {
    contractprice_ = new ::std::string;
  }
  return contractprice_;
}
inline ::std::string* ContractMetadata::release_contractprice() {
  clear_has_contractprice();
  if (contractprice_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = contractprice_;
    contractprice_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ContractMetadata::set_allocated_contractprice(::std::string* contractprice) {
  if (contractprice_ != &::google::protobuf::internal::kEmptyString) {
    delete contractprice_;
  }
  if (contractprice) {
    set_has_contractprice();
    contractprice_ = contractprice;
  } else {
    clear_has_contractprice();
    contractprice_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string ContractType = 3;
inline bool ContractMetadata::has_contracttype() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ContractMetadata::set_has_contracttype() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ContractMetadata::clear_has_contracttype() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ContractMetadata::clear_contracttype() {
  if (contracttype_ != &::google::protobuf::internal::kEmptyString) {
    contracttype_->clear();
  }
  clear_has_contracttype();
}
inline const ::std::string& ContractMetadata::contracttype() const {
  return *contracttype_;
}
inline void ContractMetadata::set_contracttype(const ::std::string& value) {
  set_has_contracttype();
  if (contracttype_ == &::google::protobuf::internal::kEmptyString) {
    contracttype_ = new ::std::string;
  }
  contracttype_->assign(value);
}
inline void ContractMetadata::set_contracttype(const char* value) {
  set_has_contracttype();
  if (contracttype_ == &::google::protobuf::internal::kEmptyString) {
    contracttype_ = new ::std::string;
  }
  contracttype_->assign(value);
}
inline void ContractMetadata::set_contracttype(const char* value, size_t size) {
  set_has_contracttype();
  if (contracttype_ == &::google::protobuf::internal::kEmptyString) {
    contracttype_ = new ::std::string;
  }
  contracttype_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ContractMetadata::mutable_contracttype() {
  set_has_contracttype();
  if (contracttype_ == &::google::protobuf::internal::kEmptyString) {
    contracttype_ = new ::std::string;
  }
  return contracttype_;
}
inline ::std::string* ContractMetadata::release_contracttype() {
  clear_has_contracttype();
  if (contracttype_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = contracttype_;
    contracttype_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ContractMetadata::set_allocated_contracttype(::std::string* contracttype) {
  if (contracttype_ != &::google::protobuf::internal::kEmptyString) {
    delete contracttype_;
  }
  if (contracttype) {
    set_has_contracttype();
    contracttype_ = contracttype;
  } else {
    clear_has_contracttype();
    contracttype_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required .Diadoc.Api.Proto.Documents.ReceiptStatus ReceiptStatus = 4 [default = UnknownReceiptStatus];
inline bool ContractMetadata::has_receiptstatus() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ContractMetadata::set_has_receiptstatus() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ContractMetadata::clear_has_receiptstatus() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ContractMetadata::clear_receiptstatus() {
  receiptstatus_ = 0;
  clear_has_receiptstatus();
}
inline ::Diadoc::Api::Proto::Documents::ReceiptStatus ContractMetadata::receiptstatus() const {
  return static_cast< ::Diadoc::Api::Proto::Documents::ReceiptStatus >(receiptstatus_);
}
inline void ContractMetadata::set_receiptstatus(::Diadoc::Api::Proto::Documents::ReceiptStatus value) {
  assert(::Diadoc::Api::Proto::Documents::ReceiptStatus_IsValid(value));
  set_has_receiptstatus();
  receiptstatus_ = value;
}

// -------------------------------------------------------------------

// BilateralDocumentMetadata

// required .Diadoc.Api.Proto.Documents.BilateralDocument.BilateralDocumentStatus DocumentStatus = 1 [default = UnknownBilateralDocumentStatus];
inline bool BilateralDocumentMetadata::has_documentstatus() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BilateralDocumentMetadata::set_has_documentstatus() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BilateralDocumentMetadata::clear_has_documentstatus() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BilateralDocumentMetadata::clear_documentstatus() {
  documentstatus_ = 0;
  clear_has_documentstatus();
}
inline ::Diadoc::Api::Proto::Documents::BilateralDocument::BilateralDocumentStatus BilateralDocumentMetadata::documentstatus() const {
  return static_cast< ::Diadoc::Api::Proto::Documents::BilateralDocument::BilateralDocumentStatus >(documentstatus_);
}
inline void BilateralDocumentMetadata::set_documentstatus(::Diadoc::Api::Proto::Documents::BilateralDocument::BilateralDocumentStatus value) {
  assert(::Diadoc::Api::Proto::Documents::BilateralDocument::BilateralDocumentStatus_IsValid(value));
  set_has_documentstatus();
  documentstatus_ = value;
}

// required .Diadoc.Api.Proto.Documents.ReceiptStatus ReceiptStatus = 2 [default = UnknownReceiptStatus];
inline bool BilateralDocumentMetadata::has_receiptstatus() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BilateralDocumentMetadata::set_has_receiptstatus() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BilateralDocumentMetadata::clear_has_receiptstatus() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BilateralDocumentMetadata::clear_receiptstatus() {
  receiptstatus_ = 0;
  clear_has_receiptstatus();
}
inline ::Diadoc::Api::Proto::Documents::ReceiptStatus BilateralDocumentMetadata::receiptstatus() const {
  return static_cast< ::Diadoc::Api::Proto::Documents::ReceiptStatus >(receiptstatus_);
}
inline void BilateralDocumentMetadata::set_receiptstatus(::Diadoc::Api::Proto::Documents::ReceiptStatus value) {
  assert(::Diadoc::Api::Proto::Documents::ReceiptStatus_IsValid(value));
  set_has_receiptstatus();
  receiptstatus_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace BilateralDocument
}  // namespace Documents
}  // namespace Proto
}  // namespace Api
}  // namespace Diadoc

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Diadoc::Api::Proto::Documents::BilateralDocument::BilateralDocumentStatus>() {
  return ::Diadoc::Api::Proto::Documents::BilateralDocument::BilateralDocumentStatus_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_Documents_2fBilateralDocument_2eproto__INCLUDED
