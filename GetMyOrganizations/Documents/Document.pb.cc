// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Documents/Document.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Document.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace Diadoc {
namespace Api {
namespace Proto {
namespace Documents {

namespace {

const ::google::protobuf::Descriptor* Document_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Document_reflection_ = NULL;
const ::google::protobuf::Descriptor* ResolutionStatus_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ResolutionStatus_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ResolutionStatusType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* RevocationStatus_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_Documents_2fDocument_2eproto() {
  protobuf_AddDesc_Documents_2fDocument_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "Documents/Document.proto");
  GOOGLE_CHECK(file != NULL);
  Document_descriptor_ = file->message_type(0);
  static const int Document_offsets_[41] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Document, indexkey_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Document, messageid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Document, entityid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Document, creationtimestampticks_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Document, counteragentboxid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Document, documenttype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Document, initialdocumentids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Document, subordinatedocumentids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Document, content_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Document, filename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Document, documentdate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Document, documentnumber_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Document, nonformalizeddocumentmetadata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Document, invoicemetadata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Document, trustconnectionrequestmetadata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Document, torg12metadata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Document, invoicerevisionmetadata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Document, invoicecorrectionmetadata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Document, invoicecorrectionrevisionmetadata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Document, acceptancecertificatemetadata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Document, proformainvoicemetadata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Document, xmltorg12metadata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Document, xmlacceptancecertificatemetadata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Document, isdeleted_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Document, departmentid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Document, istest_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Document, fromdepartmentid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Document, todepartmentid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Document, pricelistmetadata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Document, customdocumentid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Document, resolutionstatus_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Document, revocationstatus_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Document, sendtimestampticks_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Document, deliverytimestampticks_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Document, forwarddocumentevents_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Document, pricelistagreementmetadata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Document, certificateregistrymetadata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Document, reconciliationactmetadata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Document, contractmetadata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Document, torg13metadata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Document, servicedetailsmetadata_),
  };
  Document_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Document_descriptor_,
      Document::default_instance_,
      Document_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Document, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Document, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Document));
  ResolutionStatus_descriptor_ = file->message_type(1);
  static const int ResolutionStatus_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResolutionStatus, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResolutionStatus, target_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResolutionStatus, authoruserid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResolutionStatus, authorfio_),
  };
  ResolutionStatus_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ResolutionStatus_descriptor_,
      ResolutionStatus::default_instance_,
      ResolutionStatus_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResolutionStatus, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResolutionStatus, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ResolutionStatus));
  ResolutionStatusType_descriptor_ = file->enum_type(0);
  RevocationStatus_descriptor_ = file->enum_type(1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_Documents_2fDocument_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Document_descriptor_, &Document::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ResolutionStatus_descriptor_, &ResolutionStatus::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_Documents_2fDocument_2eproto() {
  delete Document::default_instance_;
  delete Document_reflection_;
  delete ResolutionStatus::default_instance_;
  delete ResolutionStatus_reflection_;
}

void protobuf_AddDesc_Documents_2fDocument_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::Diadoc::Api::Proto::protobuf_AddDesc_Content_2eproto();
  ::Diadoc::Api::Proto::protobuf_AddDesc_DocumentId_2eproto();
  ::Diadoc::Api::Proto::protobuf_AddDesc_DocumentType_2eproto();
  ::Diadoc::Api::Proto::protobuf_AddDesc_ResolutionTarget_2eproto();
  ::Diadoc::Api::Proto::protobuf_AddDesc_ForwardDocumentEvent_2eproto();
  ::Diadoc::Api::Proto::Documents::InvoiceDocument::protobuf_AddDesc_Documents_2fInvoiceDocument_2eproto();
  ::Diadoc::Api::Proto::Documents::BilateralDocument::protobuf_AddDesc_Documents_2fBilateralDocument_2eproto();
  ::Diadoc::Api::Proto::Documents::UnilateralDocument::protobuf_AddDesc_Documents_2fUnilateralDocument_2eproto();
  ::Diadoc::Api::Proto::Documents::NonformalizedDocument::protobuf_AddDesc_Documents_2fNonformalizedDocument_2eproto();
  ::Diadoc::Api::Proto::Documents::AcceptanceCertificateDocument::protobuf_AddDesc_Documents_2fAcceptanceCertificateDocument_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\030Documents/Document.proto\022\032Diadoc.Api.P"
    "roto.Documents\032\rContent.proto\032\020DocumentI"
    "d.proto\032\022DocumentType.proto\032\026ResolutionT"
    "arget.proto\032\032ForwardDocumentEvent.proto\032"
    "\037Documents/InvoiceDocument.proto\032!Docume"
    "nts/BilateralDocument.proto\032\"Documents/U"
    "nilateralDocument.proto\032%Documents/Nonfo"
    "rmalizedDocument.proto\032-Documents/Accept"
    "anceCertificateDocument.proto\"\316\025\n\010Docume"
    "nt\022\020\n\010IndexKey\030\001 \001(\t\022\021\n\tMessageId\030\002 \002(\t\022"
    "\020\n\010EntityId\030\003 \002(\t\022\036\n\026CreationTimestampTi"
    "cks\030\004 \002(\020\022\031\n\021CounteragentBoxId\030\005 \001(\t\022I\n\014"
    "DocumentType\030\006 \001(\0162\036.Diadoc.Api.Proto.Do"
    "cumentType:\023UnknownDocumentType\0228\n\022Initi"
    "alDocumentIds\030\007 \003(\0132\034.Diadoc.Api.Proto.D"
    "ocumentId\022<\n\026SubordinateDocumentIds\030\010 \003("
    "\0132\034.Diadoc.Api.Proto.DocumentId\022*\n\007Conte"
    "nt\030\t \001(\0132\031.Diadoc.Api.Proto.Content\022\020\n\010F"
    "ileName\030\n \001(\t\022\024\n\014DocumentDate\030\013 \001(\t\022\026\n\016D"
    "ocumentNumber\030\014 \001(\t\022v\n\035NonformalizedDocu"
    "mentMetadata\030\r \001(\0132O.Diadoc.Api.Proto.Do"
    "cuments.NonformalizedDocument.Nonformali"
    "zedDocumentMetadata\022T\n\017InvoiceMetadata\030\016"
    " \001(\0132;.Diadoc.Api.Proto.Documents.Invoic"
    "eDocument.InvoiceMetadata\022t\n\036TrustConnec"
    "tionRequestMetadata\030\017 \001(\0132L.Diadoc.Api.P"
    "roto.Documents.BilateralDocument.TrustCo"
    "nnectionRequestMetadata\022[\n\016Torg12Metadat"
    "a\030\020 \001(\0132C.Diadoc.Api.Proto.Documents.Bil"
    "ateralDocument.BasicDocumentMetadata\022d\n\027"
    "InvoiceRevisionMetadata\030\021 \001(\0132C.Diadoc.A"
    "pi.Proto.Documents.InvoiceDocument.Invoi"
    "ceRevisionMetadata\022h\n\031InvoiceCorrectionM"
    "etadata\030\022 \001(\0132E.Diadoc.Api.Proto.Documen"
    "ts.InvoiceDocument.InvoiceCorrectionMeta"
    "data\022x\n!InvoiceCorrectionRevisionMetadat"
    "a\030\023 \001(\0132M.Diadoc.Api.Proto.Documents.Inv"
    "oiceDocument.InvoiceCorrectionRevisionMe"
    "tadata\022~\n\035AcceptanceCertificateMetadata\030"
    "\024 \001(\0132W.Diadoc.Api.Proto.Documents.Accep"
    "tanceCertificateDocument.AcceptanceCerti"
    "ficateMetadata\022g\n\027ProformaInvoiceMetadat"
    "a\030\025 \001(\0132F.Diadoc.Api.Proto.Documents.Uni"
    "lateralDocument.ProformaInvoiceMetadata\022"
    "^\n\021XmlTorg12Metadata\030\026 \001(\0132C.Diadoc.Api."
    "Proto.Documents.BilateralDocument.BasicD"
    "ocumentMetadata\022m\n XmlAcceptanceCertific"
    "ateMetadata\030\027 \001(\0132C.Diadoc.Api.Proto.Doc"
    "uments.BilateralDocument.BasicDocumentMe"
    "tadata\022\030\n\tIsDeleted\030\030 \001(\010:\005false\022\024\n\014Depa"
    "rtmentId\030\031 \001(\t\022\025\n\006IsTest\030\032 \001(\010:\005false\022\030\n"
    "\020FromDepartmentId\030\033 \001(\t\022\026\n\016ToDepartmentI"
    "d\030\034 \001(\t\022Z\n\021PriceListMetadata\030\035 \001(\0132\?.Dia"
    "doc.Api.Proto.Documents.BilateralDocumen"
    "t.PriceListMetadata\022\030\n\020CustomDocumentId\030"
    "\036 \001(\t\022F\n\020ResolutionStatus\030\037 \001(\0132,.Diadoc"
    ".Api.Proto.Documents.ResolutionStatus\022_\n"
    "\020RevocationStatus\030  \001(\0162,.Diadoc.Api.Pro"
    "to.Documents.RevocationStatus:\027UnknownRe"
    "vocationStatus\022\032\n\022SendTimestampTicks\030! \001"
    "(\020\022\036\n\026DeliveryTimestampTicks\030\" \001(\020\022E\n\025Fo"
    "rwardDocumentEvents\030# \003(\0132&.Diadoc.Api.P"
    "roto.ForwardDocumentEvent\022k\n\032PriceListAg"
    "reementMetadata\030$ \001(\0132G.Diadoc.Api.Proto"
    ".Documents.BilateralDocument.BilateralDo"
    "cumentMetadata\022l\n\033CertificateRegistryMet"
    "adata\030% \001(\0132G.Diadoc.Api.Proto.Documents"
    ".BilateralDocument.BilateralDocumentMeta"
    "data\022j\n\031ReconciliationActMetadata\030& \001(\0132"
    "G.Diadoc.Api.Proto.Documents.BilateralDo"
    "cument.BilateralDocumentMetadata\022X\n\020Cont"
    "ractMetadata\030\' \001(\0132>.Diadoc.Api.Proto.Do"
    "cuments.BilateralDocument.ContractMetada"
    "ta\022[\n\016Torg13Metadata\030( \001(\0132C.Diadoc.Api."
    "Proto.Documents.BilateralDocument.BasicD"
    "ocumentMetadata\022e\n\026ServiceDetailsMetadat"
    "a\030) \001(\0132E.Diadoc.Api.Proto.Documents.Uni"
    "lateralDocument.ServiceDetailsMetadata\"\310"
    "\001\n\020ResolutionStatus\022W\n\004Type\030\001 \001(\01620.Diad"
    "oc.Api.Proto.Documents.ResolutionStatusT"
    "ype:\027UnknownResolutionStatus\0222\n\006Target\030\002"
    " \001(\0132\".Diadoc.Api.Proto.ResolutionTarget"
    "\022\024\n\014AuthorUserId\030\003 \002(\t\022\021\n\tAuthorFIO\030\004 \002("
    "\t*\254\001\n\024ResolutionStatusType\022$\n\027UnknownRes"
    "olutionStatus\020\377\377\377\377\377\377\377\377\377\001\022\010\n\004None\020\000\022\014\n\010Ap"
    "proved\020\001\022\017\n\013Disapproved\020\002\022\030\n\024Approvement"
    "Requested\020\003\022\026\n\022SignatureRequested\020\004\022\023\n\017S"
    "ignatureDenied\020\005*\262\001\n\020RevocationStatus\022\033\n"
    "\027UnknownRevocationStatus\020\000\022\030\n\024Revocation"
    "StatusNone\020\001\022\035\n\031RevocationIsRequestedByM"
    "e\020\002\022\030\n\024RequestsMyRevocation\020\003\022\026\n\022Revocat"
    "ionAccepted\020\004\022\026\n\022RevocationRejected\020\005", 3677);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Documents/Document.proto", &protobuf_RegisterTypes);
  Document::default_instance_ = new Document();
  ResolutionStatus::default_instance_ = new ResolutionStatus();
  Document::default_instance_->InitAsDefaultInstance();
  ResolutionStatus::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_Documents_2fDocument_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_Documents_2fDocument_2eproto {
  StaticDescriptorInitializer_Documents_2fDocument_2eproto() {
    protobuf_AddDesc_Documents_2fDocument_2eproto();
  }
} static_descriptor_initializer_Documents_2fDocument_2eproto_;
const ::google::protobuf::EnumDescriptor* ResolutionStatusType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResolutionStatusType_descriptor_;
}
bool ResolutionStatusType_IsValid(int value) {
  switch(value) {
    case -1:
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* RevocationStatus_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RevocationStatus_descriptor_;
}
bool RevocationStatus_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int Document::kIndexKeyFieldNumber;
const int Document::kMessageIdFieldNumber;
const int Document::kEntityIdFieldNumber;
const int Document::kCreationTimestampTicksFieldNumber;
const int Document::kCounteragentBoxIdFieldNumber;
const int Document::kDocumentTypeFieldNumber;
const int Document::kInitialDocumentIdsFieldNumber;
const int Document::kSubordinateDocumentIdsFieldNumber;
const int Document::kContentFieldNumber;
const int Document::kFileNameFieldNumber;
const int Document::kDocumentDateFieldNumber;
const int Document::kDocumentNumberFieldNumber;
const int Document::kNonformalizedDocumentMetadataFieldNumber;
const int Document::kInvoiceMetadataFieldNumber;
const int Document::kTrustConnectionRequestMetadataFieldNumber;
const int Document::kTorg12MetadataFieldNumber;
const int Document::kInvoiceRevisionMetadataFieldNumber;
const int Document::kInvoiceCorrectionMetadataFieldNumber;
const int Document::kInvoiceCorrectionRevisionMetadataFieldNumber;
const int Document::kAcceptanceCertificateMetadataFieldNumber;
const int Document::kProformaInvoiceMetadataFieldNumber;
const int Document::kXmlTorg12MetadataFieldNumber;
const int Document::kXmlAcceptanceCertificateMetadataFieldNumber;
const int Document::kIsDeletedFieldNumber;
const int Document::kDepartmentIdFieldNumber;
const int Document::kIsTestFieldNumber;
const int Document::kFromDepartmentIdFieldNumber;
const int Document::kToDepartmentIdFieldNumber;
const int Document::kPriceListMetadataFieldNumber;
const int Document::kCustomDocumentIdFieldNumber;
const int Document::kResolutionStatusFieldNumber;
const int Document::kRevocationStatusFieldNumber;
const int Document::kSendTimestampTicksFieldNumber;
const int Document::kDeliveryTimestampTicksFieldNumber;
const int Document::kForwardDocumentEventsFieldNumber;
const int Document::kPriceListAgreementMetadataFieldNumber;
const int Document::kCertificateRegistryMetadataFieldNumber;
const int Document::kReconciliationActMetadataFieldNumber;
const int Document::kContractMetadataFieldNumber;
const int Document::kTorg13MetadataFieldNumber;
const int Document::kServiceDetailsMetadataFieldNumber;
#endif  // !_MSC_VER

Document::Document()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Document::InitAsDefaultInstance() {
  content_ = const_cast< ::Diadoc::Api::Proto::Content*>(&::Diadoc::Api::Proto::Content::default_instance());
  nonformalizeddocumentmetadata_ = const_cast< ::Diadoc::Api::Proto::Documents::NonformalizedDocument::NonformalizedDocumentMetadata*>(&::Diadoc::Api::Proto::Documents::NonformalizedDocument::NonformalizedDocumentMetadata::default_instance());
  invoicemetadata_ = const_cast< ::Diadoc::Api::Proto::Documents::InvoiceDocument::InvoiceMetadata*>(&::Diadoc::Api::Proto::Documents::InvoiceDocument::InvoiceMetadata::default_instance());
  trustconnectionrequestmetadata_ = const_cast< ::Diadoc::Api::Proto::Documents::BilateralDocument::TrustConnectionRequestMetadata*>(&::Diadoc::Api::Proto::Documents::BilateralDocument::TrustConnectionRequestMetadata::default_instance());
  torg12metadata_ = const_cast< ::Diadoc::Api::Proto::Documents::BilateralDocument::BasicDocumentMetadata*>(&::Diadoc::Api::Proto::Documents::BilateralDocument::BasicDocumentMetadata::default_instance());
  invoicerevisionmetadata_ = const_cast< ::Diadoc::Api::Proto::Documents::InvoiceDocument::InvoiceRevisionMetadata*>(&::Diadoc::Api::Proto::Documents::InvoiceDocument::InvoiceRevisionMetadata::default_instance());
  invoicecorrectionmetadata_ = const_cast< ::Diadoc::Api::Proto::Documents::InvoiceDocument::InvoiceCorrectionMetadata*>(&::Diadoc::Api::Proto::Documents::InvoiceDocument::InvoiceCorrectionMetadata::default_instance());
  invoicecorrectionrevisionmetadata_ = const_cast< ::Diadoc::Api::Proto::Documents::InvoiceDocument::InvoiceCorrectionRevisionMetadata*>(&::Diadoc::Api::Proto::Documents::InvoiceDocument::InvoiceCorrectionRevisionMetadata::default_instance());
  acceptancecertificatemetadata_ = const_cast< ::Diadoc::Api::Proto::Documents::AcceptanceCertificateDocument::AcceptanceCertificateMetadata*>(&::Diadoc::Api::Proto::Documents::AcceptanceCertificateDocument::AcceptanceCertificateMetadata::default_instance());
  proformainvoicemetadata_ = const_cast< ::Diadoc::Api::Proto::Documents::UnilateralDocument::ProformaInvoiceMetadata*>(&::Diadoc::Api::Proto::Documents::UnilateralDocument::ProformaInvoiceMetadata::default_instance());
  xmltorg12metadata_ = const_cast< ::Diadoc::Api::Proto::Documents::BilateralDocument::BasicDocumentMetadata*>(&::Diadoc::Api::Proto::Documents::BilateralDocument::BasicDocumentMetadata::default_instance());
  xmlacceptancecertificatemetadata_ = const_cast< ::Diadoc::Api::Proto::Documents::BilateralDocument::BasicDocumentMetadata*>(&::Diadoc::Api::Proto::Documents::BilateralDocument::BasicDocumentMetadata::default_instance());
  pricelistmetadata_ = const_cast< ::Diadoc::Api::Proto::Documents::BilateralDocument::PriceListMetadata*>(&::Diadoc::Api::Proto::Documents::BilateralDocument::PriceListMetadata::default_instance());
  resolutionstatus_ = const_cast< ::Diadoc::Api::Proto::Documents::ResolutionStatus*>(&::Diadoc::Api::Proto::Documents::ResolutionStatus::default_instance());
  pricelistagreementmetadata_ = const_cast< ::Diadoc::Api::Proto::Documents::BilateralDocument::BilateralDocumentMetadata*>(&::Diadoc::Api::Proto::Documents::BilateralDocument::BilateralDocumentMetadata::default_instance());
  certificateregistrymetadata_ = const_cast< ::Diadoc::Api::Proto::Documents::BilateralDocument::BilateralDocumentMetadata*>(&::Diadoc::Api::Proto::Documents::BilateralDocument::BilateralDocumentMetadata::default_instance());
  reconciliationactmetadata_ = const_cast< ::Diadoc::Api::Proto::Documents::BilateralDocument::BilateralDocumentMetadata*>(&::Diadoc::Api::Proto::Documents::BilateralDocument::BilateralDocumentMetadata::default_instance());
  contractmetadata_ = const_cast< ::Diadoc::Api::Proto::Documents::BilateralDocument::ContractMetadata*>(&::Diadoc::Api::Proto::Documents::BilateralDocument::ContractMetadata::default_instance());
  torg13metadata_ = const_cast< ::Diadoc::Api::Proto::Documents::BilateralDocument::BasicDocumentMetadata*>(&::Diadoc::Api::Proto::Documents::BilateralDocument::BasicDocumentMetadata::default_instance());
  servicedetailsmetadata_ = const_cast< ::Diadoc::Api::Proto::Documents::UnilateralDocument::ServiceDetailsMetadata*>(&::Diadoc::Api::Proto::Documents::UnilateralDocument::ServiceDetailsMetadata::default_instance());
}

Document::Document(const Document& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Document::SharedCtor() {
  _cached_size_ = 0;
  indexkey_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  messageid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  entityid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  creationtimestampticks_ = GOOGLE_LONGLONG(0);
  counteragentboxid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  documenttype_ = -1;
  content_ = NULL;
  filename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  documentdate_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  documentnumber_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  nonformalizeddocumentmetadata_ = NULL;
  invoicemetadata_ = NULL;
  trustconnectionrequestmetadata_ = NULL;
  torg12metadata_ = NULL;
  invoicerevisionmetadata_ = NULL;
  invoicecorrectionmetadata_ = NULL;
  invoicecorrectionrevisionmetadata_ = NULL;
  acceptancecertificatemetadata_ = NULL;
  proformainvoicemetadata_ = NULL;
  xmltorg12metadata_ = NULL;
  xmlacceptancecertificatemetadata_ = NULL;
  isdeleted_ = false;
  departmentid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  istest_ = false;
  fromdepartmentid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  todepartmentid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  pricelistmetadata_ = NULL;
  customdocumentid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  resolutionstatus_ = NULL;
  revocationstatus_ = 0;
  sendtimestampticks_ = GOOGLE_LONGLONG(0);
  deliverytimestampticks_ = GOOGLE_LONGLONG(0);
  pricelistagreementmetadata_ = NULL;
  certificateregistrymetadata_ = NULL;
  reconciliationactmetadata_ = NULL;
  contractmetadata_ = NULL;
  torg13metadata_ = NULL;
  servicedetailsmetadata_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Document::~Document() {
  SharedDtor();
}

void Document::SharedDtor() {
  if (indexkey_ != &::google::protobuf::internal::kEmptyString) {
    delete indexkey_;
  }
  if (messageid_ != &::google::protobuf::internal::kEmptyString) {
    delete messageid_;
  }
  if (entityid_ != &::google::protobuf::internal::kEmptyString) {
    delete entityid_;
  }
  if (counteragentboxid_ != &::google::protobuf::internal::kEmptyString) {
    delete counteragentboxid_;
  }
  if (filename_ != &::google::protobuf::internal::kEmptyString) {
    delete filename_;
  }
  if (documentdate_ != &::google::protobuf::internal::kEmptyString) {
    delete documentdate_;
  }
  if (documentnumber_ != &::google::protobuf::internal::kEmptyString) {
    delete documentnumber_;
  }
  if (departmentid_ != &::google::protobuf::internal::kEmptyString) {
    delete departmentid_;
  }
  if (fromdepartmentid_ != &::google::protobuf::internal::kEmptyString) {
    delete fromdepartmentid_;
  }
  if (todepartmentid_ != &::google::protobuf::internal::kEmptyString) {
    delete todepartmentid_;
  }
  if (customdocumentid_ != &::google::protobuf::internal::kEmptyString) {
    delete customdocumentid_;
  }
  if (this != default_instance_) {
    delete content_;
    delete nonformalizeddocumentmetadata_;
    delete invoicemetadata_;
    delete trustconnectionrequestmetadata_;
    delete torg12metadata_;
    delete invoicerevisionmetadata_;
    delete invoicecorrectionmetadata_;
    delete invoicecorrectionrevisionmetadata_;
    delete acceptancecertificatemetadata_;
    delete proformainvoicemetadata_;
    delete xmltorg12metadata_;
    delete xmlacceptancecertificatemetadata_;
    delete pricelistmetadata_;
    delete resolutionstatus_;
    delete pricelistagreementmetadata_;
    delete certificateregistrymetadata_;
    delete reconciliationactmetadata_;
    delete contractmetadata_;
    delete torg13metadata_;
    delete servicedetailsmetadata_;
  }
}

void Document::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Document::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Document_descriptor_;
}

const Document& Document::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Documents_2fDocument_2eproto();
  return *default_instance_;
}

Document* Document::default_instance_ = NULL;

Document* Document::New() const {
  return new Document;
}

void Document::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_indexkey()) {
      if (indexkey_ != &::google::protobuf::internal::kEmptyString) {
        indexkey_->clear();
      }
    }
    if (has_messageid()) {
      if (messageid_ != &::google::protobuf::internal::kEmptyString) {
        messageid_->clear();
      }
    }
    if (has_entityid()) {
      if (entityid_ != &::google::protobuf::internal::kEmptyString) {
        entityid_->clear();
      }
    }
    creationtimestampticks_ = GOOGLE_LONGLONG(0);
    if (has_counteragentboxid()) {
      if (counteragentboxid_ != &::google::protobuf::internal::kEmptyString) {
        counteragentboxid_->clear();
      }
    }
    documenttype_ = -1;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_content()) {
      if (content_ != NULL) content_->::Diadoc::Api::Proto::Content::Clear();
    }
    if (has_filename()) {
      if (filename_ != &::google::protobuf::internal::kEmptyString) {
        filename_->clear();
      }
    }
    if (has_documentdate()) {
      if (documentdate_ != &::google::protobuf::internal::kEmptyString) {
        documentdate_->clear();
      }
    }
    if (has_documentnumber()) {
      if (documentnumber_ != &::google::protobuf::internal::kEmptyString) {
        documentnumber_->clear();
      }
    }
    if (has_nonformalizeddocumentmetadata()) {
      if (nonformalizeddocumentmetadata_ != NULL) nonformalizeddocumentmetadata_->::Diadoc::Api::Proto::Documents::NonformalizedDocument::NonformalizedDocumentMetadata::Clear();
    }
    if (has_invoicemetadata()) {
      if (invoicemetadata_ != NULL) invoicemetadata_->::Diadoc::Api::Proto::Documents::InvoiceDocument::InvoiceMetadata::Clear();
    }
    if (has_trustconnectionrequestmetadata()) {
      if (trustconnectionrequestmetadata_ != NULL) trustconnectionrequestmetadata_->::Diadoc::Api::Proto::Documents::BilateralDocument::TrustConnectionRequestMetadata::Clear();
    }
    if (has_torg12metadata()) {
      if (torg12metadata_ != NULL) torg12metadata_->::Diadoc::Api::Proto::Documents::BilateralDocument::BasicDocumentMetadata::Clear();
    }
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (has_invoicerevisionmetadata()) {
      if (invoicerevisionmetadata_ != NULL) invoicerevisionmetadata_->::Diadoc::Api::Proto::Documents::InvoiceDocument::InvoiceRevisionMetadata::Clear();
    }
    if (has_invoicecorrectionmetadata()) {
      if (invoicecorrectionmetadata_ != NULL) invoicecorrectionmetadata_->::Diadoc::Api::Proto::Documents::InvoiceDocument::InvoiceCorrectionMetadata::Clear();
    }
    if (has_invoicecorrectionrevisionmetadata()) {
      if (invoicecorrectionrevisionmetadata_ != NULL) invoicecorrectionrevisionmetadata_->::Diadoc::Api::Proto::Documents::InvoiceDocument::InvoiceCorrectionRevisionMetadata::Clear();
    }
    if (has_acceptancecertificatemetadata()) {
      if (acceptancecertificatemetadata_ != NULL) acceptancecertificatemetadata_->::Diadoc::Api::Proto::Documents::AcceptanceCertificateDocument::AcceptanceCertificateMetadata::Clear();
    }
    if (has_proformainvoicemetadata()) {
      if (proformainvoicemetadata_ != NULL) proformainvoicemetadata_->::Diadoc::Api::Proto::Documents::UnilateralDocument::ProformaInvoiceMetadata::Clear();
    }
    if (has_xmltorg12metadata()) {
      if (xmltorg12metadata_ != NULL) xmltorg12metadata_->::Diadoc::Api::Proto::Documents::BilateralDocument::BasicDocumentMetadata::Clear();
    }
    if (has_xmlacceptancecertificatemetadata()) {
      if (xmlacceptancecertificatemetadata_ != NULL) xmlacceptancecertificatemetadata_->::Diadoc::Api::Proto::Documents::BilateralDocument::BasicDocumentMetadata::Clear();
    }
    isdeleted_ = false;
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (has_departmentid()) {
      if (departmentid_ != &::google::protobuf::internal::kEmptyString) {
        departmentid_->clear();
      }
    }
    istest_ = false;
    if (has_fromdepartmentid()) {
      if (fromdepartmentid_ != &::google::protobuf::internal::kEmptyString) {
        fromdepartmentid_->clear();
      }
    }
    if (has_todepartmentid()) {
      if (todepartmentid_ != &::google::protobuf::internal::kEmptyString) {
        todepartmentid_->clear();
      }
    }
    if (has_pricelistmetadata()) {
      if (pricelistmetadata_ != NULL) pricelistmetadata_->::Diadoc::Api::Proto::Documents::BilateralDocument::PriceListMetadata::Clear();
    }
    if (has_customdocumentid()) {
      if (customdocumentid_ != &::google::protobuf::internal::kEmptyString) {
        customdocumentid_->clear();
      }
    }
    if (has_resolutionstatus()) {
      if (resolutionstatus_ != NULL) resolutionstatus_->::Diadoc::Api::Proto::Documents::ResolutionStatus::Clear();
    }
    revocationstatus_ = 0;
  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    sendtimestampticks_ = GOOGLE_LONGLONG(0);
    deliverytimestampticks_ = GOOGLE_LONGLONG(0);
    if (has_pricelistagreementmetadata()) {
      if (pricelistagreementmetadata_ != NULL) pricelistagreementmetadata_->::Diadoc::Api::Proto::Documents::BilateralDocument::BilateralDocumentMetadata::Clear();
    }
    if (has_certificateregistrymetadata()) {
      if (certificateregistrymetadata_ != NULL) certificateregistrymetadata_->::Diadoc::Api::Proto::Documents::BilateralDocument::BilateralDocumentMetadata::Clear();
    }
    if (has_reconciliationactmetadata()) {
      if (reconciliationactmetadata_ != NULL) reconciliationactmetadata_->::Diadoc::Api::Proto::Documents::BilateralDocument::BilateralDocumentMetadata::Clear();
    }
    if (has_contractmetadata()) {
      if (contractmetadata_ != NULL) contractmetadata_->::Diadoc::Api::Proto::Documents::BilateralDocument::ContractMetadata::Clear();
    }
    if (has_torg13metadata()) {
      if (torg13metadata_ != NULL) torg13metadata_->::Diadoc::Api::Proto::Documents::BilateralDocument::BasicDocumentMetadata::Clear();
    }
  }
  if (_has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    if (has_servicedetailsmetadata()) {
      if (servicedetailsmetadata_ != NULL) servicedetailsmetadata_->::Diadoc::Api::Proto::Documents::UnilateralDocument::ServiceDetailsMetadata::Clear();
    }
  }
  initialdocumentids_.Clear();
  subordinatedocumentids_.Clear();
  forwarddocumentevents_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Document::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string IndexKey = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_indexkey()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->indexkey().data(), this->indexkey().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_MessageId;
        break;
      }

      // required string MessageId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_MessageId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_messageid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->messageid().data(), this->messageid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_EntityId;
        break;
      }

      // required string EntityId = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_EntityId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_entityid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->entityid().data(), this->entityid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_CreationTimestampTicks;
        break;
      }

      // required sfixed64 CreationTimestampTicks = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_CreationTimestampTicks:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &creationtimestampticks_)));
          set_has_creationtimestampticks();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_CounteragentBoxId;
        break;
      }

      // optional string CounteragentBoxId = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_CounteragentBoxId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_counteragentboxid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->counteragentboxid().data(), this->counteragentboxid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_DocumentType;
        break;
      }

      // optional .Diadoc.Api.Proto.DocumentType DocumentType = 6 [default = UnknownDocumentType];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_DocumentType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Diadoc::Api::Proto::DocumentType_IsValid(value)) {
            set_documenttype(static_cast< ::Diadoc::Api::Proto::DocumentType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(6, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_InitialDocumentIds;
        break;
      }

      // repeated .Diadoc.Api.Proto.DocumentId InitialDocumentIds = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_InitialDocumentIds:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_initialdocumentids()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_InitialDocumentIds;
        if (input->ExpectTag(66)) goto parse_SubordinateDocumentIds;
        break;
      }

      // repeated .Diadoc.Api.Proto.DocumentId SubordinateDocumentIds = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_SubordinateDocumentIds:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_subordinatedocumentids()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_SubordinateDocumentIds;
        if (input->ExpectTag(74)) goto parse_Content;
        break;
      }

      // optional .Diadoc.Api.Proto.Content Content = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_content()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_FileName;
        break;
      }

      // optional string FileName = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_FileName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_filename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->filename().data(), this->filename().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_DocumentDate;
        break;
      }

      // optional string DocumentDate = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_DocumentDate:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_documentdate()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->documentdate().data(), this->documentdate().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_DocumentNumber;
        break;
      }

      // optional string DocumentNumber = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_DocumentNumber:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_documentnumber()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->documentnumber().data(), this->documentnumber().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_NonformalizedDocumentMetadata;
        break;
      }

      // optional .Diadoc.Api.Proto.Documents.NonformalizedDocument.NonformalizedDocumentMetadata NonformalizedDocumentMetadata = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_NonformalizedDocumentMetadata:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_nonformalizeddocumentmetadata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_InvoiceMetadata;
        break;
      }

      // optional .Diadoc.Api.Proto.Documents.InvoiceDocument.InvoiceMetadata InvoiceMetadata = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_InvoiceMetadata:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_invoicemetadata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_TrustConnectionRequestMetadata;
        break;
      }

      // optional .Diadoc.Api.Proto.Documents.BilateralDocument.TrustConnectionRequestMetadata TrustConnectionRequestMetadata = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_TrustConnectionRequestMetadata:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_trustconnectionrequestmetadata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(130)) goto parse_Torg12Metadata;
        break;
      }

      // optional .Diadoc.Api.Proto.Documents.BilateralDocument.BasicDocumentMetadata Torg12Metadata = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Torg12Metadata:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_torg12metadata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(138)) goto parse_InvoiceRevisionMetadata;
        break;
      }

      // optional .Diadoc.Api.Proto.Documents.InvoiceDocument.InvoiceRevisionMetadata InvoiceRevisionMetadata = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_InvoiceRevisionMetadata:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_invoicerevisionmetadata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(146)) goto parse_InvoiceCorrectionMetadata;
        break;
      }

      // optional .Diadoc.Api.Proto.Documents.InvoiceDocument.InvoiceCorrectionMetadata InvoiceCorrectionMetadata = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_InvoiceCorrectionMetadata:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_invoicecorrectionmetadata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(154)) goto parse_InvoiceCorrectionRevisionMetadata;
        break;
      }

      // optional .Diadoc.Api.Proto.Documents.InvoiceDocument.InvoiceCorrectionRevisionMetadata InvoiceCorrectionRevisionMetadata = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_InvoiceCorrectionRevisionMetadata:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_invoicecorrectionrevisionmetadata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(162)) goto parse_AcceptanceCertificateMetadata;
        break;
      }

      // optional .Diadoc.Api.Proto.Documents.AcceptanceCertificateDocument.AcceptanceCertificateMetadata AcceptanceCertificateMetadata = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_AcceptanceCertificateMetadata:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_acceptancecertificatemetadata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(170)) goto parse_ProformaInvoiceMetadata;
        break;
      }

      // optional .Diadoc.Api.Proto.Documents.UnilateralDocument.ProformaInvoiceMetadata ProformaInvoiceMetadata = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ProformaInvoiceMetadata:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_proformainvoicemetadata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(178)) goto parse_XmlTorg12Metadata;
        break;
      }

      // optional .Diadoc.Api.Proto.Documents.BilateralDocument.BasicDocumentMetadata XmlTorg12Metadata = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_XmlTorg12Metadata:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_xmltorg12metadata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(186)) goto parse_XmlAcceptanceCertificateMetadata;
        break;
      }

      // optional .Diadoc.Api.Proto.Documents.BilateralDocument.BasicDocumentMetadata XmlAcceptanceCertificateMetadata = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_XmlAcceptanceCertificateMetadata:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_xmlacceptancecertificatemetadata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(192)) goto parse_IsDeleted;
        break;
      }

      // optional bool IsDeleted = 24 [default = false];
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_IsDeleted:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isdeleted_)));
          set_has_isdeleted();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(202)) goto parse_DepartmentId;
        break;
      }

      // optional string DepartmentId = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_DepartmentId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_departmentid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->departmentid().data(), this->departmentid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(208)) goto parse_IsTest;
        break;
      }

      // optional bool IsTest = 26 [default = false];
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_IsTest:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &istest_)));
          set_has_istest();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(218)) goto parse_FromDepartmentId;
        break;
      }

      // optional string FromDepartmentId = 27;
      case 27: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_FromDepartmentId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fromdepartmentid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->fromdepartmentid().data(), this->fromdepartmentid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(226)) goto parse_ToDepartmentId;
        break;
      }

      // optional string ToDepartmentId = 28;
      case 28: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ToDepartmentId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_todepartmentid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->todepartmentid().data(), this->todepartmentid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(234)) goto parse_PriceListMetadata;
        break;
      }

      // optional .Diadoc.Api.Proto.Documents.BilateralDocument.PriceListMetadata PriceListMetadata = 29;
      case 29: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_PriceListMetadata:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pricelistmetadata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(242)) goto parse_CustomDocumentId;
        break;
      }

      // optional string CustomDocumentId = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_CustomDocumentId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_customdocumentid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->customdocumentid().data(), this->customdocumentid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(250)) goto parse_ResolutionStatus;
        break;
      }

      // optional .Diadoc.Api.Proto.Documents.ResolutionStatus ResolutionStatus = 31;
      case 31: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ResolutionStatus:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_resolutionstatus()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(256)) goto parse_RevocationStatus;
        break;
      }

      // optional .Diadoc.Api.Proto.Documents.RevocationStatus RevocationStatus = 32 [default = UnknownRevocationStatus];
      case 32: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_RevocationStatus:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Diadoc::Api::Proto::Documents::RevocationStatus_IsValid(value)) {
            set_revocationstatus(static_cast< ::Diadoc::Api::Proto::Documents::RevocationStatus >(value));
          } else {
            mutable_unknown_fields()->AddVarint(32, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(265)) goto parse_SendTimestampTicks;
        break;
      }

      // optional sfixed64 SendTimestampTicks = 33;
      case 33: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_SendTimestampTicks:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &sendtimestampticks_)));
          set_has_sendtimestampticks();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(273)) goto parse_DeliveryTimestampTicks;
        break;
      }

      // optional sfixed64 DeliveryTimestampTicks = 34;
      case 34: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_DeliveryTimestampTicks:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &deliverytimestampticks_)));
          set_has_deliverytimestampticks();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(282)) goto parse_ForwardDocumentEvents;
        break;
      }

      // repeated .Diadoc.Api.Proto.ForwardDocumentEvent ForwardDocumentEvents = 35;
      case 35: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ForwardDocumentEvents:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_forwarddocumentevents()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(282)) goto parse_ForwardDocumentEvents;
        if (input->ExpectTag(290)) goto parse_PriceListAgreementMetadata;
        break;
      }

      // optional .Diadoc.Api.Proto.Documents.BilateralDocument.BilateralDocumentMetadata PriceListAgreementMetadata = 36;
      case 36: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_PriceListAgreementMetadata:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pricelistagreementmetadata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(298)) goto parse_CertificateRegistryMetadata;
        break;
      }

      // optional .Diadoc.Api.Proto.Documents.BilateralDocument.BilateralDocumentMetadata CertificateRegistryMetadata = 37;
      case 37: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_CertificateRegistryMetadata:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_certificateregistrymetadata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(306)) goto parse_ReconciliationActMetadata;
        break;
      }

      // optional .Diadoc.Api.Proto.Documents.BilateralDocument.BilateralDocumentMetadata ReconciliationActMetadata = 38;
      case 38: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ReconciliationActMetadata:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_reconciliationactmetadata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(314)) goto parse_ContractMetadata;
        break;
      }

      // optional .Diadoc.Api.Proto.Documents.BilateralDocument.ContractMetadata ContractMetadata = 39;
      case 39: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ContractMetadata:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_contractmetadata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(322)) goto parse_Torg13Metadata;
        break;
      }

      // optional .Diadoc.Api.Proto.Documents.BilateralDocument.BasicDocumentMetadata Torg13Metadata = 40;
      case 40: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Torg13Metadata:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_torg13metadata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(330)) goto parse_ServiceDetailsMetadata;
        break;
      }

      // optional .Diadoc.Api.Proto.Documents.UnilateralDocument.ServiceDetailsMetadata ServiceDetailsMetadata = 41;
      case 41: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ServiceDetailsMetadata:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_servicedetailsmetadata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Document::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string IndexKey = 1;
  if (has_indexkey()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->indexkey().data(), this->indexkey().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->indexkey(), output);
  }

  // required string MessageId = 2;
  if (has_messageid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->messageid().data(), this->messageid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->messageid(), output);
  }

  // required string EntityId = 3;
  if (has_entityid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->entityid().data(), this->entityid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->entityid(), output);
  }

  // required sfixed64 CreationTimestampTicks = 4;
  if (has_creationtimestampticks()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(4, this->creationtimestampticks(), output);
  }

  // optional string CounteragentBoxId = 5;
  if (has_counteragentboxid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->counteragentboxid().data(), this->counteragentboxid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->counteragentboxid(), output);
  }

  // optional .Diadoc.Api.Proto.DocumentType DocumentType = 6 [default = UnknownDocumentType];
  if (has_documenttype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->documenttype(), output);
  }

  // repeated .Diadoc.Api.Proto.DocumentId InitialDocumentIds = 7;
  for (int i = 0; i < this->initialdocumentids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->initialdocumentids(i), output);
  }

  // repeated .Diadoc.Api.Proto.DocumentId SubordinateDocumentIds = 8;
  for (int i = 0; i < this->subordinatedocumentids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->subordinatedocumentids(i), output);
  }

  // optional .Diadoc.Api.Proto.Content Content = 9;
  if (has_content()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->content(), output);
  }

  // optional string FileName = 10;
  if (has_filename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->filename().data(), this->filename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->filename(), output);
  }

  // optional string DocumentDate = 11;
  if (has_documentdate()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->documentdate().data(), this->documentdate().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      11, this->documentdate(), output);
  }

  // optional string DocumentNumber = 12;
  if (has_documentnumber()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->documentnumber().data(), this->documentnumber().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      12, this->documentnumber(), output);
  }

  // optional .Diadoc.Api.Proto.Documents.NonformalizedDocument.NonformalizedDocumentMetadata NonformalizedDocumentMetadata = 13;
  if (has_nonformalizeddocumentmetadata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->nonformalizeddocumentmetadata(), output);
  }

  // optional .Diadoc.Api.Proto.Documents.InvoiceDocument.InvoiceMetadata InvoiceMetadata = 14;
  if (has_invoicemetadata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, this->invoicemetadata(), output);
  }

  // optional .Diadoc.Api.Proto.Documents.BilateralDocument.TrustConnectionRequestMetadata TrustConnectionRequestMetadata = 15;
  if (has_trustconnectionrequestmetadata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, this->trustconnectionrequestmetadata(), output);
  }

  // optional .Diadoc.Api.Proto.Documents.BilateralDocument.BasicDocumentMetadata Torg12Metadata = 16;
  if (has_torg12metadata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, this->torg12metadata(), output);
  }

  // optional .Diadoc.Api.Proto.Documents.InvoiceDocument.InvoiceRevisionMetadata InvoiceRevisionMetadata = 17;
  if (has_invoicerevisionmetadata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      17, this->invoicerevisionmetadata(), output);
  }

  // optional .Diadoc.Api.Proto.Documents.InvoiceDocument.InvoiceCorrectionMetadata InvoiceCorrectionMetadata = 18;
  if (has_invoicecorrectionmetadata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      18, this->invoicecorrectionmetadata(), output);
  }

  // optional .Diadoc.Api.Proto.Documents.InvoiceDocument.InvoiceCorrectionRevisionMetadata InvoiceCorrectionRevisionMetadata = 19;
  if (has_invoicecorrectionrevisionmetadata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      19, this->invoicecorrectionrevisionmetadata(), output);
  }

  // optional .Diadoc.Api.Proto.Documents.AcceptanceCertificateDocument.AcceptanceCertificateMetadata AcceptanceCertificateMetadata = 20;
  if (has_acceptancecertificatemetadata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      20, this->acceptancecertificatemetadata(), output);
  }

  // optional .Diadoc.Api.Proto.Documents.UnilateralDocument.ProformaInvoiceMetadata ProformaInvoiceMetadata = 21;
  if (has_proformainvoicemetadata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      21, this->proformainvoicemetadata(), output);
  }

  // optional .Diadoc.Api.Proto.Documents.BilateralDocument.BasicDocumentMetadata XmlTorg12Metadata = 22;
  if (has_xmltorg12metadata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      22, this->xmltorg12metadata(), output);
  }

  // optional .Diadoc.Api.Proto.Documents.BilateralDocument.BasicDocumentMetadata XmlAcceptanceCertificateMetadata = 23;
  if (has_xmlacceptancecertificatemetadata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      23, this->xmlacceptancecertificatemetadata(), output);
  }

  // optional bool IsDeleted = 24 [default = false];
  if (has_isdeleted()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(24, this->isdeleted(), output);
  }

  // optional string DepartmentId = 25;
  if (has_departmentid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->departmentid().data(), this->departmentid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      25, this->departmentid(), output);
  }

  // optional bool IsTest = 26 [default = false];
  if (has_istest()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(26, this->istest(), output);
  }

  // optional string FromDepartmentId = 27;
  if (has_fromdepartmentid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->fromdepartmentid().data(), this->fromdepartmentid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      27, this->fromdepartmentid(), output);
  }

  // optional string ToDepartmentId = 28;
  if (has_todepartmentid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->todepartmentid().data(), this->todepartmentid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      28, this->todepartmentid(), output);
  }

  // optional .Diadoc.Api.Proto.Documents.BilateralDocument.PriceListMetadata PriceListMetadata = 29;
  if (has_pricelistmetadata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      29, this->pricelistmetadata(), output);
  }

  // optional string CustomDocumentId = 30;
  if (has_customdocumentid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->customdocumentid().data(), this->customdocumentid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      30, this->customdocumentid(), output);
  }

  // optional .Diadoc.Api.Proto.Documents.ResolutionStatus ResolutionStatus = 31;
  if (has_resolutionstatus()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      31, this->resolutionstatus(), output);
  }

  // optional .Diadoc.Api.Proto.Documents.RevocationStatus RevocationStatus = 32 [default = UnknownRevocationStatus];
  if (has_revocationstatus()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      32, this->revocationstatus(), output);
  }

  // optional sfixed64 SendTimestampTicks = 33;
  if (has_sendtimestampticks()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(33, this->sendtimestampticks(), output);
  }

  // optional sfixed64 DeliveryTimestampTicks = 34;
  if (has_deliverytimestampticks()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(34, this->deliverytimestampticks(), output);
  }

  // repeated .Diadoc.Api.Proto.ForwardDocumentEvent ForwardDocumentEvents = 35;
  for (int i = 0; i < this->forwarddocumentevents_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      35, this->forwarddocumentevents(i), output);
  }

  // optional .Diadoc.Api.Proto.Documents.BilateralDocument.BilateralDocumentMetadata PriceListAgreementMetadata = 36;
  if (has_pricelistagreementmetadata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      36, this->pricelistagreementmetadata(), output);
  }

  // optional .Diadoc.Api.Proto.Documents.BilateralDocument.BilateralDocumentMetadata CertificateRegistryMetadata = 37;
  if (has_certificateregistrymetadata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      37, this->certificateregistrymetadata(), output);
  }

  // optional .Diadoc.Api.Proto.Documents.BilateralDocument.BilateralDocumentMetadata ReconciliationActMetadata = 38;
  if (has_reconciliationactmetadata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      38, this->reconciliationactmetadata(), output);
  }

  // optional .Diadoc.Api.Proto.Documents.BilateralDocument.ContractMetadata ContractMetadata = 39;
  if (has_contractmetadata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      39, this->contractmetadata(), output);
  }

  // optional .Diadoc.Api.Proto.Documents.BilateralDocument.BasicDocumentMetadata Torg13Metadata = 40;
  if (has_torg13metadata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      40, this->torg13metadata(), output);
  }

  // optional .Diadoc.Api.Proto.Documents.UnilateralDocument.ServiceDetailsMetadata ServiceDetailsMetadata = 41;
  if (has_servicedetailsmetadata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      41, this->servicedetailsmetadata(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Document::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string IndexKey = 1;
  if (has_indexkey()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->indexkey().data(), this->indexkey().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->indexkey(), target);
  }

  // required string MessageId = 2;
  if (has_messageid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->messageid().data(), this->messageid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->messageid(), target);
  }

  // required string EntityId = 3;
  if (has_entityid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->entityid().data(), this->entityid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->entityid(), target);
  }

  // required sfixed64 CreationTimestampTicks = 4;
  if (has_creationtimestampticks()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(4, this->creationtimestampticks(), target);
  }

  // optional string CounteragentBoxId = 5;
  if (has_counteragentboxid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->counteragentboxid().data(), this->counteragentboxid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->counteragentboxid(), target);
  }

  // optional .Diadoc.Api.Proto.DocumentType DocumentType = 6 [default = UnknownDocumentType];
  if (has_documenttype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->documenttype(), target);
  }

  // repeated .Diadoc.Api.Proto.DocumentId InitialDocumentIds = 7;
  for (int i = 0; i < this->initialdocumentids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->initialdocumentids(i), target);
  }

  // repeated .Diadoc.Api.Proto.DocumentId SubordinateDocumentIds = 8;
  for (int i = 0; i < this->subordinatedocumentids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->subordinatedocumentids(i), target);
  }

  // optional .Diadoc.Api.Proto.Content Content = 9;
  if (has_content()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->content(), target);
  }

  // optional string FileName = 10;
  if (has_filename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->filename().data(), this->filename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->filename(), target);
  }

  // optional string DocumentDate = 11;
  if (has_documentdate()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->documentdate().data(), this->documentdate().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->documentdate(), target);
  }

  // optional string DocumentNumber = 12;
  if (has_documentnumber()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->documentnumber().data(), this->documentnumber().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->documentnumber(), target);
  }

  // optional .Diadoc.Api.Proto.Documents.NonformalizedDocument.NonformalizedDocumentMetadata NonformalizedDocumentMetadata = 13;
  if (has_nonformalizeddocumentmetadata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, this->nonformalizeddocumentmetadata(), target);
  }

  // optional .Diadoc.Api.Proto.Documents.InvoiceDocument.InvoiceMetadata InvoiceMetadata = 14;
  if (has_invoicemetadata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        14, this->invoicemetadata(), target);
  }

  // optional .Diadoc.Api.Proto.Documents.BilateralDocument.TrustConnectionRequestMetadata TrustConnectionRequestMetadata = 15;
  if (has_trustconnectionrequestmetadata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        15, this->trustconnectionrequestmetadata(), target);
  }

  // optional .Diadoc.Api.Proto.Documents.BilateralDocument.BasicDocumentMetadata Torg12Metadata = 16;
  if (has_torg12metadata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        16, this->torg12metadata(), target);
  }

  // optional .Diadoc.Api.Proto.Documents.InvoiceDocument.InvoiceRevisionMetadata InvoiceRevisionMetadata = 17;
  if (has_invoicerevisionmetadata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        17, this->invoicerevisionmetadata(), target);
  }

  // optional .Diadoc.Api.Proto.Documents.InvoiceDocument.InvoiceCorrectionMetadata InvoiceCorrectionMetadata = 18;
  if (has_invoicecorrectionmetadata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        18, this->invoicecorrectionmetadata(), target);
  }

  // optional .Diadoc.Api.Proto.Documents.InvoiceDocument.InvoiceCorrectionRevisionMetadata InvoiceCorrectionRevisionMetadata = 19;
  if (has_invoicecorrectionrevisionmetadata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        19, this->invoicecorrectionrevisionmetadata(), target);
  }

  // optional .Diadoc.Api.Proto.Documents.AcceptanceCertificateDocument.AcceptanceCertificateMetadata AcceptanceCertificateMetadata = 20;
  if (has_acceptancecertificatemetadata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        20, this->acceptancecertificatemetadata(), target);
  }

  // optional .Diadoc.Api.Proto.Documents.UnilateralDocument.ProformaInvoiceMetadata ProformaInvoiceMetadata = 21;
  if (has_proformainvoicemetadata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        21, this->proformainvoicemetadata(), target);
  }

  // optional .Diadoc.Api.Proto.Documents.BilateralDocument.BasicDocumentMetadata XmlTorg12Metadata = 22;
  if (has_xmltorg12metadata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        22, this->xmltorg12metadata(), target);
  }

  // optional .Diadoc.Api.Proto.Documents.BilateralDocument.BasicDocumentMetadata XmlAcceptanceCertificateMetadata = 23;
  if (has_xmlacceptancecertificatemetadata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        23, this->xmlacceptancecertificatemetadata(), target);
  }

  // optional bool IsDeleted = 24 [default = false];
  if (has_isdeleted()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(24, this->isdeleted(), target);
  }

  // optional string DepartmentId = 25;
  if (has_departmentid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->departmentid().data(), this->departmentid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        25, this->departmentid(), target);
  }

  // optional bool IsTest = 26 [default = false];
  if (has_istest()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(26, this->istest(), target);
  }

  // optional string FromDepartmentId = 27;
  if (has_fromdepartmentid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->fromdepartmentid().data(), this->fromdepartmentid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        27, this->fromdepartmentid(), target);
  }

  // optional string ToDepartmentId = 28;
  if (has_todepartmentid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->todepartmentid().data(), this->todepartmentid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        28, this->todepartmentid(), target);
  }

  // optional .Diadoc.Api.Proto.Documents.BilateralDocument.PriceListMetadata PriceListMetadata = 29;
  if (has_pricelistmetadata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        29, this->pricelistmetadata(), target);
  }

  // optional string CustomDocumentId = 30;
  if (has_customdocumentid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->customdocumentid().data(), this->customdocumentid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        30, this->customdocumentid(), target);
  }

  // optional .Diadoc.Api.Proto.Documents.ResolutionStatus ResolutionStatus = 31;
  if (has_resolutionstatus()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        31, this->resolutionstatus(), target);
  }

  // optional .Diadoc.Api.Proto.Documents.RevocationStatus RevocationStatus = 32 [default = UnknownRevocationStatus];
  if (has_revocationstatus()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      32, this->revocationstatus(), target);
  }

  // optional sfixed64 SendTimestampTicks = 33;
  if (has_sendtimestampticks()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(33, this->sendtimestampticks(), target);
  }

  // optional sfixed64 DeliveryTimestampTicks = 34;
  if (has_deliverytimestampticks()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(34, this->deliverytimestampticks(), target);
  }

  // repeated .Diadoc.Api.Proto.ForwardDocumentEvent ForwardDocumentEvents = 35;
  for (int i = 0; i < this->forwarddocumentevents_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        35, this->forwarddocumentevents(i), target);
  }

  // optional .Diadoc.Api.Proto.Documents.BilateralDocument.BilateralDocumentMetadata PriceListAgreementMetadata = 36;
  if (has_pricelistagreementmetadata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        36, this->pricelistagreementmetadata(), target);
  }

  // optional .Diadoc.Api.Proto.Documents.BilateralDocument.BilateralDocumentMetadata CertificateRegistryMetadata = 37;
  if (has_certificateregistrymetadata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        37, this->certificateregistrymetadata(), target);
  }

  // optional .Diadoc.Api.Proto.Documents.BilateralDocument.BilateralDocumentMetadata ReconciliationActMetadata = 38;
  if (has_reconciliationactmetadata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        38, this->reconciliationactmetadata(), target);
  }

  // optional .Diadoc.Api.Proto.Documents.BilateralDocument.ContractMetadata ContractMetadata = 39;
  if (has_contractmetadata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        39, this->contractmetadata(), target);
  }

  // optional .Diadoc.Api.Proto.Documents.BilateralDocument.BasicDocumentMetadata Torg13Metadata = 40;
  if (has_torg13metadata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        40, this->torg13metadata(), target);
  }

  // optional .Diadoc.Api.Proto.Documents.UnilateralDocument.ServiceDetailsMetadata ServiceDetailsMetadata = 41;
  if (has_servicedetailsmetadata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        41, this->servicedetailsmetadata(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Document::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string IndexKey = 1;
    if (has_indexkey()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->indexkey());
    }

    // required string MessageId = 2;
    if (has_messageid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->messageid());
    }

    // required string EntityId = 3;
    if (has_entityid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->entityid());
    }

    // required sfixed64 CreationTimestampTicks = 4;
    if (has_creationtimestampticks()) {
      total_size += 1 + 8;
    }

    // optional string CounteragentBoxId = 5;
    if (has_counteragentboxid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->counteragentboxid());
    }

    // optional .Diadoc.Api.Proto.DocumentType DocumentType = 6 [default = UnknownDocumentType];
    if (has_documenttype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->documenttype());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .Diadoc.Api.Proto.Content Content = 9;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->content());
    }

    // optional string FileName = 10;
    if (has_filename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->filename());
    }

    // optional string DocumentDate = 11;
    if (has_documentdate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->documentdate());
    }

    // optional string DocumentNumber = 12;
    if (has_documentnumber()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->documentnumber());
    }

    // optional .Diadoc.Api.Proto.Documents.NonformalizedDocument.NonformalizedDocumentMetadata NonformalizedDocumentMetadata = 13;
    if (has_nonformalizeddocumentmetadata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->nonformalizeddocumentmetadata());
    }

    // optional .Diadoc.Api.Proto.Documents.InvoiceDocument.InvoiceMetadata InvoiceMetadata = 14;
    if (has_invoicemetadata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->invoicemetadata());
    }

    // optional .Diadoc.Api.Proto.Documents.BilateralDocument.TrustConnectionRequestMetadata TrustConnectionRequestMetadata = 15;
    if (has_trustconnectionrequestmetadata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->trustconnectionrequestmetadata());
    }

    // optional .Diadoc.Api.Proto.Documents.BilateralDocument.BasicDocumentMetadata Torg12Metadata = 16;
    if (has_torg12metadata()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->torg12metadata());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional .Diadoc.Api.Proto.Documents.InvoiceDocument.InvoiceRevisionMetadata InvoiceRevisionMetadata = 17;
    if (has_invoicerevisionmetadata()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->invoicerevisionmetadata());
    }

    // optional .Diadoc.Api.Proto.Documents.InvoiceDocument.InvoiceCorrectionMetadata InvoiceCorrectionMetadata = 18;
    if (has_invoicecorrectionmetadata()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->invoicecorrectionmetadata());
    }

    // optional .Diadoc.Api.Proto.Documents.InvoiceDocument.InvoiceCorrectionRevisionMetadata InvoiceCorrectionRevisionMetadata = 19;
    if (has_invoicecorrectionrevisionmetadata()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->invoicecorrectionrevisionmetadata());
    }

    // optional .Diadoc.Api.Proto.Documents.AcceptanceCertificateDocument.AcceptanceCertificateMetadata AcceptanceCertificateMetadata = 20;
    if (has_acceptancecertificatemetadata()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->acceptancecertificatemetadata());
    }

    // optional .Diadoc.Api.Proto.Documents.UnilateralDocument.ProformaInvoiceMetadata ProformaInvoiceMetadata = 21;
    if (has_proformainvoicemetadata()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->proformainvoicemetadata());
    }

    // optional .Diadoc.Api.Proto.Documents.BilateralDocument.BasicDocumentMetadata XmlTorg12Metadata = 22;
    if (has_xmltorg12metadata()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->xmltorg12metadata());
    }

    // optional .Diadoc.Api.Proto.Documents.BilateralDocument.BasicDocumentMetadata XmlAcceptanceCertificateMetadata = 23;
    if (has_xmlacceptancecertificatemetadata()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->xmlacceptancecertificatemetadata());
    }

    // optional bool IsDeleted = 24 [default = false];
    if (has_isdeleted()) {
      total_size += 2 + 1;
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional string DepartmentId = 25;
    if (has_departmentid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->departmentid());
    }

    // optional bool IsTest = 26 [default = false];
    if (has_istest()) {
      total_size += 2 + 1;
    }

    // optional string FromDepartmentId = 27;
    if (has_fromdepartmentid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->fromdepartmentid());
    }

    // optional string ToDepartmentId = 28;
    if (has_todepartmentid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->todepartmentid());
    }

    // optional .Diadoc.Api.Proto.Documents.BilateralDocument.PriceListMetadata PriceListMetadata = 29;
    if (has_pricelistmetadata()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pricelistmetadata());
    }

    // optional string CustomDocumentId = 30;
    if (has_customdocumentid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->customdocumentid());
    }

    // optional .Diadoc.Api.Proto.Documents.ResolutionStatus ResolutionStatus = 31;
    if (has_resolutionstatus()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->resolutionstatus());
    }

    // optional .Diadoc.Api.Proto.Documents.RevocationStatus RevocationStatus = 32 [default = UnknownRevocationStatus];
    if (has_revocationstatus()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->revocationstatus());
    }

  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    // optional sfixed64 SendTimestampTicks = 33;
    if (has_sendtimestampticks()) {
      total_size += 2 + 8;
    }

    // optional sfixed64 DeliveryTimestampTicks = 34;
    if (has_deliverytimestampticks()) {
      total_size += 2 + 8;
    }

    // optional .Diadoc.Api.Proto.Documents.BilateralDocument.BilateralDocumentMetadata PriceListAgreementMetadata = 36;
    if (has_pricelistagreementmetadata()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pricelistagreementmetadata());
    }

    // optional .Diadoc.Api.Proto.Documents.BilateralDocument.BilateralDocumentMetadata CertificateRegistryMetadata = 37;
    if (has_certificateregistrymetadata()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->certificateregistrymetadata());
    }

    // optional .Diadoc.Api.Proto.Documents.BilateralDocument.BilateralDocumentMetadata ReconciliationActMetadata = 38;
    if (has_reconciliationactmetadata()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->reconciliationactmetadata());
    }

    // optional .Diadoc.Api.Proto.Documents.BilateralDocument.ContractMetadata ContractMetadata = 39;
    if (has_contractmetadata()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->contractmetadata());
    }

    // optional .Diadoc.Api.Proto.Documents.BilateralDocument.BasicDocumentMetadata Torg13Metadata = 40;
    if (has_torg13metadata()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->torg13metadata());
    }

  }
  if (_has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    // optional .Diadoc.Api.Proto.Documents.UnilateralDocument.ServiceDetailsMetadata ServiceDetailsMetadata = 41;
    if (has_servicedetailsmetadata()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->servicedetailsmetadata());
    }

  }
  // repeated .Diadoc.Api.Proto.DocumentId InitialDocumentIds = 7;
  total_size += 1 * this->initialdocumentids_size();
  for (int i = 0; i < this->initialdocumentids_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->initialdocumentids(i));
  }

  // repeated .Diadoc.Api.Proto.DocumentId SubordinateDocumentIds = 8;
  total_size += 1 * this->subordinatedocumentids_size();
  for (int i = 0; i < this->subordinatedocumentids_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->subordinatedocumentids(i));
  }

  // repeated .Diadoc.Api.Proto.ForwardDocumentEvent ForwardDocumentEvents = 35;
  total_size += 2 * this->forwarddocumentevents_size();
  for (int i = 0; i < this->forwarddocumentevents_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->forwarddocumentevents(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Document::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Document* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Document*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Document::MergeFrom(const Document& from) {
  GOOGLE_CHECK_NE(&from, this);
  initialdocumentids_.MergeFrom(from.initialdocumentids_);
  subordinatedocumentids_.MergeFrom(from.subordinatedocumentids_);
  forwarddocumentevents_.MergeFrom(from.forwarddocumentevents_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_indexkey()) {
      set_indexkey(from.indexkey());
    }
    if (from.has_messageid()) {
      set_messageid(from.messageid());
    }
    if (from.has_entityid()) {
      set_entityid(from.entityid());
    }
    if (from.has_creationtimestampticks()) {
      set_creationtimestampticks(from.creationtimestampticks());
    }
    if (from.has_counteragentboxid()) {
      set_counteragentboxid(from.counteragentboxid());
    }
    if (from.has_documenttype()) {
      set_documenttype(from.documenttype());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_content()) {
      mutable_content()->::Diadoc::Api::Proto::Content::MergeFrom(from.content());
    }
    if (from.has_filename()) {
      set_filename(from.filename());
    }
    if (from.has_documentdate()) {
      set_documentdate(from.documentdate());
    }
    if (from.has_documentnumber()) {
      set_documentnumber(from.documentnumber());
    }
    if (from.has_nonformalizeddocumentmetadata()) {
      mutable_nonformalizeddocumentmetadata()->::Diadoc::Api::Proto::Documents::NonformalizedDocument::NonformalizedDocumentMetadata::MergeFrom(from.nonformalizeddocumentmetadata());
    }
    if (from.has_invoicemetadata()) {
      mutable_invoicemetadata()->::Diadoc::Api::Proto::Documents::InvoiceDocument::InvoiceMetadata::MergeFrom(from.invoicemetadata());
    }
    if (from.has_trustconnectionrequestmetadata()) {
      mutable_trustconnectionrequestmetadata()->::Diadoc::Api::Proto::Documents::BilateralDocument::TrustConnectionRequestMetadata::MergeFrom(from.trustconnectionrequestmetadata());
    }
    if (from.has_torg12metadata()) {
      mutable_torg12metadata()->::Diadoc::Api::Proto::Documents::BilateralDocument::BasicDocumentMetadata::MergeFrom(from.torg12metadata());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_invoicerevisionmetadata()) {
      mutable_invoicerevisionmetadata()->::Diadoc::Api::Proto::Documents::InvoiceDocument::InvoiceRevisionMetadata::MergeFrom(from.invoicerevisionmetadata());
    }
    if (from.has_invoicecorrectionmetadata()) {
      mutable_invoicecorrectionmetadata()->::Diadoc::Api::Proto::Documents::InvoiceDocument::InvoiceCorrectionMetadata::MergeFrom(from.invoicecorrectionmetadata());
    }
    if (from.has_invoicecorrectionrevisionmetadata()) {
      mutable_invoicecorrectionrevisionmetadata()->::Diadoc::Api::Proto::Documents::InvoiceDocument::InvoiceCorrectionRevisionMetadata::MergeFrom(from.invoicecorrectionrevisionmetadata());
    }
    if (from.has_acceptancecertificatemetadata()) {
      mutable_acceptancecertificatemetadata()->::Diadoc::Api::Proto::Documents::AcceptanceCertificateDocument::AcceptanceCertificateMetadata::MergeFrom(from.acceptancecertificatemetadata());
    }
    if (from.has_proformainvoicemetadata()) {
      mutable_proformainvoicemetadata()->::Diadoc::Api::Proto::Documents::UnilateralDocument::ProformaInvoiceMetadata::MergeFrom(from.proformainvoicemetadata());
    }
    if (from.has_xmltorg12metadata()) {
      mutable_xmltorg12metadata()->::Diadoc::Api::Proto::Documents::BilateralDocument::BasicDocumentMetadata::MergeFrom(from.xmltorg12metadata());
    }
    if (from.has_xmlacceptancecertificatemetadata()) {
      mutable_xmlacceptancecertificatemetadata()->::Diadoc::Api::Proto::Documents::BilateralDocument::BasicDocumentMetadata::MergeFrom(from.xmlacceptancecertificatemetadata());
    }
    if (from.has_isdeleted()) {
      set_isdeleted(from.isdeleted());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_departmentid()) {
      set_departmentid(from.departmentid());
    }
    if (from.has_istest()) {
      set_istest(from.istest());
    }
    if (from.has_fromdepartmentid()) {
      set_fromdepartmentid(from.fromdepartmentid());
    }
    if (from.has_todepartmentid()) {
      set_todepartmentid(from.todepartmentid());
    }
    if (from.has_pricelistmetadata()) {
      mutable_pricelistmetadata()->::Diadoc::Api::Proto::Documents::BilateralDocument::PriceListMetadata::MergeFrom(from.pricelistmetadata());
    }
    if (from.has_customdocumentid()) {
      set_customdocumentid(from.customdocumentid());
    }
    if (from.has_resolutionstatus()) {
      mutable_resolutionstatus()->::Diadoc::Api::Proto::Documents::ResolutionStatus::MergeFrom(from.resolutionstatus());
    }
    if (from.has_revocationstatus()) {
      set_revocationstatus(from.revocationstatus());
    }
  }
  if (from._has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    if (from.has_sendtimestampticks()) {
      set_sendtimestampticks(from.sendtimestampticks());
    }
    if (from.has_deliverytimestampticks()) {
      set_deliverytimestampticks(from.deliverytimestampticks());
    }
    if (from.has_pricelistagreementmetadata()) {
      mutable_pricelistagreementmetadata()->::Diadoc::Api::Proto::Documents::BilateralDocument::BilateralDocumentMetadata::MergeFrom(from.pricelistagreementmetadata());
    }
    if (from.has_certificateregistrymetadata()) {
      mutable_certificateregistrymetadata()->::Diadoc::Api::Proto::Documents::BilateralDocument::BilateralDocumentMetadata::MergeFrom(from.certificateregistrymetadata());
    }
    if (from.has_reconciliationactmetadata()) {
      mutable_reconciliationactmetadata()->::Diadoc::Api::Proto::Documents::BilateralDocument::BilateralDocumentMetadata::MergeFrom(from.reconciliationactmetadata());
    }
    if (from.has_contractmetadata()) {
      mutable_contractmetadata()->::Diadoc::Api::Proto::Documents::BilateralDocument::ContractMetadata::MergeFrom(from.contractmetadata());
    }
    if (from.has_torg13metadata()) {
      mutable_torg13metadata()->::Diadoc::Api::Proto::Documents::BilateralDocument::BasicDocumentMetadata::MergeFrom(from.torg13metadata());
    }
  }
  if (from._has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    if (from.has_servicedetailsmetadata()) {
      mutable_servicedetailsmetadata()->::Diadoc::Api::Proto::Documents::UnilateralDocument::ServiceDetailsMetadata::MergeFrom(from.servicedetailsmetadata());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Document::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Document::CopyFrom(const Document& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Document::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000e) != 0x0000000e) return false;

  for (int i = 0; i < initialdocumentids_size(); i++) {
    if (!this->initialdocumentids(i).IsInitialized()) return false;
  }
  for (int i = 0; i < subordinatedocumentids_size(); i++) {
    if (!this->subordinatedocumentids(i).IsInitialized()) return false;
  }
  if (has_content()) {
    if (!this->content().IsInitialized()) return false;
  }
  if (has_invoicemetadata()) {
    if (!this->invoicemetadata().IsInitialized()) return false;
  }
  if (has_torg12metadata()) {
    if (!this->torg12metadata().IsInitialized()) return false;
  }
  if (has_invoicerevisionmetadata()) {
    if (!this->invoicerevisionmetadata().IsInitialized()) return false;
  }
  if (has_invoicecorrectionmetadata()) {
    if (!this->invoicecorrectionmetadata().IsInitialized()) return false;
  }
  if (has_invoicecorrectionrevisionmetadata()) {
    if (!this->invoicecorrectionrevisionmetadata().IsInitialized()) return false;
  }
  if (has_acceptancecertificatemetadata()) {
    if (!this->acceptancecertificatemetadata().IsInitialized()) return false;
  }
  if (has_proformainvoicemetadata()) {
    if (!this->proformainvoicemetadata().IsInitialized()) return false;
  }
  if (has_xmltorg12metadata()) {
    if (!this->xmltorg12metadata().IsInitialized()) return false;
  }
  if (has_xmlacceptancecertificatemetadata()) {
    if (!this->xmlacceptancecertificatemetadata().IsInitialized()) return false;
  }
  if (has_resolutionstatus()) {
    if (!this->resolutionstatus().IsInitialized()) return false;
  }
  for (int i = 0; i < forwarddocumentevents_size(); i++) {
    if (!this->forwarddocumentevents(i).IsInitialized()) return false;
  }
  if (has_pricelistagreementmetadata()) {
    if (!this->pricelistagreementmetadata().IsInitialized()) return false;
  }
  if (has_certificateregistrymetadata()) {
    if (!this->certificateregistrymetadata().IsInitialized()) return false;
  }
  if (has_reconciliationactmetadata()) {
    if (!this->reconciliationactmetadata().IsInitialized()) return false;
  }
  if (has_contractmetadata()) {
    if (!this->contractmetadata().IsInitialized()) return false;
  }
  if (has_torg13metadata()) {
    if (!this->torg13metadata().IsInitialized()) return false;
  }
  if (has_servicedetailsmetadata()) {
    if (!this->servicedetailsmetadata().IsInitialized()) return false;
  }
  return true;
}

void Document::Swap(Document* other) {
  if (other != this) {
    std::swap(indexkey_, other->indexkey_);
    std::swap(messageid_, other->messageid_);
    std::swap(entityid_, other->entityid_);
    std::swap(creationtimestampticks_, other->creationtimestampticks_);
    std::swap(counteragentboxid_, other->counteragentboxid_);
    std::swap(documenttype_, other->documenttype_);
    initialdocumentids_.Swap(&other->initialdocumentids_);
    subordinatedocumentids_.Swap(&other->subordinatedocumentids_);
    std::swap(content_, other->content_);
    std::swap(filename_, other->filename_);
    std::swap(documentdate_, other->documentdate_);
    std::swap(documentnumber_, other->documentnumber_);
    std::swap(nonformalizeddocumentmetadata_, other->nonformalizeddocumentmetadata_);
    std::swap(invoicemetadata_, other->invoicemetadata_);
    std::swap(trustconnectionrequestmetadata_, other->trustconnectionrequestmetadata_);
    std::swap(torg12metadata_, other->torg12metadata_);
    std::swap(invoicerevisionmetadata_, other->invoicerevisionmetadata_);
    std::swap(invoicecorrectionmetadata_, other->invoicecorrectionmetadata_);
    std::swap(invoicecorrectionrevisionmetadata_, other->invoicecorrectionrevisionmetadata_);
    std::swap(acceptancecertificatemetadata_, other->acceptancecertificatemetadata_);
    std::swap(proformainvoicemetadata_, other->proformainvoicemetadata_);
    std::swap(xmltorg12metadata_, other->xmltorg12metadata_);
    std::swap(xmlacceptancecertificatemetadata_, other->xmlacceptancecertificatemetadata_);
    std::swap(isdeleted_, other->isdeleted_);
    std::swap(departmentid_, other->departmentid_);
    std::swap(istest_, other->istest_);
    std::swap(fromdepartmentid_, other->fromdepartmentid_);
    std::swap(todepartmentid_, other->todepartmentid_);
    std::swap(pricelistmetadata_, other->pricelistmetadata_);
    std::swap(customdocumentid_, other->customdocumentid_);
    std::swap(resolutionstatus_, other->resolutionstatus_);
    std::swap(revocationstatus_, other->revocationstatus_);
    std::swap(sendtimestampticks_, other->sendtimestampticks_);
    std::swap(deliverytimestampticks_, other->deliverytimestampticks_);
    forwarddocumentevents_.Swap(&other->forwarddocumentevents_);
    std::swap(pricelistagreementmetadata_, other->pricelistagreementmetadata_);
    std::swap(certificateregistrymetadata_, other->certificateregistrymetadata_);
    std::swap(reconciliationactmetadata_, other->reconciliationactmetadata_);
    std::swap(contractmetadata_, other->contractmetadata_);
    std::swap(torg13metadata_, other->torg13metadata_);
    std::swap(servicedetailsmetadata_, other->servicedetailsmetadata_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_has_bits_[1], other->_has_bits_[1]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Document::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Document_descriptor_;
  metadata.reflection = Document_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ResolutionStatus::kTypeFieldNumber;
const int ResolutionStatus::kTargetFieldNumber;
const int ResolutionStatus::kAuthorUserIdFieldNumber;
const int ResolutionStatus::kAuthorFIOFieldNumber;
#endif  // !_MSC_VER

ResolutionStatus::ResolutionStatus()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ResolutionStatus::InitAsDefaultInstance() {
  target_ = const_cast< ::Diadoc::Api::Proto::ResolutionTarget*>(&::Diadoc::Api::Proto::ResolutionTarget::default_instance());
}

ResolutionStatus::ResolutionStatus(const ResolutionStatus& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ResolutionStatus::SharedCtor() {
  _cached_size_ = 0;
  type_ = -1;
  target_ = NULL;
  authoruserid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  authorfio_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ResolutionStatus::~ResolutionStatus() {
  SharedDtor();
}

void ResolutionStatus::SharedDtor() {
  if (authoruserid_ != &::google::protobuf::internal::kEmptyString) {
    delete authoruserid_;
  }
  if (authorfio_ != &::google::protobuf::internal::kEmptyString) {
    delete authorfio_;
  }
  if (this != default_instance_) {
    delete target_;
  }
}

void ResolutionStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResolutionStatus::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResolutionStatus_descriptor_;
}

const ResolutionStatus& ResolutionStatus::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Documents_2fDocument_2eproto();
  return *default_instance_;
}

ResolutionStatus* ResolutionStatus::default_instance_ = NULL;

ResolutionStatus* ResolutionStatus::New() const {
  return new ResolutionStatus;
}

void ResolutionStatus::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = -1;
    if (has_target()) {
      if (target_ != NULL) target_->::Diadoc::Api::Proto::ResolutionTarget::Clear();
    }
    if (has_authoruserid()) {
      if (authoruserid_ != &::google::protobuf::internal::kEmptyString) {
        authoruserid_->clear();
      }
    }
    if (has_authorfio()) {
      if (authorfio_ != &::google::protobuf::internal::kEmptyString) {
        authorfio_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ResolutionStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Diadoc.Api.Proto.Documents.ResolutionStatusType Type = 1 [default = UnknownResolutionStatus];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Diadoc::Api::Proto::Documents::ResolutionStatusType_IsValid(value)) {
            set_type(static_cast< ::Diadoc::Api::Proto::Documents::ResolutionStatusType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_Target;
        break;
      }

      // optional .Diadoc.Api.Proto.ResolutionTarget Target = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Target:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_target()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_AuthorUserId;
        break;
      }

      // required string AuthorUserId = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_AuthorUserId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_authoruserid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->authoruserid().data(), this->authoruserid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_AuthorFIO;
        break;
      }

      // required string AuthorFIO = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_AuthorFIO:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_authorfio()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->authorfio().data(), this->authorfio().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ResolutionStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .Diadoc.Api.Proto.Documents.ResolutionStatusType Type = 1 [default = UnknownResolutionStatus];
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional .Diadoc.Api.Proto.ResolutionTarget Target = 2;
  if (has_target()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->target(), output);
  }

  // required string AuthorUserId = 3;
  if (has_authoruserid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->authoruserid().data(), this->authoruserid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->authoruserid(), output);
  }

  // required string AuthorFIO = 4;
  if (has_authorfio()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->authorfio().data(), this->authorfio().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->authorfio(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ResolutionStatus::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .Diadoc.Api.Proto.Documents.ResolutionStatusType Type = 1 [default = UnknownResolutionStatus];
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional .Diadoc.Api.Proto.ResolutionTarget Target = 2;
  if (has_target()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->target(), target);
  }

  // required string AuthorUserId = 3;
  if (has_authoruserid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->authoruserid().data(), this->authoruserid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->authoruserid(), target);
  }

  // required string AuthorFIO = 4;
  if (has_authorfio()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->authorfio().data(), this->authorfio().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->authorfio(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ResolutionStatus::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Diadoc.Api.Proto.Documents.ResolutionStatusType Type = 1 [default = UnknownResolutionStatus];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional .Diadoc.Api.Proto.ResolutionTarget Target = 2;
    if (has_target()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->target());
    }

    // required string AuthorUserId = 3;
    if (has_authoruserid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->authoruserid());
    }

    // required string AuthorFIO = 4;
    if (has_authorfio()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->authorfio());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResolutionStatus::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ResolutionStatus* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ResolutionStatus*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ResolutionStatus::MergeFrom(const ResolutionStatus& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_target()) {
      mutable_target()->::Diadoc::Api::Proto::ResolutionTarget::MergeFrom(from.target());
    }
    if (from.has_authoruserid()) {
      set_authoruserid(from.authoruserid());
    }
    if (from.has_authorfio()) {
      set_authorfio(from.authorfio());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ResolutionStatus::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResolutionStatus::CopyFrom(const ResolutionStatus& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResolutionStatus::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000c) != 0x0000000c) return false;

  return true;
}

void ResolutionStatus::Swap(ResolutionStatus* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(target_, other->target_);
    std::swap(authoruserid_, other->authoruserid_);
    std::swap(authorfio_, other->authorfio_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ResolutionStatus::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ResolutionStatus_descriptor_;
  metadata.reflection = ResolutionStatus_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Documents
}  // namespace Proto
}  // namespace Api
}  // namespace Diadoc

// @@protoc_insertion_point(global_scope)
