// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Address.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Address.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace Diadoc {
namespace Api {
namespace Proto {

namespace {

const ::google::protobuf::Descriptor* Address_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Address_reflection_ = NULL;
const ::google::protobuf::Descriptor* RussianAddress_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RussianAddress_reflection_ = NULL;
const ::google::protobuf::Descriptor* ForeignAddress_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ForeignAddress_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_Address_2eproto() {
  protobuf_AddDesc_Address_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "Address.proto");
  GOOGLE_CHECK(file != NULL);
  Address_descriptor_ = file->message_type(0);
  static const int Address_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Address, russianaddress_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Address, foreignaddress_),
  };
  Address_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Address_descriptor_,
      Address::default_instance_,
      Address_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Address, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Address, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Address));
  RussianAddress_descriptor_ = file->message_type(1);
  static const int RussianAddress_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RussianAddress, zipcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RussianAddress, region_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RussianAddress, territory_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RussianAddress, city_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RussianAddress, locality_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RussianAddress, street_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RussianAddress, building_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RussianAddress, block_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RussianAddress, apartment_),
  };
  RussianAddress_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RussianAddress_descriptor_,
      RussianAddress::default_instance_,
      RussianAddress_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RussianAddress, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RussianAddress, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RussianAddress));
  ForeignAddress_descriptor_ = file->message_type(2);
  static const int ForeignAddress_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForeignAddress, country_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForeignAddress, address_),
  };
  ForeignAddress_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ForeignAddress_descriptor_,
      ForeignAddress::default_instance_,
      ForeignAddress_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForeignAddress, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForeignAddress, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ForeignAddress));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_Address_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Address_descriptor_, &Address::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RussianAddress_descriptor_, &RussianAddress::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ForeignAddress_descriptor_, &ForeignAddress::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_Address_2eproto() {
  delete Address::default_instance_;
  delete Address_reflection_;
  delete RussianAddress::default_instance_;
  delete RussianAddress_reflection_;
  delete ForeignAddress::default_instance_;
  delete ForeignAddress_reflection_;
}

void protobuf_AddDesc_Address_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\rAddress.proto\022\020Diadoc.Api.Proto\"}\n\007Add"
    "ress\0228\n\016RussianAddress\030\001 \001(\0132 .Diadoc.Ap"
    "i.Proto.RussianAddress\0228\n\016ForeignAddress"
    "\030\002 \001(\0132 .Diadoc.Api.Proto.ForeignAddress"
    "\"\250\001\n\016RussianAddress\022\017\n\007ZipCode\030\001 \001(\t\022\016\n\006"
    "Region\030\002 \002(\t\022\021\n\tTerritory\030\003 \001(\t\022\014\n\004City\030"
    "\004 \001(\t\022\020\n\010Locality\030\005 \001(\t\022\016\n\006Street\030\006 \001(\t\022"
    "\020\n\010Building\030\007 \001(\t\022\r\n\005Block\030\010 \001(\t\022\021\n\tApar"
    "tment\030\t \001(\t\"2\n\016ForeignAddress\022\017\n\007Country"
    "\030\001 \002(\t\022\017\n\007Address\030\002 \002(\t", 383);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Address.proto", &protobuf_RegisterTypes);
  Address::default_instance_ = new Address();
  RussianAddress::default_instance_ = new RussianAddress();
  ForeignAddress::default_instance_ = new ForeignAddress();
  Address::default_instance_->InitAsDefaultInstance();
  RussianAddress::default_instance_->InitAsDefaultInstance();
  ForeignAddress::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_Address_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_Address_2eproto {
  StaticDescriptorInitializer_Address_2eproto() {
    protobuf_AddDesc_Address_2eproto();
  }
} static_descriptor_initializer_Address_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int Address::kRussianAddressFieldNumber;
const int Address::kForeignAddressFieldNumber;
#endif  // !_MSC_VER

Address::Address()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Address::InitAsDefaultInstance() {
  russianaddress_ = const_cast< ::Diadoc::Api::Proto::RussianAddress*>(&::Diadoc::Api::Proto::RussianAddress::default_instance());
  foreignaddress_ = const_cast< ::Diadoc::Api::Proto::ForeignAddress*>(&::Diadoc::Api::Proto::ForeignAddress::default_instance());
}

Address::Address(const Address& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Address::SharedCtor() {
  _cached_size_ = 0;
  russianaddress_ = NULL;
  foreignaddress_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Address::~Address() {
  SharedDtor();
}

void Address::SharedDtor() {
  if (this != default_instance_) {
    delete russianaddress_;
    delete foreignaddress_;
  }
}

void Address::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Address::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Address_descriptor_;
}

const Address& Address::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Address_2eproto();
  return *default_instance_;
}

Address* Address::default_instance_ = NULL;

Address* Address::New() const {
  return new Address;
}

void Address::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_russianaddress()) {
      if (russianaddress_ != NULL) russianaddress_->::Diadoc::Api::Proto::RussianAddress::Clear();
    }
    if (has_foreignaddress()) {
      if (foreignaddress_ != NULL) foreignaddress_->::Diadoc::Api::Proto::ForeignAddress::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Address::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Diadoc.Api.Proto.RussianAddress RussianAddress = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_russianaddress()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_ForeignAddress;
        break;
      }

      // optional .Diadoc.Api.Proto.ForeignAddress ForeignAddress = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ForeignAddress:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_foreignaddress()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Address::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .Diadoc.Api.Proto.RussianAddress RussianAddress = 1;
  if (has_russianaddress()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->russianaddress(), output);
  }

  // optional .Diadoc.Api.Proto.ForeignAddress ForeignAddress = 2;
  if (has_foreignaddress()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->foreignaddress(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Address::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .Diadoc.Api.Proto.RussianAddress RussianAddress = 1;
  if (has_russianaddress()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->russianaddress(), target);
  }

  // optional .Diadoc.Api.Proto.ForeignAddress ForeignAddress = 2;
  if (has_foreignaddress()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->foreignaddress(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Address::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Diadoc.Api.Proto.RussianAddress RussianAddress = 1;
    if (has_russianaddress()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->russianaddress());
    }

    // optional .Diadoc.Api.Proto.ForeignAddress ForeignAddress = 2;
    if (has_foreignaddress()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->foreignaddress());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Address::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Address* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Address*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Address::MergeFrom(const Address& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_russianaddress()) {
      mutable_russianaddress()->::Diadoc::Api::Proto::RussianAddress::MergeFrom(from.russianaddress());
    }
    if (from.has_foreignaddress()) {
      mutable_foreignaddress()->::Diadoc::Api::Proto::ForeignAddress::MergeFrom(from.foreignaddress());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Address::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Address::CopyFrom(const Address& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Address::IsInitialized() const {

  if (has_russianaddress()) {
    if (!this->russianaddress().IsInitialized()) return false;
  }
  if (has_foreignaddress()) {
    if (!this->foreignaddress().IsInitialized()) return false;
  }
  return true;
}

void Address::Swap(Address* other) {
  if (other != this) {
    std::swap(russianaddress_, other->russianaddress_);
    std::swap(foreignaddress_, other->foreignaddress_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Address::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Address_descriptor_;
  metadata.reflection = Address_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RussianAddress::kZipCodeFieldNumber;
const int RussianAddress::kRegionFieldNumber;
const int RussianAddress::kTerritoryFieldNumber;
const int RussianAddress::kCityFieldNumber;
const int RussianAddress::kLocalityFieldNumber;
const int RussianAddress::kStreetFieldNumber;
const int RussianAddress::kBuildingFieldNumber;
const int RussianAddress::kBlockFieldNumber;
const int RussianAddress::kApartmentFieldNumber;
#endif  // !_MSC_VER

RussianAddress::RussianAddress()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RussianAddress::InitAsDefaultInstance() {
}

RussianAddress::RussianAddress(const RussianAddress& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RussianAddress::SharedCtor() {
  _cached_size_ = 0;
  zipcode_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  region_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  territory_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  city_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  locality_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  street_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  building_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  block_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  apartment_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RussianAddress::~RussianAddress() {
  SharedDtor();
}

void RussianAddress::SharedDtor() {
  if (zipcode_ != &::google::protobuf::internal::kEmptyString) {
    delete zipcode_;
  }
  if (region_ != &::google::protobuf::internal::kEmptyString) {
    delete region_;
  }
  if (territory_ != &::google::protobuf::internal::kEmptyString) {
    delete territory_;
  }
  if (city_ != &::google::protobuf::internal::kEmptyString) {
    delete city_;
  }
  if (locality_ != &::google::protobuf::internal::kEmptyString) {
    delete locality_;
  }
  if (street_ != &::google::protobuf::internal::kEmptyString) {
    delete street_;
  }
  if (building_ != &::google::protobuf::internal::kEmptyString) {
    delete building_;
  }
  if (block_ != &::google::protobuf::internal::kEmptyString) {
    delete block_;
  }
  if (apartment_ != &::google::protobuf::internal::kEmptyString) {
    delete apartment_;
  }
  if (this != default_instance_) {
  }
}

void RussianAddress::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RussianAddress::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RussianAddress_descriptor_;
}

const RussianAddress& RussianAddress::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Address_2eproto();
  return *default_instance_;
}

RussianAddress* RussianAddress::default_instance_ = NULL;

RussianAddress* RussianAddress::New() const {
  return new RussianAddress;
}

void RussianAddress::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_zipcode()) {
      if (zipcode_ != &::google::protobuf::internal::kEmptyString) {
        zipcode_->clear();
      }
    }
    if (has_region()) {
      if (region_ != &::google::protobuf::internal::kEmptyString) {
        region_->clear();
      }
    }
    if (has_territory()) {
      if (territory_ != &::google::protobuf::internal::kEmptyString) {
        territory_->clear();
      }
    }
    if (has_city()) {
      if (city_ != &::google::protobuf::internal::kEmptyString) {
        city_->clear();
      }
    }
    if (has_locality()) {
      if (locality_ != &::google::protobuf::internal::kEmptyString) {
        locality_->clear();
      }
    }
    if (has_street()) {
      if (street_ != &::google::protobuf::internal::kEmptyString) {
        street_->clear();
      }
    }
    if (has_building()) {
      if (building_ != &::google::protobuf::internal::kEmptyString) {
        building_->clear();
      }
    }
    if (has_block()) {
      if (block_ != &::google::protobuf::internal::kEmptyString) {
        block_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_apartment()) {
      if (apartment_ != &::google::protobuf::internal::kEmptyString) {
        apartment_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RussianAddress::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string ZipCode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_zipcode()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->zipcode().data(), this->zipcode().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_Region;
        break;
      }

      // required string Region = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Region:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_region()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->region().data(), this->region().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_Territory;
        break;
      }

      // optional string Territory = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Territory:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_territory()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->territory().data(), this->territory().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_City;
        break;
      }

      // optional string City = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_City:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_city()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->city().data(), this->city().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_Locality;
        break;
      }

      // optional string Locality = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Locality:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_locality()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->locality().data(), this->locality().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_Street;
        break;
      }

      // optional string Street = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Street:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_street()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->street().data(), this->street().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_Building;
        break;
      }

      // optional string Building = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Building:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_building()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->building().data(), this->building().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_Block;
        break;
      }

      // optional string Block = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Block:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_block()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->block().data(), this->block().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_Apartment;
        break;
      }

      // optional string Apartment = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Apartment:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_apartment()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->apartment().data(), this->apartment().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RussianAddress::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string ZipCode = 1;
  if (has_zipcode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->zipcode().data(), this->zipcode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->zipcode(), output);
  }

  // required string Region = 2;
  if (has_region()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->region().data(), this->region().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->region(), output);
  }

  // optional string Territory = 3;
  if (has_territory()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->territory().data(), this->territory().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->territory(), output);
  }

  // optional string City = 4;
  if (has_city()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->city().data(), this->city().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->city(), output);
  }

  // optional string Locality = 5;
  if (has_locality()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->locality().data(), this->locality().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->locality(), output);
  }

  // optional string Street = 6;
  if (has_street()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->street().data(), this->street().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->street(), output);
  }

  // optional string Building = 7;
  if (has_building()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->building().data(), this->building().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->building(), output);
  }

  // optional string Block = 8;
  if (has_block()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->block().data(), this->block().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->block(), output);
  }

  // optional string Apartment = 9;
  if (has_apartment()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->apartment().data(), this->apartment().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->apartment(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RussianAddress::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string ZipCode = 1;
  if (has_zipcode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->zipcode().data(), this->zipcode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->zipcode(), target);
  }

  // required string Region = 2;
  if (has_region()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->region().data(), this->region().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->region(), target);
  }

  // optional string Territory = 3;
  if (has_territory()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->territory().data(), this->territory().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->territory(), target);
  }

  // optional string City = 4;
  if (has_city()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->city().data(), this->city().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->city(), target);
  }

  // optional string Locality = 5;
  if (has_locality()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->locality().data(), this->locality().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->locality(), target);
  }

  // optional string Street = 6;
  if (has_street()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->street().data(), this->street().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->street(), target);
  }

  // optional string Building = 7;
  if (has_building()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->building().data(), this->building().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->building(), target);
  }

  // optional string Block = 8;
  if (has_block()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->block().data(), this->block().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->block(), target);
  }

  // optional string Apartment = 9;
  if (has_apartment()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->apartment().data(), this->apartment().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->apartment(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RussianAddress::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string ZipCode = 1;
    if (has_zipcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->zipcode());
    }

    // required string Region = 2;
    if (has_region()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->region());
    }

    // optional string Territory = 3;
    if (has_territory()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->territory());
    }

    // optional string City = 4;
    if (has_city()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->city());
    }

    // optional string Locality = 5;
    if (has_locality()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->locality());
    }

    // optional string Street = 6;
    if (has_street()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->street());
    }

    // optional string Building = 7;
    if (has_building()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->building());
    }

    // optional string Block = 8;
    if (has_block()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->block());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string Apartment = 9;
    if (has_apartment()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->apartment());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RussianAddress::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RussianAddress* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RussianAddress*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RussianAddress::MergeFrom(const RussianAddress& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_zipcode()) {
      set_zipcode(from.zipcode());
    }
    if (from.has_region()) {
      set_region(from.region());
    }
    if (from.has_territory()) {
      set_territory(from.territory());
    }
    if (from.has_city()) {
      set_city(from.city());
    }
    if (from.has_locality()) {
      set_locality(from.locality());
    }
    if (from.has_street()) {
      set_street(from.street());
    }
    if (from.has_building()) {
      set_building(from.building());
    }
    if (from.has_block()) {
      set_block(from.block());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_apartment()) {
      set_apartment(from.apartment());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RussianAddress::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RussianAddress::CopyFrom(const RussianAddress& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RussianAddress::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;

  return true;
}

void RussianAddress::Swap(RussianAddress* other) {
  if (other != this) {
    std::swap(zipcode_, other->zipcode_);
    std::swap(region_, other->region_);
    std::swap(territory_, other->territory_);
    std::swap(city_, other->city_);
    std::swap(locality_, other->locality_);
    std::swap(street_, other->street_);
    std::swap(building_, other->building_);
    std::swap(block_, other->block_);
    std::swap(apartment_, other->apartment_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RussianAddress::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RussianAddress_descriptor_;
  metadata.reflection = RussianAddress_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ForeignAddress::kCountryFieldNumber;
const int ForeignAddress::kAddressFieldNumber;
#endif  // !_MSC_VER

ForeignAddress::ForeignAddress()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ForeignAddress::InitAsDefaultInstance() {
}

ForeignAddress::ForeignAddress(const ForeignAddress& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ForeignAddress::SharedCtor() {
  _cached_size_ = 0;
  country_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  address_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ForeignAddress::~ForeignAddress() {
  SharedDtor();
}

void ForeignAddress::SharedDtor() {
  if (country_ != &::google::protobuf::internal::kEmptyString) {
    delete country_;
  }
  if (address_ != &::google::protobuf::internal::kEmptyString) {
    delete address_;
  }
  if (this != default_instance_) {
  }
}

void ForeignAddress::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ForeignAddress::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ForeignAddress_descriptor_;
}

const ForeignAddress& ForeignAddress::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Address_2eproto();
  return *default_instance_;
}

ForeignAddress* ForeignAddress::default_instance_ = NULL;

ForeignAddress* ForeignAddress::New() const {
  return new ForeignAddress;
}

void ForeignAddress::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_country()) {
      if (country_ != &::google::protobuf::internal::kEmptyString) {
        country_->clear();
      }
    }
    if (has_address()) {
      if (address_ != &::google::protobuf::internal::kEmptyString) {
        address_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ForeignAddress::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string Country = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_country()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->country().data(), this->country().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_Address;
        break;
      }

      // required string Address = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Address:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_address()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->address().data(), this->address().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ForeignAddress::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string Country = 1;
  if (has_country()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->country().data(), this->country().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->country(), output);
  }

  // required string Address = 2;
  if (has_address()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->address().data(), this->address().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->address(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ForeignAddress::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string Country = 1;
  if (has_country()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->country().data(), this->country().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->country(), target);
  }

  // required string Address = 2;
  if (has_address()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->address().data(), this->address().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->address(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ForeignAddress::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string Country = 1;
    if (has_country()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->country());
    }

    // required string Address = 2;
    if (has_address()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->address());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ForeignAddress::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ForeignAddress* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ForeignAddress*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ForeignAddress::MergeFrom(const ForeignAddress& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_country()) {
      set_country(from.country());
    }
    if (from.has_address()) {
      set_address(from.address());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ForeignAddress::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ForeignAddress::CopyFrom(const ForeignAddress& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ForeignAddress::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void ForeignAddress::Swap(ForeignAddress* other) {
  if (other != this) {
    std::swap(country_, other->country_);
    std::swap(address_, other->address_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ForeignAddress::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ForeignAddress_descriptor_;
  metadata.reflection = ForeignAddress_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Proto
}  // namespace Api
}  // namespace Diadoc

// @@protoc_insertion_point(global_scope)
