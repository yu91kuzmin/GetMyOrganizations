// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ResolutionTarget.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ResolutionTarget.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace Diadoc {
namespace Api {
namespace Proto {

namespace {

const ::google::protobuf::Descriptor* ResolutionTarget_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ResolutionTarget_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_ResolutionTarget_2eproto() {
  protobuf_AddDesc_ResolutionTarget_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "ResolutionTarget.proto");
  GOOGLE_CHECK(file != NULL);
  ResolutionTarget_descriptor_ = file->message_type(0);
  static const int ResolutionTarget_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResolutionTarget, department_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResolutionTarget, departmentid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResolutionTarget, user_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResolutionTarget, userid_),
  };
  ResolutionTarget_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ResolutionTarget_descriptor_,
      ResolutionTarget::default_instance_,
      ResolutionTarget_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResolutionTarget, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResolutionTarget, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ResolutionTarget));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_ResolutionTarget_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ResolutionTarget_descriptor_, &ResolutionTarget::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_ResolutionTarget_2eproto() {
  delete ResolutionTarget::default_instance_;
  delete ResolutionTarget_reflection_;
}

void protobuf_AddDesc_ResolutionTarget_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\026ResolutionTarget.proto\022\020Diadoc.Api.Pro"
    "to\"Z\n\020ResolutionTarget\022\022\n\nDepartment\030\001 \001"
    "(\t\022\024\n\014DepartmentId\030\002 \001(\t\022\014\n\004User\030\003 \001(\t\022\016"
    "\n\006UserId\030\004 \001(\t", 134);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ResolutionTarget.proto", &protobuf_RegisterTypes);
  ResolutionTarget::default_instance_ = new ResolutionTarget();
  ResolutionTarget::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ResolutionTarget_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ResolutionTarget_2eproto {
  StaticDescriptorInitializer_ResolutionTarget_2eproto() {
    protobuf_AddDesc_ResolutionTarget_2eproto();
  }
} static_descriptor_initializer_ResolutionTarget_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int ResolutionTarget::kDepartmentFieldNumber;
const int ResolutionTarget::kDepartmentIdFieldNumber;
const int ResolutionTarget::kUserFieldNumber;
const int ResolutionTarget::kUserIdFieldNumber;
#endif  // !_MSC_VER

ResolutionTarget::ResolutionTarget()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ResolutionTarget::InitAsDefaultInstance() {
}

ResolutionTarget::ResolutionTarget(const ResolutionTarget& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ResolutionTarget::SharedCtor() {
  _cached_size_ = 0;
  department_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  departmentid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  user_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  userid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ResolutionTarget::~ResolutionTarget() {
  SharedDtor();
}

void ResolutionTarget::SharedDtor() {
  if (department_ != &::google::protobuf::internal::kEmptyString) {
    delete department_;
  }
  if (departmentid_ != &::google::protobuf::internal::kEmptyString) {
    delete departmentid_;
  }
  if (user_ != &::google::protobuf::internal::kEmptyString) {
    delete user_;
  }
  if (userid_ != &::google::protobuf::internal::kEmptyString) {
    delete userid_;
  }
  if (this != default_instance_) {
  }
}

void ResolutionTarget::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResolutionTarget::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResolutionTarget_descriptor_;
}

const ResolutionTarget& ResolutionTarget::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ResolutionTarget_2eproto();
  return *default_instance_;
}

ResolutionTarget* ResolutionTarget::default_instance_ = NULL;

ResolutionTarget* ResolutionTarget::New() const {
  return new ResolutionTarget;
}

void ResolutionTarget::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_department()) {
      if (department_ != &::google::protobuf::internal::kEmptyString) {
        department_->clear();
      }
    }
    if (has_departmentid()) {
      if (departmentid_ != &::google::protobuf::internal::kEmptyString) {
        departmentid_->clear();
      }
    }
    if (has_user()) {
      if (user_ != &::google::protobuf::internal::kEmptyString) {
        user_->clear();
      }
    }
    if (has_userid()) {
      if (userid_ != &::google::protobuf::internal::kEmptyString) {
        userid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ResolutionTarget::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string Department = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_department()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->department().data(), this->department().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_DepartmentId;
        break;
      }

      // optional string DepartmentId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_DepartmentId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_departmentid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->departmentid().data(), this->departmentid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_User;
        break;
      }

      // optional string User = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_User:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->user().data(), this->user().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_UserId;
        break;
      }

      // optional string UserId = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_UserId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_userid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->userid().data(), this->userid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ResolutionTarget::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string Department = 1;
  if (has_department()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->department().data(), this->department().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->department(), output);
  }

  // optional string DepartmentId = 2;
  if (has_departmentid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->departmentid().data(), this->departmentid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->departmentid(), output);
  }

  // optional string User = 3;
  if (has_user()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user().data(), this->user().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->user(), output);
  }

  // optional string UserId = 4;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->userid().data(), this->userid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->userid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ResolutionTarget::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string Department = 1;
  if (has_department()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->department().data(), this->department().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->department(), target);
  }

  // optional string DepartmentId = 2;
  if (has_departmentid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->departmentid().data(), this->departmentid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->departmentid(), target);
  }

  // optional string User = 3;
  if (has_user()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user().data(), this->user().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->user(), target);
  }

  // optional string UserId = 4;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->userid().data(), this->userid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->userid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ResolutionTarget::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string Department = 1;
    if (has_department()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->department());
    }

    // optional string DepartmentId = 2;
    if (has_departmentid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->departmentid());
    }

    // optional string User = 3;
    if (has_user()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->user());
    }

    // optional string UserId = 4;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->userid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResolutionTarget::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ResolutionTarget* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ResolutionTarget*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ResolutionTarget::MergeFrom(const ResolutionTarget& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_department()) {
      set_department(from.department());
    }
    if (from.has_departmentid()) {
      set_departmentid(from.departmentid());
    }
    if (from.has_user()) {
      set_user(from.user());
    }
    if (from.has_userid()) {
      set_userid(from.userid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ResolutionTarget::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResolutionTarget::CopyFrom(const ResolutionTarget& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResolutionTarget::IsInitialized() const {

  return true;
}

void ResolutionTarget::Swap(ResolutionTarget* other) {
  if (other != this) {
    std::swap(department_, other->department_);
    std::swap(departmentid_, other->departmentid_);
    std::swap(user_, other->user_);
    std::swap(userid_, other->userid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ResolutionTarget::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ResolutionTarget_descriptor_;
  metadata.reflection = ResolutionTarget_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Proto
}  // namespace Api
}  // namespace Diadoc

// @@protoc_insertion_point(global_scope)
