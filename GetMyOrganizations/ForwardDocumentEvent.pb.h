// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ForwardDocumentEvent.proto

#ifndef PROTOBUF_ForwardDocumentEvent_2eproto__INCLUDED
#define PROTOBUF_ForwardDocumentEvent_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "Timestamp.pb.h"
// @@protoc_insertion_point(includes)

namespace Diadoc {
namespace Api {
namespace Proto {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_ForwardDocumentEvent_2eproto();
void protobuf_AssignDesc_ForwardDocumentEvent_2eproto();
void protobuf_ShutdownFile_ForwardDocumentEvent_2eproto();

class ForwardDocumentEvent;

// ===================================================================

class ForwardDocumentEvent : public ::google::protobuf::Message {
 public:
  ForwardDocumentEvent();
  virtual ~ForwardDocumentEvent();

  ForwardDocumentEvent(const ForwardDocumentEvent& from);

  inline ForwardDocumentEvent& operator=(const ForwardDocumentEvent& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ForwardDocumentEvent& default_instance();

  void Swap(ForwardDocumentEvent* other);

  // implements Message ----------------------------------------------

  ForwardDocumentEvent* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ForwardDocumentEvent& from);
  void MergeFrom(const ForwardDocumentEvent& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Diadoc.Api.Proto.Timestamp Timestamp = 1;
  inline bool has_timestamp() const;
  inline void clear_timestamp();
  static const int kTimestampFieldNumber = 1;
  inline const ::Diadoc::Api::Proto::Timestamp& timestamp() const;
  inline ::Diadoc::Api::Proto::Timestamp* mutable_timestamp();
  inline ::Diadoc::Api::Proto::Timestamp* release_timestamp();
  inline void set_allocated_timestamp(::Diadoc::Api::Proto::Timestamp* timestamp);

  // optional string ToBoxId = 2;
  inline bool has_toboxid() const;
  inline void clear_toboxid();
  static const int kToBoxIdFieldNumber = 2;
  inline const ::std::string& toboxid() const;
  inline void set_toboxid(const ::std::string& value);
  inline void set_toboxid(const char* value);
  inline void set_toboxid(const char* value, size_t size);
  inline ::std::string* mutable_toboxid();
  inline ::std::string* release_toboxid();
  inline void set_allocated_toboxid(::std::string* toboxid);

  // @@protoc_insertion_point(class_scope:Diadoc.Api.Proto.ForwardDocumentEvent)
 private:
  inline void set_has_timestamp();
  inline void clear_has_timestamp();
  inline void set_has_toboxid();
  inline void clear_has_toboxid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::Diadoc::Api::Proto::Timestamp* timestamp_;
  ::std::string* toboxid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_ForwardDocumentEvent_2eproto();
  friend void protobuf_AssignDesc_ForwardDocumentEvent_2eproto();
  friend void protobuf_ShutdownFile_ForwardDocumentEvent_2eproto();

  void InitAsDefaultInstance();
  static ForwardDocumentEvent* default_instance_;
};
// ===================================================================


// ===================================================================

// ForwardDocumentEvent

// optional .Diadoc.Api.Proto.Timestamp Timestamp = 1;
inline bool ForwardDocumentEvent::has_timestamp() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ForwardDocumentEvent::set_has_timestamp() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ForwardDocumentEvent::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ForwardDocumentEvent::clear_timestamp() {
  if (timestamp_ != NULL) timestamp_->::Diadoc::Api::Proto::Timestamp::Clear();
  clear_has_timestamp();
}
inline const ::Diadoc::Api::Proto::Timestamp& ForwardDocumentEvent::timestamp() const {
  return timestamp_ != NULL ? *timestamp_ : *default_instance_->timestamp_;
}
inline ::Diadoc::Api::Proto::Timestamp* ForwardDocumentEvent::mutable_timestamp() {
  set_has_timestamp();
  if (timestamp_ == NULL) timestamp_ = new ::Diadoc::Api::Proto::Timestamp;
  return timestamp_;
}
inline ::Diadoc::Api::Proto::Timestamp* ForwardDocumentEvent::release_timestamp() {
  clear_has_timestamp();
  ::Diadoc::Api::Proto::Timestamp* temp = timestamp_;
  timestamp_ = NULL;
  return temp;
}
inline void ForwardDocumentEvent::set_allocated_timestamp(::Diadoc::Api::Proto::Timestamp* timestamp) {
  delete timestamp_;
  timestamp_ = timestamp;
  if (timestamp) {
    set_has_timestamp();
  } else {
    clear_has_timestamp();
  }
}

// optional string ToBoxId = 2;
inline bool ForwardDocumentEvent::has_toboxid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ForwardDocumentEvent::set_has_toboxid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ForwardDocumentEvent::clear_has_toboxid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ForwardDocumentEvent::clear_toboxid() {
  if (toboxid_ != &::google::protobuf::internal::kEmptyString) {
    toboxid_->clear();
  }
  clear_has_toboxid();
}
inline const ::std::string& ForwardDocumentEvent::toboxid() const {
  return *toboxid_;
}
inline void ForwardDocumentEvent::set_toboxid(const ::std::string& value) {
  set_has_toboxid();
  if (toboxid_ == &::google::protobuf::internal::kEmptyString) {
    toboxid_ = new ::std::string;
  }
  toboxid_->assign(value);
}
inline void ForwardDocumentEvent::set_toboxid(const char* value) {
  set_has_toboxid();
  if (toboxid_ == &::google::protobuf::internal::kEmptyString) {
    toboxid_ = new ::std::string;
  }
  toboxid_->assign(value);
}
inline void ForwardDocumentEvent::set_toboxid(const char* value, size_t size) {
  set_has_toboxid();
  if (toboxid_ == &::google::protobuf::internal::kEmptyString) {
    toboxid_ = new ::std::string;
  }
  toboxid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ForwardDocumentEvent::mutable_toboxid() {
  set_has_toboxid();
  if (toboxid_ == &::google::protobuf::internal::kEmptyString) {
    toboxid_ = new ::std::string;
  }
  return toboxid_;
}
inline ::std::string* ForwardDocumentEvent::release_toboxid() {
  clear_has_toboxid();
  if (toboxid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = toboxid_;
    toboxid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ForwardDocumentEvent::set_allocated_toboxid(::std::string* toboxid) {
  if (toboxid_ != &::google::protobuf::internal::kEmptyString) {
    delete toboxid_;
  }
  if (toboxid) {
    set_has_toboxid();
    toboxid_ = toboxid;
  } else {
    clear_has_toboxid();
    toboxid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Proto
}  // namespace Api
}  // namespace Diadoc

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_ForwardDocumentEvent_2eproto__INCLUDED
