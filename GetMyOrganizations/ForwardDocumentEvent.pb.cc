// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ForwardDocumentEvent.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ForwardDocumentEvent.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace Diadoc {
namespace Api {
namespace Proto {

namespace {

const ::google::protobuf::Descriptor* ForwardDocumentEvent_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ForwardDocumentEvent_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_ForwardDocumentEvent_2eproto() {
  protobuf_AddDesc_ForwardDocumentEvent_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "ForwardDocumentEvent.proto");
  GOOGLE_CHECK(file != NULL);
  ForwardDocumentEvent_descriptor_ = file->message_type(0);
  static const int ForwardDocumentEvent_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForwardDocumentEvent, timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForwardDocumentEvent, toboxid_),
  };
  ForwardDocumentEvent_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ForwardDocumentEvent_descriptor_,
      ForwardDocumentEvent::default_instance_,
      ForwardDocumentEvent_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForwardDocumentEvent, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForwardDocumentEvent, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ForwardDocumentEvent));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_ForwardDocumentEvent_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ForwardDocumentEvent_descriptor_, &ForwardDocumentEvent::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_ForwardDocumentEvent_2eproto() {
  delete ForwardDocumentEvent::default_instance_;
  delete ForwardDocumentEvent_reflection_;
}

void protobuf_AddDesc_ForwardDocumentEvent_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::Diadoc::Api::Proto::protobuf_AddDesc_Timestamp_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\032ForwardDocumentEvent.proto\022\020Diadoc.Api"
    ".Proto\032\017Timestamp.proto\"W\n\024ForwardDocume"
    "ntEvent\022.\n\tTimestamp\030\001 \001(\0132\033.Diadoc.Api."
    "Proto.Timestamp\022\017\n\007ToBoxId\030\002 \001(\t", 152);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ForwardDocumentEvent.proto", &protobuf_RegisterTypes);
  ForwardDocumentEvent::default_instance_ = new ForwardDocumentEvent();
  ForwardDocumentEvent::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ForwardDocumentEvent_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ForwardDocumentEvent_2eproto {
  StaticDescriptorInitializer_ForwardDocumentEvent_2eproto() {
    protobuf_AddDesc_ForwardDocumentEvent_2eproto();
  }
} static_descriptor_initializer_ForwardDocumentEvent_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int ForwardDocumentEvent::kTimestampFieldNumber;
const int ForwardDocumentEvent::kToBoxIdFieldNumber;
#endif  // !_MSC_VER

ForwardDocumentEvent::ForwardDocumentEvent()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ForwardDocumentEvent::InitAsDefaultInstance() {
  timestamp_ = const_cast< ::Diadoc::Api::Proto::Timestamp*>(&::Diadoc::Api::Proto::Timestamp::default_instance());
}

ForwardDocumentEvent::ForwardDocumentEvent(const ForwardDocumentEvent& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ForwardDocumentEvent::SharedCtor() {
  _cached_size_ = 0;
  timestamp_ = NULL;
  toboxid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ForwardDocumentEvent::~ForwardDocumentEvent() {
  SharedDtor();
}

void ForwardDocumentEvent::SharedDtor() {
  if (toboxid_ != &::google::protobuf::internal::kEmptyString) {
    delete toboxid_;
  }
  if (this != default_instance_) {
    delete timestamp_;
  }
}

void ForwardDocumentEvent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ForwardDocumentEvent::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ForwardDocumentEvent_descriptor_;
}

const ForwardDocumentEvent& ForwardDocumentEvent::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ForwardDocumentEvent_2eproto();
  return *default_instance_;
}

ForwardDocumentEvent* ForwardDocumentEvent::default_instance_ = NULL;

ForwardDocumentEvent* ForwardDocumentEvent::New() const {
  return new ForwardDocumentEvent;
}

void ForwardDocumentEvent::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_timestamp()) {
      if (timestamp_ != NULL) timestamp_->::Diadoc::Api::Proto::Timestamp::Clear();
    }
    if (has_toboxid()) {
      if (toboxid_ != &::google::protobuf::internal::kEmptyString) {
        toboxid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ForwardDocumentEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Diadoc.Api.Proto.Timestamp Timestamp = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_timestamp()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_ToBoxId;
        break;
      }

      // optional string ToBoxId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ToBoxId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_toboxid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->toboxid().data(), this->toboxid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ForwardDocumentEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .Diadoc.Api.Proto.Timestamp Timestamp = 1;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->timestamp(), output);
  }

  // optional string ToBoxId = 2;
  if (has_toboxid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->toboxid().data(), this->toboxid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->toboxid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ForwardDocumentEvent::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .Diadoc.Api.Proto.Timestamp Timestamp = 1;
  if (has_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->timestamp(), target);
  }

  // optional string ToBoxId = 2;
  if (has_toboxid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->toboxid().data(), this->toboxid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->toboxid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ForwardDocumentEvent::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Diadoc.Api.Proto.Timestamp Timestamp = 1;
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->timestamp());
    }

    // optional string ToBoxId = 2;
    if (has_toboxid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->toboxid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ForwardDocumentEvent::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ForwardDocumentEvent* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ForwardDocumentEvent*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ForwardDocumentEvent::MergeFrom(const ForwardDocumentEvent& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_timestamp()) {
      mutable_timestamp()->::Diadoc::Api::Proto::Timestamp::MergeFrom(from.timestamp());
    }
    if (from.has_toboxid()) {
      set_toboxid(from.toboxid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ForwardDocumentEvent::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ForwardDocumentEvent::CopyFrom(const ForwardDocumentEvent& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ForwardDocumentEvent::IsInitialized() const {

  if (has_timestamp()) {
    if (!this->timestamp().IsInitialized()) return false;
  }
  return true;
}

void ForwardDocumentEvent::Swap(ForwardDocumentEvent* other) {
  if (other != this) {
    std::swap(timestamp_, other->timestamp_);
    std::swap(toboxid_, other->toboxid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ForwardDocumentEvent::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ForwardDocumentEvent_descriptor_;
  metadata.reflection = ForwardDocumentEvent_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Proto
}  // namespace Api
}  // namespace Diadoc

// @@protoc_insertion_point(global_scope)
