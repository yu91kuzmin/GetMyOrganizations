// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Events/ResolutionRequestDenialInfo.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ResolutionRequestDenialInfo.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace Diadoc {
namespace Api {
namespace Proto {
namespace Events {

namespace {

const ::google::protobuf::Descriptor* ResolutionRequestDenialInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ResolutionRequestDenialInfo_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_Events_2fResolutionRequestDenialInfo_2eproto() {
  protobuf_AddDesc_Events_2fResolutionRequestDenialInfo_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "Events/ResolutionRequestDenialInfo.proto");
  GOOGLE_CHECK(file != NULL);
  ResolutionRequestDenialInfo_descriptor_ = file->message_type(0);
  static const int ResolutionRequestDenialInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResolutionRequestDenialInfo, author_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResolutionRequestDenialInfo, initialrequestid_),
  };
  ResolutionRequestDenialInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ResolutionRequestDenialInfo_descriptor_,
      ResolutionRequestDenialInfo::default_instance_,
      ResolutionRequestDenialInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResolutionRequestDenialInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResolutionRequestDenialInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ResolutionRequestDenialInfo));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_Events_2fResolutionRequestDenialInfo_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ResolutionRequestDenialInfo_descriptor_, &ResolutionRequestDenialInfo::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_Events_2fResolutionRequestDenialInfo_2eproto() {
  delete ResolutionRequestDenialInfo::default_instance_;
  delete ResolutionRequestDenialInfo_reflection_;
}

void protobuf_AddDesc_Events_2fResolutionRequestDenialInfo_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n(Events/ResolutionRequestDenialInfo.pro"
    "to\022\027Diadoc.Api.Proto.Events\"G\n\033Resolutio"
    "nRequestDenialInfo\022\016\n\006Author\030\001 \002(\t\022\030\n\020In"
    "itialRequestId\030\002 \001(\t", 140);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Events/ResolutionRequestDenialInfo.proto", &protobuf_RegisterTypes);
  ResolutionRequestDenialInfo::default_instance_ = new ResolutionRequestDenialInfo();
  ResolutionRequestDenialInfo::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_Events_2fResolutionRequestDenialInfo_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_Events_2fResolutionRequestDenialInfo_2eproto {
  StaticDescriptorInitializer_Events_2fResolutionRequestDenialInfo_2eproto() {
    protobuf_AddDesc_Events_2fResolutionRequestDenialInfo_2eproto();
  }
} static_descriptor_initializer_Events_2fResolutionRequestDenialInfo_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int ResolutionRequestDenialInfo::kAuthorFieldNumber;
const int ResolutionRequestDenialInfo::kInitialRequestIdFieldNumber;
#endif  // !_MSC_VER

ResolutionRequestDenialInfo::ResolutionRequestDenialInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ResolutionRequestDenialInfo::InitAsDefaultInstance() {
}

ResolutionRequestDenialInfo::ResolutionRequestDenialInfo(const ResolutionRequestDenialInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ResolutionRequestDenialInfo::SharedCtor() {
  _cached_size_ = 0;
  author_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  initialrequestid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ResolutionRequestDenialInfo::~ResolutionRequestDenialInfo() {
  SharedDtor();
}

void ResolutionRequestDenialInfo::SharedDtor() {
  if (author_ != &::google::protobuf::internal::kEmptyString) {
    delete author_;
  }
  if (initialrequestid_ != &::google::protobuf::internal::kEmptyString) {
    delete initialrequestid_;
  }
  if (this != default_instance_) {
  }
}

void ResolutionRequestDenialInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResolutionRequestDenialInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResolutionRequestDenialInfo_descriptor_;
}

const ResolutionRequestDenialInfo& ResolutionRequestDenialInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Events_2fResolutionRequestDenialInfo_2eproto();
  return *default_instance_;
}

ResolutionRequestDenialInfo* ResolutionRequestDenialInfo::default_instance_ = NULL;

ResolutionRequestDenialInfo* ResolutionRequestDenialInfo::New() const {
  return new ResolutionRequestDenialInfo;
}

void ResolutionRequestDenialInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_author()) {
      if (author_ != &::google::protobuf::internal::kEmptyString) {
        author_->clear();
      }
    }
    if (has_initialrequestid()) {
      if (initialrequestid_ != &::google::protobuf::internal::kEmptyString) {
        initialrequestid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ResolutionRequestDenialInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string Author = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_author()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->author().data(), this->author().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_InitialRequestId;
        break;
      }

      // optional string InitialRequestId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_InitialRequestId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_initialrequestid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->initialrequestid().data(), this->initialrequestid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ResolutionRequestDenialInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string Author = 1;
  if (has_author()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->author().data(), this->author().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->author(), output);
  }

  // optional string InitialRequestId = 2;
  if (has_initialrequestid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->initialrequestid().data(), this->initialrequestid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->initialrequestid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ResolutionRequestDenialInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string Author = 1;
  if (has_author()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->author().data(), this->author().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->author(), target);
  }

  // optional string InitialRequestId = 2;
  if (has_initialrequestid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->initialrequestid().data(), this->initialrequestid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->initialrequestid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ResolutionRequestDenialInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string Author = 1;
    if (has_author()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->author());
    }

    // optional string InitialRequestId = 2;
    if (has_initialrequestid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->initialrequestid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResolutionRequestDenialInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ResolutionRequestDenialInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ResolutionRequestDenialInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ResolutionRequestDenialInfo::MergeFrom(const ResolutionRequestDenialInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_author()) {
      set_author(from.author());
    }
    if (from.has_initialrequestid()) {
      set_initialrequestid(from.initialrequestid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ResolutionRequestDenialInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResolutionRequestDenialInfo::CopyFrom(const ResolutionRequestDenialInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResolutionRequestDenialInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ResolutionRequestDenialInfo::Swap(ResolutionRequestDenialInfo* other) {
  if (other != this) {
    std::swap(author_, other->author_);
    std::swap(initialrequestid_, other->initialrequestid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ResolutionRequestDenialInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ResolutionRequestDenialInfo_descriptor_;
  metadata.reflection = ResolutionRequestDenialInfo_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Events
}  // namespace Proto
}  // namespace Api
}  // namespace Diadoc

// @@protoc_insertion_point(global_scope)
