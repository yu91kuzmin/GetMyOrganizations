// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Events/ResolutionInfo.proto

#ifndef PROTOBUF_Events_2fResolutionInfo_2eproto__INCLUDED
#define PROTOBUF_Events_2fResolutionInfo_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace Diadoc {
namespace Api {
namespace Proto {
namespace Events {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_Events_2fResolutionInfo_2eproto();
void protobuf_AssignDesc_Events_2fResolutionInfo_2eproto();
void protobuf_ShutdownFile_Events_2fResolutionInfo_2eproto();

class ResolutionInfo;

enum ResolutionType {
  Undefined = 0,
  Approve = 1,
  Disapprove = 2,
  UnknownResolutionType = 3
};
bool ResolutionType_IsValid(int value);
const ResolutionType ResolutionType_MIN = Undefined;
const ResolutionType ResolutionType_MAX = UnknownResolutionType;
const int ResolutionType_ARRAYSIZE = ResolutionType_MAX + 1;

const ::google::protobuf::EnumDescriptor* ResolutionType_descriptor();
inline const ::std::string& ResolutionType_Name(ResolutionType value) {
  return ::google::protobuf::internal::NameOfEnum(
    ResolutionType_descriptor(), value);
}
inline bool ResolutionType_Parse(
    const ::std::string& name, ResolutionType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ResolutionType>(
    ResolutionType_descriptor(), name, value);
}
// ===================================================================

class ResolutionInfo : public ::google::protobuf::Message {
 public:
  ResolutionInfo();
  virtual ~ResolutionInfo();

  ResolutionInfo(const ResolutionInfo& from);

  inline ResolutionInfo& operator=(const ResolutionInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ResolutionInfo& default_instance();

  void Swap(ResolutionInfo* other);

  // implements Message ----------------------------------------------

  ResolutionInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ResolutionInfo& from);
  void MergeFrom(const ResolutionInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Diadoc.Api.Proto.Events.ResolutionType ResolutionType = 1 [default = UnknownResolutionType];
  inline bool has_resolutiontype() const;
  inline void clear_resolutiontype();
  static const int kResolutionTypeFieldNumber = 1;
  inline ::Diadoc::Api::Proto::Events::ResolutionType resolutiontype() const;
  inline void set_resolutiontype(::Diadoc::Api::Proto::Events::ResolutionType value);

  // required string Author = 2;
  inline bool has_author() const;
  inline void clear_author();
  static const int kAuthorFieldNumber = 2;
  inline const ::std::string& author() const;
  inline void set_author(const ::std::string& value);
  inline void set_author(const char* value);
  inline void set_author(const char* value, size_t size);
  inline ::std::string* mutable_author();
  inline ::std::string* release_author();
  inline void set_allocated_author(::std::string* author);

  // optional string InitialRequestId = 3;
  inline bool has_initialrequestid() const;
  inline void clear_initialrequestid();
  static const int kInitialRequestIdFieldNumber = 3;
  inline const ::std::string& initialrequestid() const;
  inline void set_initialrequestid(const ::std::string& value);
  inline void set_initialrequestid(const char* value);
  inline void set_initialrequestid(const char* value, size_t size);
  inline ::std::string* mutable_initialrequestid();
  inline ::std::string* release_initialrequestid();
  inline void set_allocated_initialrequestid(::std::string* initialrequestid);

  // @@protoc_insertion_point(class_scope:Diadoc.Api.Proto.Events.ResolutionInfo)
 private:
  inline void set_has_resolutiontype();
  inline void clear_has_resolutiontype();
  inline void set_has_author();
  inline void clear_has_author();
  inline void set_has_initialrequestid();
  inline void clear_has_initialrequestid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* author_;
  ::std::string* initialrequestid_;
  int resolutiontype_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_Events_2fResolutionInfo_2eproto();
  friend void protobuf_AssignDesc_Events_2fResolutionInfo_2eproto();
  friend void protobuf_ShutdownFile_Events_2fResolutionInfo_2eproto();

  void InitAsDefaultInstance();
  static ResolutionInfo* default_instance_;
};
// ===================================================================


// ===================================================================

// ResolutionInfo

// optional .Diadoc.Api.Proto.Events.ResolutionType ResolutionType = 1 [default = UnknownResolutionType];
inline bool ResolutionInfo::has_resolutiontype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ResolutionInfo::set_has_resolutiontype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ResolutionInfo::clear_has_resolutiontype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ResolutionInfo::clear_resolutiontype() {
  resolutiontype_ = 3;
  clear_has_resolutiontype();
}
inline ::Diadoc::Api::Proto::Events::ResolutionType ResolutionInfo::resolutiontype() const {
  return static_cast< ::Diadoc::Api::Proto::Events::ResolutionType >(resolutiontype_);
}
inline void ResolutionInfo::set_resolutiontype(::Diadoc::Api::Proto::Events::ResolutionType value) {
  assert(::Diadoc::Api::Proto::Events::ResolutionType_IsValid(value));
  set_has_resolutiontype();
  resolutiontype_ = value;
}

// required string Author = 2;
inline bool ResolutionInfo::has_author() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ResolutionInfo::set_has_author() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ResolutionInfo::clear_has_author() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ResolutionInfo::clear_author() {
  if (author_ != &::google::protobuf::internal::kEmptyString) {
    author_->clear();
  }
  clear_has_author();
}
inline const ::std::string& ResolutionInfo::author() const {
  return *author_;
}
inline void ResolutionInfo::set_author(const ::std::string& value) {
  set_has_author();
  if (author_ == &::google::protobuf::internal::kEmptyString) {
    author_ = new ::std::string;
  }
  author_->assign(value);
}
inline void ResolutionInfo::set_author(const char* value) {
  set_has_author();
  if (author_ == &::google::protobuf::internal::kEmptyString) {
    author_ = new ::std::string;
  }
  author_->assign(value);
}
inline void ResolutionInfo::set_author(const char* value, size_t size) {
  set_has_author();
  if (author_ == &::google::protobuf::internal::kEmptyString) {
    author_ = new ::std::string;
  }
  author_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ResolutionInfo::mutable_author() {
  set_has_author();
  if (author_ == &::google::protobuf::internal::kEmptyString) {
    author_ = new ::std::string;
  }
  return author_;
}
inline ::std::string* ResolutionInfo::release_author() {
  clear_has_author();
  if (author_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = author_;
    author_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ResolutionInfo::set_allocated_author(::std::string* author) {
  if (author_ != &::google::protobuf::internal::kEmptyString) {
    delete author_;
  }
  if (author) {
    set_has_author();
    author_ = author;
  } else {
    clear_has_author();
    author_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string InitialRequestId = 3;
inline bool ResolutionInfo::has_initialrequestid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ResolutionInfo::set_has_initialrequestid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ResolutionInfo::clear_has_initialrequestid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ResolutionInfo::clear_initialrequestid() {
  if (initialrequestid_ != &::google::protobuf::internal::kEmptyString) {
    initialrequestid_->clear();
  }
  clear_has_initialrequestid();
}
inline const ::std::string& ResolutionInfo::initialrequestid() const {
  return *initialrequestid_;
}
inline void ResolutionInfo::set_initialrequestid(const ::std::string& value) {
  set_has_initialrequestid();
  if (initialrequestid_ == &::google::protobuf::internal::kEmptyString) {
    initialrequestid_ = new ::std::string;
  }
  initialrequestid_->assign(value);
}
inline void ResolutionInfo::set_initialrequestid(const char* value) {
  set_has_initialrequestid();
  if (initialrequestid_ == &::google::protobuf::internal::kEmptyString) {
    initialrequestid_ = new ::std::string;
  }
  initialrequestid_->assign(value);
}
inline void ResolutionInfo::set_initialrequestid(const char* value, size_t size) {
  set_has_initialrequestid();
  if (initialrequestid_ == &::google::protobuf::internal::kEmptyString) {
    initialrequestid_ = new ::std::string;
  }
  initialrequestid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ResolutionInfo::mutable_initialrequestid() {
  set_has_initialrequestid();
  if (initialrequestid_ == &::google::protobuf::internal::kEmptyString) {
    initialrequestid_ = new ::std::string;
  }
  return initialrequestid_;
}
inline ::std::string* ResolutionInfo::release_initialrequestid() {
  clear_has_initialrequestid();
  if (initialrequestid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = initialrequestid_;
    initialrequestid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ResolutionInfo::set_allocated_initialrequestid(::std::string* initialrequestid) {
  if (initialrequestid_ != &::google::protobuf::internal::kEmptyString) {
    delete initialrequestid_;
  }
  if (initialrequestid) {
    set_has_initialrequestid();
    initialrequestid_ = initialrequestid;
  } else {
    clear_has_initialrequestid();
    initialrequestid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Events
}  // namespace Proto
}  // namespace Api
}  // namespace Diadoc

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Diadoc::Api::Proto::Events::ResolutionType>() {
  return ::Diadoc::Api::Proto::Events::ResolutionType_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_Events_2fResolutionInfo_2eproto__INCLUDED
