// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Events/DiadocMessage.PostApi.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "DiadocMessage.PostApi.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace Diadoc {
namespace Api {
namespace Proto {
namespace Events {

namespace {

const ::google::protobuf::Descriptor* MessageToPost_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MessageToPost_reflection_ = NULL;
const ::google::protobuf::Descriptor* XmlDocumentAttachment_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  XmlDocumentAttachment_reflection_ = NULL;
const ::google::protobuf::Descriptor* NonformalizedAttachment_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NonformalizedAttachment_reflection_ = NULL;
const ::google::protobuf::Descriptor* BasicDocumentAttachment_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BasicDocumentAttachment_reflection_ = NULL;
const ::google::protobuf::Descriptor* Torg13Attachment_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Torg13Attachment_reflection_ = NULL;
const ::google::protobuf::Descriptor* AcceptanceCertificateAttachment_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AcceptanceCertificateAttachment_reflection_ = NULL;
const ::google::protobuf::Descriptor* TrustConnectionRequestAttachment_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TrustConnectionRequestAttachment_reflection_ = NULL;
const ::google::protobuf::Descriptor* StructuredDataAttachment_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StructuredDataAttachment_reflection_ = NULL;
const ::google::protobuf::Descriptor* PriceListAttachment_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PriceListAttachment_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReconciliationActAttachment_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReconciliationActAttachment_reflection_ = NULL;
const ::google::protobuf::Descriptor* ContractAttachment_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ContractAttachment_reflection_ = NULL;
const ::google::protobuf::Descriptor* ServiceDetailsAttachment_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ServiceDetailsAttachment_reflection_ = NULL;
const ::google::protobuf::Descriptor* MessagePatchToPost_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MessagePatchToPost_reflection_ = NULL;
const ::google::protobuf::Descriptor* ResolutionRequestAttachment_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ResolutionRequestAttachment_reflection_ = NULL;
const ::google::protobuf::Descriptor* ResolutionRequestCancellationAttachment_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ResolutionRequestCancellationAttachment_reflection_ = NULL;
const ::google::protobuf::Descriptor* ResolutionRequestDenialCancellationAttachment_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ResolutionRequestDenialCancellationAttachment_reflection_ = NULL;
const ::google::protobuf::Descriptor* ResolutionRequestDenialAttachment_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ResolutionRequestDenialAttachment_reflection_ = NULL;
const ::google::protobuf::Descriptor* ResolutionAttachment_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ResolutionAttachment_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReceiptAttachment_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReceiptAttachment_reflection_ = NULL;
const ::google::protobuf::Descriptor* CorrectionRequestAttachment_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CorrectionRequestAttachment_reflection_ = NULL;
const ::google::protobuf::Descriptor* DocumentSignature_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DocumentSignature_reflection_ = NULL;
const ::google::protobuf::Descriptor* RequestedSignatureRejection_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RequestedSignatureRejection_reflection_ = NULL;
const ::google::protobuf::Descriptor* SignedContent_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SignedContent_reflection_ = NULL;
const ::google::protobuf::Descriptor* DraftToSend_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DraftToSend_reflection_ = NULL;
const ::google::protobuf::Descriptor* MessageToSend_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MessageToSend_reflection_ = NULL;
const ::google::protobuf::Descriptor* RevocationRequestAttachment_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RevocationRequestAttachment_reflection_ = NULL;
const ::google::protobuf::Descriptor* XmlSignatureRejectionAttachment_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  XmlSignatureRejectionAttachment_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_Events_2fDiadocMessage_2ePostApi_2eproto() {
  protobuf_AddDesc_Events_2fDiadocMessage_2ePostApi_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "Events/DiadocMessage.PostApi.proto");
  GOOGLE_CHECK(file != NULL);
  MessageToPost_descriptor_ = file->message_type(0);
  static const int MessageToPost_offsets_[25] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageToPost, fromboxid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageToPost, toboxid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageToPost, invoices_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageToPost, nonformalizeddocuments_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageToPost, torg12documents_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageToPost, trustconnectionrequest_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageToPost, acceptancecertificates_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageToPost, structureddataattachments_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageToPost, proformainvoices_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageToPost, xmltorg12sellertitles_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageToPost, xmlacceptancecertificatesellertitles_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageToPost, todepartmentid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageToPost, isdraft_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageToPost, lockdraft_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageToPost, strictdraftvalidation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageToPost, isinternal_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageToPost, fromdepartmentid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageToPost, delaysend_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageToPost, pricelists_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageToPost, pricelistagreements_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageToPost, certificateregistries_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageToPost, reconciliationacts_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageToPost, contracts_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageToPost, torg13documents_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageToPost, servicedetailsdocuments_),
  };
  MessageToPost_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MessageToPost_descriptor_,
      MessageToPost::default_instance_,
      MessageToPost_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageToPost, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageToPost, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MessageToPost));
  XmlDocumentAttachment_descriptor_ = file->message_type(1);
  static const int XmlDocumentAttachment_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(XmlDocumentAttachment, signedcontent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(XmlDocumentAttachment, comment_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(XmlDocumentAttachment, initialdocumentids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(XmlDocumentAttachment, subordinatedocumentids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(XmlDocumentAttachment, customdocumentid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(XmlDocumentAttachment, needreceipt_),
  };
  XmlDocumentAttachment_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      XmlDocumentAttachment_descriptor_,
      XmlDocumentAttachment::default_instance_,
      XmlDocumentAttachment_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(XmlDocumentAttachment, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(XmlDocumentAttachment, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(XmlDocumentAttachment));
  NonformalizedAttachment_descriptor_ = file->message_type(2);
  static const int NonformalizedAttachment_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NonformalizedAttachment, signedcontent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NonformalizedAttachment, filename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NonformalizedAttachment, comment_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NonformalizedAttachment, needrecipientsignature_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NonformalizedAttachment, initialdocumentids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NonformalizedAttachment, subordinatedocumentids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NonformalizedAttachment, documentdate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NonformalizedAttachment, documentnumber_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NonformalizedAttachment, customdocumentid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NonformalizedAttachment, needreceipt_),
  };
  NonformalizedAttachment_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NonformalizedAttachment_descriptor_,
      NonformalizedAttachment::default_instance_,
      NonformalizedAttachment_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NonformalizedAttachment, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NonformalizedAttachment, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NonformalizedAttachment));
  BasicDocumentAttachment_descriptor_ = file->message_type(3);
  static const int BasicDocumentAttachment_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BasicDocumentAttachment, signedcontent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BasicDocumentAttachment, filename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BasicDocumentAttachment, comment_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BasicDocumentAttachment, initialdocumentids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BasicDocumentAttachment, subordinatedocumentids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BasicDocumentAttachment, documentdate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BasicDocumentAttachment, documentnumber_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BasicDocumentAttachment, total_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BasicDocumentAttachment, customdocumentid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BasicDocumentAttachment, vat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BasicDocumentAttachment, grounds_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BasicDocumentAttachment, needreceipt_),
  };
  BasicDocumentAttachment_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BasicDocumentAttachment_descriptor_,
      BasicDocumentAttachment::default_instance_,
      BasicDocumentAttachment_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BasicDocumentAttachment, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BasicDocumentAttachment, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BasicDocumentAttachment));
  Torg13Attachment_descriptor_ = file->message_type(4);
  static const int Torg13Attachment_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Torg13Attachment, signedcontent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Torg13Attachment, filename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Torg13Attachment, comment_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Torg13Attachment, initialdocumentids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Torg13Attachment, subordinatedocumentids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Torg13Attachment, documentdate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Torg13Attachment, documentnumber_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Torg13Attachment, total_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Torg13Attachment, customdocumentid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Torg13Attachment, grounds_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Torg13Attachment, needreceipt_),
  };
  Torg13Attachment_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Torg13Attachment_descriptor_,
      Torg13Attachment::default_instance_,
      Torg13Attachment_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Torg13Attachment, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Torg13Attachment, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Torg13Attachment));
  AcceptanceCertificateAttachment_descriptor_ = file->message_type(5);
  static const int AcceptanceCertificateAttachment_offsets_[13] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AcceptanceCertificateAttachment, signedcontent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AcceptanceCertificateAttachment, filename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AcceptanceCertificateAttachment, comment_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AcceptanceCertificateAttachment, initialdocumentids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AcceptanceCertificateAttachment, subordinatedocumentids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AcceptanceCertificateAttachment, documentdate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AcceptanceCertificateAttachment, documentnumber_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AcceptanceCertificateAttachment, total_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AcceptanceCertificateAttachment, customdocumentid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AcceptanceCertificateAttachment, vat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AcceptanceCertificateAttachment, grounds_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AcceptanceCertificateAttachment, needreceipt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AcceptanceCertificateAttachment, needrecipientsignature_),
  };
  AcceptanceCertificateAttachment_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AcceptanceCertificateAttachment_descriptor_,
      AcceptanceCertificateAttachment::default_instance_,
      AcceptanceCertificateAttachment_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AcceptanceCertificateAttachment, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AcceptanceCertificateAttachment, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AcceptanceCertificateAttachment));
  TrustConnectionRequestAttachment_descriptor_ = file->message_type(6);
  static const int TrustConnectionRequestAttachment_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrustConnectionRequestAttachment, signedcontent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrustConnectionRequestAttachment, filename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrustConnectionRequestAttachment, comment_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrustConnectionRequestAttachment, customdocumentid_),
  };
  TrustConnectionRequestAttachment_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TrustConnectionRequestAttachment_descriptor_,
      TrustConnectionRequestAttachment::default_instance_,
      TrustConnectionRequestAttachment_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrustConnectionRequestAttachment, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrustConnectionRequestAttachment, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TrustConnectionRequestAttachment));
  StructuredDataAttachment_descriptor_ = file->message_type(7);
  static const int StructuredDataAttachment_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StructuredDataAttachment, content_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StructuredDataAttachment, filename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StructuredDataAttachment, parentcustomdocumentid_),
  };
  StructuredDataAttachment_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StructuredDataAttachment_descriptor_,
      StructuredDataAttachment::default_instance_,
      StructuredDataAttachment_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StructuredDataAttachment, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StructuredDataAttachment, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StructuredDataAttachment));
  PriceListAttachment_descriptor_ = file->message_type(8);
  static const int PriceListAttachment_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PriceListAttachment, signedcontent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PriceListAttachment, filename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PriceListAttachment, comment_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PriceListAttachment, initialdocumentids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PriceListAttachment, subordinatedocumentids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PriceListAttachment, customdocumentid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PriceListAttachment, documentdate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PriceListAttachment, documentnumber_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PriceListAttachment, pricelisteffectivedate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PriceListAttachment, contractdocumentdate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PriceListAttachment, contractdocumentnumber_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PriceListAttachment, needreceipt_),
  };
  PriceListAttachment_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PriceListAttachment_descriptor_,
      PriceListAttachment::default_instance_,
      PriceListAttachment_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PriceListAttachment, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PriceListAttachment, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PriceListAttachment));
  ReconciliationActAttachment_descriptor_ = file->message_type(9);
  static const int ReconciliationActAttachment_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReconciliationActAttachment, signedcontent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReconciliationActAttachment, filename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReconciliationActAttachment, comment_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReconciliationActAttachment, initialdocumentids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReconciliationActAttachment, subordinatedocumentids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReconciliationActAttachment, documentdate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReconciliationActAttachment, documentnumber_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReconciliationActAttachment, customdocumentid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReconciliationActAttachment, needreceipt_),
  };
  ReconciliationActAttachment_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReconciliationActAttachment_descriptor_,
      ReconciliationActAttachment::default_instance_,
      ReconciliationActAttachment_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReconciliationActAttachment, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReconciliationActAttachment, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReconciliationActAttachment));
  ContractAttachment_descriptor_ = file->message_type(10);
  static const int ContractAttachment_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContractAttachment, signedcontent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContractAttachment, filename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContractAttachment, comment_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContractAttachment, initialdocumentids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContractAttachment, subordinatedocumentids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContractAttachment, customdocumentid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContractAttachment, documentdate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContractAttachment, documentnumber_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContractAttachment, contractprice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContractAttachment, contracttype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContractAttachment, needreceipt_),
  };
  ContractAttachment_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ContractAttachment_descriptor_,
      ContractAttachment::default_instance_,
      ContractAttachment_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContractAttachment, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContractAttachment, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ContractAttachment));
  ServiceDetailsAttachment_descriptor_ = file->message_type(11);
  static const int ServiceDetailsAttachment_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceDetailsAttachment, signedcontent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceDetailsAttachment, filename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceDetailsAttachment, comment_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceDetailsAttachment, initialdocumentids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceDetailsAttachment, subordinatedocumentids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceDetailsAttachment, documentdate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceDetailsAttachment, documentnumber_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceDetailsAttachment, customdocumentid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceDetailsAttachment, needreceipt_),
  };
  ServiceDetailsAttachment_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ServiceDetailsAttachment_descriptor_,
      ServiceDetailsAttachment::default_instance_,
      ServiceDetailsAttachment_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceDetailsAttachment, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceDetailsAttachment, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ServiceDetailsAttachment));
  MessagePatchToPost_descriptor_ = file->message_type(12);
  static const int MessagePatchToPost_offsets_[15] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessagePatchToPost, boxid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessagePatchToPost, messageid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessagePatchToPost, receipts_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessagePatchToPost, correctionrequests_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessagePatchToPost, requestedsignatures_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessagePatchToPost, requestedsignaturerejections_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessagePatchToPost, xmltorg12buyertitles_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessagePatchToPost, xmlacceptancecertificatebuyertitles_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessagePatchToPost, resolutions_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessagePatchToPost, resolutionrequests_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessagePatchToPost, resolutionrequestcancellations_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessagePatchToPost, resolutionrequestdenials_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessagePatchToPost, resolutionrequestdenialcancellations_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessagePatchToPost, revocationrequests_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessagePatchToPost, xmlsignaturerejections_),
  };
  MessagePatchToPost_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MessagePatchToPost_descriptor_,
      MessagePatchToPost::default_instance_,
      MessagePatchToPost_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessagePatchToPost, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessagePatchToPost, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MessagePatchToPost));
  ResolutionRequestAttachment_descriptor_ = file->message_type(13);
  static const int ResolutionRequestAttachment_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResolutionRequestAttachment, initialdocumentid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResolutionRequestAttachment, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResolutionRequestAttachment, targetuserid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResolutionRequestAttachment, targetdepartmentid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResolutionRequestAttachment, comment_),
  };
  ResolutionRequestAttachment_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ResolutionRequestAttachment_descriptor_,
      ResolutionRequestAttachment::default_instance_,
      ResolutionRequestAttachment_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResolutionRequestAttachment, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResolutionRequestAttachment, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ResolutionRequestAttachment));
  ResolutionRequestCancellationAttachment_descriptor_ = file->message_type(14);
  static const int ResolutionRequestCancellationAttachment_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResolutionRequestCancellationAttachment, initialresolutionrequestid_),
  };
  ResolutionRequestCancellationAttachment_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ResolutionRequestCancellationAttachment_descriptor_,
      ResolutionRequestCancellationAttachment::default_instance_,
      ResolutionRequestCancellationAttachment_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResolutionRequestCancellationAttachment, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResolutionRequestCancellationAttachment, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ResolutionRequestCancellationAttachment));
  ResolutionRequestDenialCancellationAttachment_descriptor_ = file->message_type(15);
  static const int ResolutionRequestDenialCancellationAttachment_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResolutionRequestDenialCancellationAttachment, initialresolutionrequestdenialid_),
  };
  ResolutionRequestDenialCancellationAttachment_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ResolutionRequestDenialCancellationAttachment_descriptor_,
      ResolutionRequestDenialCancellationAttachment::default_instance_,
      ResolutionRequestDenialCancellationAttachment_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResolutionRequestDenialCancellationAttachment, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResolutionRequestDenialCancellationAttachment, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ResolutionRequestDenialCancellationAttachment));
  ResolutionRequestDenialAttachment_descriptor_ = file->message_type(16);
  static const int ResolutionRequestDenialAttachment_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResolutionRequestDenialAttachment, initialresolutionrequestid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResolutionRequestDenialAttachment, comment_),
  };
  ResolutionRequestDenialAttachment_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ResolutionRequestDenialAttachment_descriptor_,
      ResolutionRequestDenialAttachment::default_instance_,
      ResolutionRequestDenialAttachment_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResolutionRequestDenialAttachment, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResolutionRequestDenialAttachment, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ResolutionRequestDenialAttachment));
  ResolutionAttachment_descriptor_ = file->message_type(17);
  static const int ResolutionAttachment_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResolutionAttachment, initialdocumentid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResolutionAttachment, resolutiontype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResolutionAttachment, comment_),
  };
  ResolutionAttachment_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ResolutionAttachment_descriptor_,
      ResolutionAttachment::default_instance_,
      ResolutionAttachment_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResolutionAttachment, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResolutionAttachment, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ResolutionAttachment));
  ReceiptAttachment_descriptor_ = file->message_type(18);
  static const int ReceiptAttachment_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReceiptAttachment, parententityid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReceiptAttachment, signedcontent_),
  };
  ReceiptAttachment_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReceiptAttachment_descriptor_,
      ReceiptAttachment::default_instance_,
      ReceiptAttachment_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReceiptAttachment, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReceiptAttachment, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReceiptAttachment));
  CorrectionRequestAttachment_descriptor_ = file->message_type(19);
  static const int CorrectionRequestAttachment_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CorrectionRequestAttachment, parententityid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CorrectionRequestAttachment, signedcontent_),
  };
  CorrectionRequestAttachment_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CorrectionRequestAttachment_descriptor_,
      CorrectionRequestAttachment::default_instance_,
      CorrectionRequestAttachment_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CorrectionRequestAttachment, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CorrectionRequestAttachment, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CorrectionRequestAttachment));
  DocumentSignature_descriptor_ = file->message_type(20);
  static const int DocumentSignature_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentSignature, parententityid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentSignature, signature_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentSignature, signbyattorney_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentSignature, signwithtestsignature_),
  };
  DocumentSignature_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DocumentSignature_descriptor_,
      DocumentSignature::default_instance_,
      DocumentSignature_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentSignature, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentSignature, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DocumentSignature));
  RequestedSignatureRejection_descriptor_ = file->message_type(21);
  static const int RequestedSignatureRejection_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestedSignatureRejection, parententityid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestedSignatureRejection, signedcontent_),
  };
  RequestedSignatureRejection_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RequestedSignatureRejection_descriptor_,
      RequestedSignatureRejection::default_instance_,
      RequestedSignatureRejection_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestedSignatureRejection, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestedSignatureRejection, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RequestedSignatureRejection));
  SignedContent_descriptor_ = file->message_type(22);
  static const int SignedContent_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignedContent, content_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignedContent, signature_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignedContent, signbyattorney_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignedContent, nameonshelf_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignedContent, signwithtestsignature_),
  };
  SignedContent_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SignedContent_descriptor_,
      SignedContent::default_instance_,
      SignedContent_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignedContent, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignedContent, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SignedContent));
  DraftToSend_descriptor_ = file->message_type(23);
  static const int DraftToSend_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DraftToSend, boxid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DraftToSend, draftid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DraftToSend, toboxid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DraftToSend, todepartmentid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DraftToSend, documentsignatures_),
  };
  DraftToSend_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DraftToSend_descriptor_,
      DraftToSend::default_instance_,
      DraftToSend_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DraftToSend, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DraftToSend, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DraftToSend));
  MessageToSend_descriptor_ = file->message_type(24);
  static const int MessageToSend_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageToSend, boxid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageToSend, messageid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageToSend, documentsignatures_),
  };
  MessageToSend_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MessageToSend_descriptor_,
      MessageToSend::default_instance_,
      MessageToSend_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageToSend, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageToSend, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MessageToSend));
  RevocationRequestAttachment_descriptor_ = file->message_type(25);
  static const int RevocationRequestAttachment_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RevocationRequestAttachment, parententityid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RevocationRequestAttachment, signedcontent_),
  };
  RevocationRequestAttachment_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RevocationRequestAttachment_descriptor_,
      RevocationRequestAttachment::default_instance_,
      RevocationRequestAttachment_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RevocationRequestAttachment, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RevocationRequestAttachment, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RevocationRequestAttachment));
  XmlSignatureRejectionAttachment_descriptor_ = file->message_type(26);
  static const int XmlSignatureRejectionAttachment_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(XmlSignatureRejectionAttachment, parententityid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(XmlSignatureRejectionAttachment, signedcontent_),
  };
  XmlSignatureRejectionAttachment_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      XmlSignatureRejectionAttachment_descriptor_,
      XmlSignatureRejectionAttachment::default_instance_,
      XmlSignatureRejectionAttachment_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(XmlSignatureRejectionAttachment, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(XmlSignatureRejectionAttachment, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(XmlSignatureRejectionAttachment));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_Events_2fDiadocMessage_2ePostApi_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MessageToPost_descriptor_, &MessageToPost::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    XmlDocumentAttachment_descriptor_, &XmlDocumentAttachment::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NonformalizedAttachment_descriptor_, &NonformalizedAttachment::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BasicDocumentAttachment_descriptor_, &BasicDocumentAttachment::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Torg13Attachment_descriptor_, &Torg13Attachment::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AcceptanceCertificateAttachment_descriptor_, &AcceptanceCertificateAttachment::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TrustConnectionRequestAttachment_descriptor_, &TrustConnectionRequestAttachment::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StructuredDataAttachment_descriptor_, &StructuredDataAttachment::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PriceListAttachment_descriptor_, &PriceListAttachment::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReconciliationActAttachment_descriptor_, &ReconciliationActAttachment::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ContractAttachment_descriptor_, &ContractAttachment::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ServiceDetailsAttachment_descriptor_, &ServiceDetailsAttachment::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MessagePatchToPost_descriptor_, &MessagePatchToPost::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ResolutionRequestAttachment_descriptor_, &ResolutionRequestAttachment::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ResolutionRequestCancellationAttachment_descriptor_, &ResolutionRequestCancellationAttachment::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ResolutionRequestDenialCancellationAttachment_descriptor_, &ResolutionRequestDenialCancellationAttachment::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ResolutionRequestDenialAttachment_descriptor_, &ResolutionRequestDenialAttachment::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ResolutionAttachment_descriptor_, &ResolutionAttachment::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReceiptAttachment_descriptor_, &ReceiptAttachment::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CorrectionRequestAttachment_descriptor_, &CorrectionRequestAttachment::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DocumentSignature_descriptor_, &DocumentSignature::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RequestedSignatureRejection_descriptor_, &RequestedSignatureRejection::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SignedContent_descriptor_, &SignedContent::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DraftToSend_descriptor_, &DraftToSend::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MessageToSend_descriptor_, &MessageToSend::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RevocationRequestAttachment_descriptor_, &RevocationRequestAttachment::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    XmlSignatureRejectionAttachment_descriptor_, &XmlSignatureRejectionAttachment::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_Events_2fDiadocMessage_2ePostApi_2eproto() {
  delete MessageToPost::default_instance_;
  delete MessageToPost_reflection_;
  delete XmlDocumentAttachment::default_instance_;
  delete XmlDocumentAttachment_reflection_;
  delete NonformalizedAttachment::default_instance_;
  delete NonformalizedAttachment_reflection_;
  delete BasicDocumentAttachment::default_instance_;
  delete BasicDocumentAttachment_reflection_;
  delete Torg13Attachment::default_instance_;
  delete Torg13Attachment_reflection_;
  delete AcceptanceCertificateAttachment::default_instance_;
  delete AcceptanceCertificateAttachment_reflection_;
  delete TrustConnectionRequestAttachment::default_instance_;
  delete TrustConnectionRequestAttachment_reflection_;
  delete StructuredDataAttachment::default_instance_;
  delete StructuredDataAttachment_reflection_;
  delete PriceListAttachment::default_instance_;
  delete PriceListAttachment_reflection_;
  delete ReconciliationActAttachment::default_instance_;
  delete ReconciliationActAttachment_reflection_;
  delete ContractAttachment::default_instance_;
  delete ContractAttachment_reflection_;
  delete ServiceDetailsAttachment::default_instance_;
  delete ServiceDetailsAttachment_reflection_;
  delete MessagePatchToPost::default_instance_;
  delete MessagePatchToPost_reflection_;
  delete ResolutionRequestAttachment::default_instance_;
  delete ResolutionRequestAttachment_reflection_;
  delete ResolutionRequestCancellationAttachment::default_instance_;
  delete ResolutionRequestCancellationAttachment_reflection_;
  delete ResolutionRequestDenialCancellationAttachment::default_instance_;
  delete ResolutionRequestDenialCancellationAttachment_reflection_;
  delete ResolutionRequestDenialAttachment::default_instance_;
  delete ResolutionRequestDenialAttachment_reflection_;
  delete ResolutionAttachment::default_instance_;
  delete ResolutionAttachment_reflection_;
  delete ReceiptAttachment::default_instance_;
  delete ReceiptAttachment_reflection_;
  delete CorrectionRequestAttachment::default_instance_;
  delete CorrectionRequestAttachment_reflection_;
  delete DocumentSignature::default_instance_;
  delete DocumentSignature_reflection_;
  delete RequestedSignatureRejection::default_instance_;
  delete RequestedSignatureRejection_reflection_;
  delete SignedContent::default_instance_;
  delete SignedContent_reflection_;
  delete DraftToSend::default_instance_;
  delete DraftToSend_reflection_;
  delete MessageToSend::default_instance_;
  delete MessageToSend_reflection_;
  delete RevocationRequestAttachment::default_instance_;
  delete RevocationRequestAttachment_reflection_;
  delete XmlSignatureRejectionAttachment::default_instance_;
  delete XmlSignatureRejectionAttachment_reflection_;
}

void protobuf_AddDesc_Events_2fDiadocMessage_2ePostApi_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::Diadoc::Api::Proto::protobuf_AddDesc_DocumentId_2eproto();
  ::Diadoc::Api::Proto::Events::protobuf_AddDesc_Events_2fResolutionInfo_2eproto();
  ::Diadoc::Api::Proto::Events::protobuf_AddDesc_Events_2fResolutionRequestInfo_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\"Events/DiadocMessage.PostApi.proto\022\027Di"
    "adoc.Api.Proto.Events\032\020DocumentId.proto\032"
    "\033Events/ResolutionInfo.proto\032\"Events/Res"
    "olutionRequestInfo.proto\"\340\013\n\rMessageToPo"
    "st\022\021\n\tFromBoxId\030\001 \002(\t\022\017\n\007ToBoxId\030\002 \001(\t\022@"
    "\n\010Invoices\030\003 \003(\0132..Diadoc.Api.Proto.Even"
    "ts.XmlDocumentAttachment\022P\n\026Nonformalize"
    "dDocuments\030\004 \003(\01320.Diadoc.Api.Proto.Even"
    "ts.NonformalizedAttachment\022I\n\017Torg12Docu"
    "ments\030\005 \003(\01320.Diadoc.Api.Proto.Events.Ba"
    "sicDocumentAttachment\022Y\n\026TrustConnection"
    "Request\030\006 \001(\01329.Diadoc.Api.Proto.Events."
    "TrustConnectionRequestAttachment\022X\n\026Acce"
    "ptanceCertificates\030\007 \003(\01328.Diadoc.Api.Pr"
    "oto.Events.AcceptanceCertificateAttachme"
    "nt\022T\n\031StructuredDataAttachments\030\010 \003(\01321."
    "Diadoc.Api.Proto.Events.StructuredDataAt"
    "tachment\022J\n\020ProformaInvoices\030\t \003(\01320.Dia"
    "doc.Api.Proto.Events.BasicDocumentAttach"
    "ment\022M\n\025XmlTorg12SellerTitles\030\n \003(\0132..Di"
    "adoc.Api.Proto.Events.XmlDocumentAttachm"
    "ent\022\\\n$XmlAcceptanceCertificateSellerTit"
    "les\030\013 \003(\0132..Diadoc.Api.Proto.Events.XmlD"
    "ocumentAttachment\022\026\n\016ToDepartmentId\030\014 \001("
    "\t\022\026\n\007IsDraft\030\r \001(\010:\005false\022\030\n\tLockDraft\030\016"
    " \001(\010:\005false\022#\n\025StrictDraftValidation\030\017 \001"
    "(\010:\004true\022\031\n\nIsInternal\030\020 \001(\010:\005false\022\030\n\020F"
    "romDepartmentId\030\021 \001(\t\022\030\n\tDelaySend\030\022 \001(\010"
    ":\005false\022@\n\nPriceLists\030\023 \003(\0132,.Diadoc.Api"
    ".Proto.Events.PriceListAttachment\022M\n\023Pri"
    "ceListAgreements\030\024 \003(\01320.Diadoc.Api.Prot"
    "o.Events.NonformalizedAttachment\022O\n\025Cert"
    "ificateRegistries\030\025 \003(\01320.Diadoc.Api.Pro"
    "to.Events.NonformalizedAttachment\022P\n\022Rec"
    "onciliationActs\030\026 \003(\01324.Diadoc.Api.Proto"
    ".Events.ReconciliationActAttachment\022>\n\tC"
    "ontracts\030\027 \003(\0132+.Diadoc.Api.Proto.Events"
    ".ContractAttachment\022B\n\017Torg13Documents\030\030"
    " \003(\0132).Diadoc.Api.Proto.Events.Torg13Att"
    "achment\022R\n\027ServiceDetailsDocuments\030\031 \003(\013"
    "21.Diadoc.Api.Proto.Events.ServiceDetail"
    "sAttachment\"\225\002\n\025XmlDocumentAttachment\022=\n"
    "\rSignedContent\030\001 \002(\0132&.Diadoc.Api.Proto."
    "Events.SignedContent\022\017\n\007Comment\030\003 \001(\t\0228\n"
    "\022InitialDocumentIds\030\004 \003(\0132\034.Diadoc.Api.P"
    "roto.DocumentId\022<\n\026SubordinateDocumentId"
    "s\030\005 \003(\0132\034.Diadoc.Api.Proto.DocumentId\022\030\n"
    "\020CustomDocumentId\030\006 \001(\t\022\032\n\013NeedReceipt\030\007"
    " \001(\010:\005false\"\376\002\n\027NonformalizedAttachment\022"
    "=\n\rSignedContent\030\001 \002(\0132&.Diadoc.Api.Prot"
    "o.Events.SignedContent\022\020\n\010FileName\030\002 \002(\t"
    "\022\017\n\007Comment\030\003 \001(\t\022%\n\026NeedRecipientSignat"
    "ure\030\004 \001(\010:\005false\0228\n\022InitialDocumentIds\030\005"
    " \003(\0132\034.Diadoc.Api.Proto.DocumentId\022<\n\026Su"
    "bordinateDocumentIds\030\006 \003(\0132\034.Diadoc.Api."
    "Proto.DocumentId\022\024\n\014DocumentDate\030\007 \001(\t\022\026"
    "\n\016DocumentNumber\030\010 \001(\t\022\030\n\020CustomDocument"
    "Id\030\t \001(\t\022\032\n\013NeedReceipt\030\n \001(\010:\005false\"\204\003\n"
    "\027BasicDocumentAttachment\022=\n\rSignedConten"
    "t\030\001 \002(\0132&.Diadoc.Api.Proto.Events.Signed"
    "Content\022\020\n\010FileName\030\002 \002(\t\022\017\n\007Comment\030\003 \001"
    "(\t\0228\n\022InitialDocumentIds\030\004 \003(\0132\034.Diadoc."
    "Api.Proto.DocumentId\022<\n\026SubordinateDocum"
    "entIds\030\005 \003(\0132\034.Diadoc.Api.Proto.Document"
    "Id\022\024\n\014DocumentDate\030\006 \002(\t\022\026\n\016DocumentNumb"
    "er\030\007 \002(\t\022\r\n\005Total\030\010 \002(\t\022\030\n\020CustomDocumen"
    "tId\030\t \001(\t\022\013\n\003Vat\030\n \001(\t\022\017\n\007Grounds\030\013 \001(\t\022"
    "\032\n\013NeedReceipt\030\014 \001(\010:\005false\"\360\002\n\020Torg13At"
    "tachment\022=\n\rSignedContent\030\001 \002(\0132&.Diadoc"
    ".Api.Proto.Events.SignedContent\022\020\n\010FileN"
    "ame\030\002 \002(\t\022\017\n\007Comment\030\003 \001(\t\0228\n\022InitialDoc"
    "umentIds\030\004 \003(\0132\034.Diadoc.Api.Proto.Docume"
    "ntId\022<\n\026SubordinateDocumentIds\030\005 \003(\0132\034.D"
    "iadoc.Api.Proto.DocumentId\022\024\n\014DocumentDa"
    "te\030\006 \002(\t\022\026\n\016DocumentNumber\030\007 \002(\t\022\r\n\005Tota"
    "l\030\010 \002(\t\022\030\n\020CustomDocumentId\030\t \001(\t\022\017\n\007Gro"
    "unds\030\013 \001(\t\022\032\n\013NeedReceipt\030\014 \001(\010:\005false\"\262"
    "\003\n\037AcceptanceCertificateAttachment\022=\n\rSi"
    "gnedContent\030\001 \002(\0132&.Diadoc.Api.Proto.Eve"
    "nts.SignedContent\022\020\n\010FileName\030\002 \002(\t\022\017\n\007C"
    "omment\030\003 \001(\t\0228\n\022InitialDocumentIds\030\004 \003(\013"
    "2\034.Diadoc.Api.Proto.DocumentId\022<\n\026Subord"
    "inateDocumentIds\030\005 \003(\0132\034.Diadoc.Api.Prot"
    "o.DocumentId\022\024\n\014DocumentDate\030\006 \002(\t\022\026\n\016Do"
    "cumentNumber\030\007 \002(\t\022\r\n\005Total\030\010 \002(\t\022\030\n\020Cus"
    "tomDocumentId\030\t \001(\t\022\013\n\003Vat\030\n \001(\t\022\017\n\007Grou"
    "nds\030\013 \001(\t\022\032\n\013NeedReceipt\030\014 \001(\010:\005false\022$\n"
    "\026NeedRecipientSignature\030\r \001(\010:\004true\"\236\001\n "
    "TrustConnectionRequestAttachment\022=\n\rSign"
    "edContent\030\001 \002(\0132&.Diadoc.Api.Proto.Event"
    "s.SignedContent\022\020\n\010FileName\030\002 \002(\t\022\017\n\007Com"
    "ment\030\003 \001(\t\022\030\n\020CustomDocumentId\030\004 \001(\t\"]\n\030"
    "StructuredDataAttachment\022\017\n\007Content\030\001 \002("
    "\014\022\020\n\010FileName\030\002 \002(\t\022\036\n\026ParentCustomDocum"
    "entId\030\003 \002(\t\"\261\003\n\023PriceListAttachment\022=\n\rS"
    "ignedContent\030\001 \002(\0132&.Diadoc.Api.Proto.Ev"
    "ents.SignedContent\022\020\n\010FileName\030\002 \002(\t\022\017\n\007"
    "Comment\030\003 \001(\t\0228\n\022InitialDocumentIds\030\004 \003("
    "\0132\034.Diadoc.Api.Proto.DocumentId\022<\n\026Subor"
    "dinateDocumentIds\030\005 \003(\0132\034.Diadoc.Api.Pro"
    "to.DocumentId\022\030\n\020CustomDocumentId\030\006 \001(\t\022"
    "\024\n\014DocumentDate\030\007 \002(\t\022\026\n\016DocumentNumber\030"
    "\010 \002(\t\022\036\n\026PriceListEffectiveDate\030\t \002(\t\022\034\n"
    "\024ContractDocumentDate\030\n \002(\t\022\036\n\026ContractD"
    "ocumentNumber\030\013 \002(\t\022\032\n\013NeedReceipt\030\014 \001(\010"
    ":\005false\"\333\002\n\033ReconciliationActAttachment\022"
    "=\n\rSignedContent\030\001 \002(\0132&.Diadoc.Api.Prot"
    "o.Events.SignedContent\022\020\n\010FileName\030\002 \002(\t"
    "\022\017\n\007Comment\030\003 \001(\t\0228\n\022InitialDocumentIds\030"
    "\005 \003(\0132\034.Diadoc.Api.Proto.DocumentId\022<\n\026S"
    "ubordinateDocumentIds\030\006 \003(\0132\034.Diadoc.Api"
    ".Proto.DocumentId\022\024\n\014DocumentDate\030\007 \002(\t\022"
    "\026\n\016DocumentNumber\030\010 \002(\t\022\030\n\020CustomDocumen"
    "tId\030\t \001(\t\022\032\n\013NeedReceipt\030\n \001(\010:\005false\"\377\002"
    "\n\022ContractAttachment\022=\n\rSignedContent\030\001 "
    "\002(\0132&.Diadoc.Api.Proto.Events.SignedCont"
    "ent\022\020\n\010FileName\030\002 \002(\t\022\017\n\007Comment\030\003 \001(\t\0228"
    "\n\022InitialDocumentIds\030\004 \003(\0132\034.Diadoc.Api."
    "Proto.DocumentId\022<\n\026SubordinateDocumentI"
    "ds\030\005 \003(\0132\034.Diadoc.Api.Proto.DocumentId\022\030"
    "\n\020CustomDocumentId\030\006 \001(\t\022\024\n\014DocumentDate"
    "\030\007 \002(\t\022\026\n\016DocumentNumber\030\010 \002(\t\022\025\n\rContra"
    "ctPrice\030\t \001(\t\022\024\n\014ContractType\030\n \001(\t\022\032\n\013N"
    "eedReceipt\030\013 \001(\010:\005false\"\330\002\n\030ServiceDetai"
    "lsAttachment\022=\n\rSignedContent\030\001 \002(\0132&.Di"
    "adoc.Api.Proto.Events.SignedContent\022\020\n\010F"
    "ileName\030\002 \002(\t\022\017\n\007Comment\030\003 \001(\t\0228\n\022Initia"
    "lDocumentIds\030\005 \003(\0132\034.Diadoc.Api.Proto.Do"
    "cumentId\022<\n\026SubordinateDocumentIds\030\006 \003(\013"
    "2\034.Diadoc.Api.Proto.DocumentId\022\024\n\014Docume"
    "ntDate\030\007 \001(\t\022\026\n\016DocumentNumber\030\010 \001(\t\022\030\n\020"
    "CustomDocumentId\030\t \001(\t\022\032\n\013NeedReceipt\030\n "
    "\001(\010:\005false\"\216\t\n\022MessagePatchToPost\022\r\n\005Box"
    "Id\030\001 \002(\t\022\021\n\tMessageId\030\002 \002(\t\022<\n\010Receipts\030"
    "\003 \003(\0132*.Diadoc.Api.Proto.Events.ReceiptA"
    "ttachment\022P\n\022CorrectionRequests\030\004 \003(\01324."
    "Diadoc.Api.Proto.Events.CorrectionReques"
    "tAttachment\022G\n\023RequestedSignatures\030\005 \003(\013"
    "2*.Diadoc.Api.Proto.Events.DocumentSigna"
    "ture\022Z\n\034RequestedSignatureRejections\030\006 \003"
    "(\01324.Diadoc.Api.Proto.Events.RequestedSi"
    "gnatureRejection\022H\n\024XmlTorg12BuyerTitles"
    "\030\007 \003(\0132*.Diadoc.Api.Proto.Events.Receipt"
    "Attachment\022W\n#XmlAcceptanceCertificateBu"
    "yerTitles\030\010 \003(\0132*.Diadoc.Api.Proto.Event"
    "s.ReceiptAttachment\022B\n\013Resolutions\030\t \003(\013"
    "2-.Diadoc.Api.Proto.Events.ResolutionAtt"
    "achment\022P\n\022ResolutionRequests\030\n \003(\01324.Di"
    "adoc.Api.Proto.Events.ResolutionRequestA"
    "ttachment\022h\n\036ResolutionRequestCancellati"
    "ons\030\013 \003(\0132@.Diadoc.Api.Proto.Events.Reso"
    "lutionRequestCancellationAttachment\022\\\n\030R"
    "esolutionRequestDenials\030\014 \003(\0132:.Diadoc.A"
    "pi.Proto.Events.ResolutionRequestDenialA"
    "ttachment\022t\n$ResolutionRequestDenialCanc"
    "ellations\030\r \003(\0132F.Diadoc.Api.Proto.Event"
    "s.ResolutionRequestDenialCancellationAtt"
    "achment\022P\n\022RevocationRequests\030\016 \003(\01324.Di"
    "adoc.Api.Proto.Events.RevocationRequestA"
    "ttachment\022X\n\026XmlSignatureRejections\030\017 \003("
    "\01328.Diadoc.Api.Proto.Events.XmlSignature"
    "RejectionAttachment\"\271\001\n\033ResolutionReques"
    "tAttachment\022\031\n\021InitialDocumentId\030\001 \002(\t\022<"
    "\n\004Type\030\002 \002(\0162..Diadoc.Api.Proto.Events.R"
    "esolutionRequestType\022\024\n\014TargetUserId\030\003 \001"
    "(\t\022\032\n\022TargetDepartmentId\030\004 \001(\t\022\017\n\007Commen"
    "t\030\005 \001(\t\"M\n\'ResolutionRequestCancellation"
    "Attachment\022\"\n\032InitialResolutionRequestId"
    "\030\001 \002(\t\"Y\n-ResolutionRequestDenialCancell"
    "ationAttachment\022(\n InitialResolutionRequ"
    "estDenialId\030\001 \002(\t\"X\n!ResolutionRequestDe"
    "nialAttachment\022\"\n\032InitialResolutionReque"
    "stId\030\001 \002(\t\022\017\n\007Comment\030\002 \001(\t\"\203\001\n\024Resoluti"
    "onAttachment\022\031\n\021InitialDocumentId\030\001 \002(\t\022"
    "\?\n\016ResolutionType\030\002 \002(\0162\'.Diadoc.Api.Pro"
    "to.Events.ResolutionType\022\017\n\007Comment\030\003 \001("
    "\t\"j\n\021ReceiptAttachment\022\026\n\016ParentEntityId"
    "\030\001 \002(\t\022=\n\rSignedContent\030\002 \002(\0132&.Diadoc.A"
    "pi.Proto.Events.SignedContent\"t\n\033Correct"
    "ionRequestAttachment\022\026\n\016ParentEntityId\030\001"
    " \002(\t\022=\n\rSignedContent\030\002 \002(\0132&.Diadoc.Api"
    ".Proto.Events.SignedContent\"\203\001\n\021Document"
    "Signature\022\026\n\016ParentEntityId\030\001 \002(\t\022\021\n\tSig"
    "nature\030\002 \001(\014\022\035\n\016SignByAttorney\030\003 \001(\010:\005fa"
    "lse\022$\n\025SignWithTestSignature\030\004 \001(\010:\005fals"
    "e\"t\n\033RequestedSignatureRejection\022\026\n\016Pare"
    "ntEntityId\030\001 \002(\t\022=\n\rSignedContent\030\002 \002(\0132"
    "&.Diadoc.Api.Proto.Events.SignedContent\""
    "\215\001\n\rSignedContent\022\017\n\007Content\030\001 \001(\014\022\021\n\tSi"
    "gnature\030\002 \001(\014\022\035\n\016SignByAttorney\030\003 \001(\010:\005f"
    "alse\022\023\n\013NameOnShelf\030\004 \001(\t\022$\n\025SignWithTes"
    "tSignature\030\005 \001(\010:\005false\"\236\001\n\013DraftToSend\022"
    "\r\n\005BoxId\030\001 \002(\t\022\017\n\007DraftId\030\002 \002(\t\022\017\n\007ToBox"
    "Id\030\003 \001(\t\022\026\n\016ToDepartmentId\030\004 \001(\t\022F\n\022Docu"
    "mentSignatures\030\005 \003(\0132*.Diadoc.Api.Proto."
    "Events.DocumentSignature\"y\n\rMessageToSen"
    "d\022\r\n\005BoxId\030\001 \002(\t\022\021\n\tMessageId\030\002 \002(\t\022F\n\022D"
    "ocumentSignatures\030\003 \003(\0132*.Diadoc.Api.Pro"
    "to.Events.DocumentSignature\"t\n\033Revocatio"
    "nRequestAttachment\022\026\n\016ParentEntityId\030\001 \002"
    "(\t\022=\n\rSignedContent\030\002 \002(\0132&.Diadoc.Api.P"
    "roto.Events.SignedContent\"x\n\037XmlSignatur"
    "eRejectionAttachment\022\026\n\016ParentEntityId\030\001"
    " \002(\t\022=\n\rSignedContent\030\002 \002(\0132&.Diadoc.Api"
    ".Proto.Events.SignedContent", 8187);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Events/DiadocMessage.PostApi.proto", &protobuf_RegisterTypes);
  MessageToPost::default_instance_ = new MessageToPost();
  XmlDocumentAttachment::default_instance_ = new XmlDocumentAttachment();
  NonformalizedAttachment::default_instance_ = new NonformalizedAttachment();
  BasicDocumentAttachment::default_instance_ = new BasicDocumentAttachment();
  Torg13Attachment::default_instance_ = new Torg13Attachment();
  AcceptanceCertificateAttachment::default_instance_ = new AcceptanceCertificateAttachment();
  TrustConnectionRequestAttachment::default_instance_ = new TrustConnectionRequestAttachment();
  StructuredDataAttachment::default_instance_ = new StructuredDataAttachment();
  PriceListAttachment::default_instance_ = new PriceListAttachment();
  ReconciliationActAttachment::default_instance_ = new ReconciliationActAttachment();
  ContractAttachment::default_instance_ = new ContractAttachment();
  ServiceDetailsAttachment::default_instance_ = new ServiceDetailsAttachment();
  MessagePatchToPost::default_instance_ = new MessagePatchToPost();
  ResolutionRequestAttachment::default_instance_ = new ResolutionRequestAttachment();
  ResolutionRequestCancellationAttachment::default_instance_ = new ResolutionRequestCancellationAttachment();
  ResolutionRequestDenialCancellationAttachment::default_instance_ = new ResolutionRequestDenialCancellationAttachment();
  ResolutionRequestDenialAttachment::default_instance_ = new ResolutionRequestDenialAttachment();
  ResolutionAttachment::default_instance_ = new ResolutionAttachment();
  ReceiptAttachment::default_instance_ = new ReceiptAttachment();
  CorrectionRequestAttachment::default_instance_ = new CorrectionRequestAttachment();
  DocumentSignature::default_instance_ = new DocumentSignature();
  RequestedSignatureRejection::default_instance_ = new RequestedSignatureRejection();
  SignedContent::default_instance_ = new SignedContent();
  DraftToSend::default_instance_ = new DraftToSend();
  MessageToSend::default_instance_ = new MessageToSend();
  RevocationRequestAttachment::default_instance_ = new RevocationRequestAttachment();
  XmlSignatureRejectionAttachment::default_instance_ = new XmlSignatureRejectionAttachment();
  MessageToPost::default_instance_->InitAsDefaultInstance();
  XmlDocumentAttachment::default_instance_->InitAsDefaultInstance();
  NonformalizedAttachment::default_instance_->InitAsDefaultInstance();
  BasicDocumentAttachment::default_instance_->InitAsDefaultInstance();
  Torg13Attachment::default_instance_->InitAsDefaultInstance();
  AcceptanceCertificateAttachment::default_instance_->InitAsDefaultInstance();
  TrustConnectionRequestAttachment::default_instance_->InitAsDefaultInstance();
  StructuredDataAttachment::default_instance_->InitAsDefaultInstance();
  PriceListAttachment::default_instance_->InitAsDefaultInstance();
  ReconciliationActAttachment::default_instance_->InitAsDefaultInstance();
  ContractAttachment::default_instance_->InitAsDefaultInstance();
  ServiceDetailsAttachment::default_instance_->InitAsDefaultInstance();
  MessagePatchToPost::default_instance_->InitAsDefaultInstance();
  ResolutionRequestAttachment::default_instance_->InitAsDefaultInstance();
  ResolutionRequestCancellationAttachment::default_instance_->InitAsDefaultInstance();
  ResolutionRequestDenialCancellationAttachment::default_instance_->InitAsDefaultInstance();
  ResolutionRequestDenialAttachment::default_instance_->InitAsDefaultInstance();
  ResolutionAttachment::default_instance_->InitAsDefaultInstance();
  ReceiptAttachment::default_instance_->InitAsDefaultInstance();
  CorrectionRequestAttachment::default_instance_->InitAsDefaultInstance();
  DocumentSignature::default_instance_->InitAsDefaultInstance();
  RequestedSignatureRejection::default_instance_->InitAsDefaultInstance();
  SignedContent::default_instance_->InitAsDefaultInstance();
  DraftToSend::default_instance_->InitAsDefaultInstance();
  MessageToSend::default_instance_->InitAsDefaultInstance();
  RevocationRequestAttachment::default_instance_->InitAsDefaultInstance();
  XmlSignatureRejectionAttachment::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_Events_2fDiadocMessage_2ePostApi_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_Events_2fDiadocMessage_2ePostApi_2eproto {
  StaticDescriptorInitializer_Events_2fDiadocMessage_2ePostApi_2eproto() {
    protobuf_AddDesc_Events_2fDiadocMessage_2ePostApi_2eproto();
  }
} static_descriptor_initializer_Events_2fDiadocMessage_2ePostApi_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int MessageToPost::kFromBoxIdFieldNumber;
const int MessageToPost::kToBoxIdFieldNumber;
const int MessageToPost::kInvoicesFieldNumber;
const int MessageToPost::kNonformalizedDocumentsFieldNumber;
const int MessageToPost::kTorg12DocumentsFieldNumber;
const int MessageToPost::kTrustConnectionRequestFieldNumber;
const int MessageToPost::kAcceptanceCertificatesFieldNumber;
const int MessageToPost::kStructuredDataAttachmentsFieldNumber;
const int MessageToPost::kProformaInvoicesFieldNumber;
const int MessageToPost::kXmlTorg12SellerTitlesFieldNumber;
const int MessageToPost::kXmlAcceptanceCertificateSellerTitlesFieldNumber;
const int MessageToPost::kToDepartmentIdFieldNumber;
const int MessageToPost::kIsDraftFieldNumber;
const int MessageToPost::kLockDraftFieldNumber;
const int MessageToPost::kStrictDraftValidationFieldNumber;
const int MessageToPost::kIsInternalFieldNumber;
const int MessageToPost::kFromDepartmentIdFieldNumber;
const int MessageToPost::kDelaySendFieldNumber;
const int MessageToPost::kPriceListsFieldNumber;
const int MessageToPost::kPriceListAgreementsFieldNumber;
const int MessageToPost::kCertificateRegistriesFieldNumber;
const int MessageToPost::kReconciliationActsFieldNumber;
const int MessageToPost::kContractsFieldNumber;
const int MessageToPost::kTorg13DocumentsFieldNumber;
const int MessageToPost::kServiceDetailsDocumentsFieldNumber;
#endif  // !_MSC_VER

MessageToPost::MessageToPost()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MessageToPost::InitAsDefaultInstance() {
  trustconnectionrequest_ = const_cast< ::Diadoc::Api::Proto::Events::TrustConnectionRequestAttachment*>(&::Diadoc::Api::Proto::Events::TrustConnectionRequestAttachment::default_instance());
}

MessageToPost::MessageToPost(const MessageToPost& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MessageToPost::SharedCtor() {
  _cached_size_ = 0;
  fromboxid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  toboxid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  trustconnectionrequest_ = NULL;
  todepartmentid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  isdraft_ = false;
  lockdraft_ = false;
  strictdraftvalidation_ = true;
  isinternal_ = false;
  fromdepartmentid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  delaysend_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MessageToPost::~MessageToPost() {
  SharedDtor();
}

void MessageToPost::SharedDtor() {
  if (fromboxid_ != &::google::protobuf::internal::kEmptyString) {
    delete fromboxid_;
  }
  if (toboxid_ != &::google::protobuf::internal::kEmptyString) {
    delete toboxid_;
  }
  if (todepartmentid_ != &::google::protobuf::internal::kEmptyString) {
    delete todepartmentid_;
  }
  if (fromdepartmentid_ != &::google::protobuf::internal::kEmptyString) {
    delete fromdepartmentid_;
  }
  if (this != default_instance_) {
    delete trustconnectionrequest_;
  }
}

void MessageToPost::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MessageToPost::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MessageToPost_descriptor_;
}

const MessageToPost& MessageToPost::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Events_2fDiadocMessage_2ePostApi_2eproto();
  return *default_instance_;
}

MessageToPost* MessageToPost::default_instance_ = NULL;

MessageToPost* MessageToPost::New() const {
  return new MessageToPost;
}

void MessageToPost::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_fromboxid()) {
      if (fromboxid_ != &::google::protobuf::internal::kEmptyString) {
        fromboxid_->clear();
      }
    }
    if (has_toboxid()) {
      if (toboxid_ != &::google::protobuf::internal::kEmptyString) {
        toboxid_->clear();
      }
    }
    if (has_trustconnectionrequest()) {
      if (trustconnectionrequest_ != NULL) trustconnectionrequest_->::Diadoc::Api::Proto::Events::TrustConnectionRequestAttachment::Clear();
    }
  }
  if (_has_bits_[11 / 32] & (0xffu << (11 % 32))) {
    if (has_todepartmentid()) {
      if (todepartmentid_ != &::google::protobuf::internal::kEmptyString) {
        todepartmentid_->clear();
      }
    }
    isdraft_ = false;
    lockdraft_ = false;
    strictdraftvalidation_ = true;
    isinternal_ = false;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (has_fromdepartmentid()) {
      if (fromdepartmentid_ != &::google::protobuf::internal::kEmptyString) {
        fromdepartmentid_->clear();
      }
    }
    delaysend_ = false;
  }
  invoices_.Clear();
  nonformalizeddocuments_.Clear();
  torg12documents_.Clear();
  acceptancecertificates_.Clear();
  structureddataattachments_.Clear();
  proformainvoices_.Clear();
  xmltorg12sellertitles_.Clear();
  xmlacceptancecertificatesellertitles_.Clear();
  pricelists_.Clear();
  pricelistagreements_.Clear();
  certificateregistries_.Clear();
  reconciliationacts_.Clear();
  contracts_.Clear();
  torg13documents_.Clear();
  servicedetailsdocuments_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MessageToPost::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string FromBoxId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fromboxid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->fromboxid().data(), this->fromboxid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_ToBoxId;
        break;
      }

      // optional string ToBoxId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ToBoxId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_toboxid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->toboxid().data(), this->toboxid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_Invoices;
        break;
      }

      // repeated .Diadoc.Api.Proto.Events.XmlDocumentAttachment Invoices = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Invoices:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_invoices()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_Invoices;
        if (input->ExpectTag(34)) goto parse_NonformalizedDocuments;
        break;
      }

      // repeated .Diadoc.Api.Proto.Events.NonformalizedAttachment NonformalizedDocuments = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_NonformalizedDocuments:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_nonformalizeddocuments()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_NonformalizedDocuments;
        if (input->ExpectTag(42)) goto parse_Torg12Documents;
        break;
      }

      // repeated .Diadoc.Api.Proto.Events.BasicDocumentAttachment Torg12Documents = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Torg12Documents:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_torg12documents()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_Torg12Documents;
        if (input->ExpectTag(50)) goto parse_TrustConnectionRequest;
        break;
      }

      // optional .Diadoc.Api.Proto.Events.TrustConnectionRequestAttachment TrustConnectionRequest = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_TrustConnectionRequest:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_trustconnectionrequest()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_AcceptanceCertificates;
        break;
      }

      // repeated .Diadoc.Api.Proto.Events.AcceptanceCertificateAttachment AcceptanceCertificates = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_AcceptanceCertificates:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_acceptancecertificates()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_AcceptanceCertificates;
        if (input->ExpectTag(66)) goto parse_StructuredDataAttachments;
        break;
      }

      // repeated .Diadoc.Api.Proto.Events.StructuredDataAttachment StructuredDataAttachments = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_StructuredDataAttachments:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_structureddataattachments()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_StructuredDataAttachments;
        if (input->ExpectTag(74)) goto parse_ProformaInvoices;
        break;
      }

      // repeated .Diadoc.Api.Proto.Events.BasicDocumentAttachment ProformaInvoices = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ProformaInvoices:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_proformainvoices()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_ProformaInvoices;
        if (input->ExpectTag(82)) goto parse_XmlTorg12SellerTitles;
        break;
      }

      // repeated .Diadoc.Api.Proto.Events.XmlDocumentAttachment XmlTorg12SellerTitles = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_XmlTorg12SellerTitles:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_xmltorg12sellertitles()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_XmlTorg12SellerTitles;
        if (input->ExpectTag(90)) goto parse_XmlAcceptanceCertificateSellerTitles;
        break;
      }

      // repeated .Diadoc.Api.Proto.Events.XmlDocumentAttachment XmlAcceptanceCertificateSellerTitles = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_XmlAcceptanceCertificateSellerTitles:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_xmlacceptancecertificatesellertitles()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_XmlAcceptanceCertificateSellerTitles;
        if (input->ExpectTag(98)) goto parse_ToDepartmentId;
        break;
      }

      // optional string ToDepartmentId = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ToDepartmentId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_todepartmentid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->todepartmentid().data(), this->todepartmentid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_IsDraft;
        break;
      }

      // optional bool IsDraft = 13 [default = false];
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_IsDraft:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isdraft_)));
          set_has_isdraft();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_LockDraft;
        break;
      }

      // optional bool LockDraft = 14 [default = false];
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_LockDraft:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &lockdraft_)));
          set_has_lockdraft();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_StrictDraftValidation;
        break;
      }

      // optional bool StrictDraftValidation = 15 [default = true];
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_StrictDraftValidation:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &strictdraftvalidation_)));
          set_has_strictdraftvalidation();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_IsInternal;
        break;
      }

      // optional bool IsInternal = 16 [default = false];
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_IsInternal:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isinternal_)));
          set_has_isinternal();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(138)) goto parse_FromDepartmentId;
        break;
      }

      // optional string FromDepartmentId = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_FromDepartmentId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fromdepartmentid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->fromdepartmentid().data(), this->fromdepartmentid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_DelaySend;
        break;
      }

      // optional bool DelaySend = 18 [default = false];
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_DelaySend:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &delaysend_)));
          set_has_delaysend();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(154)) goto parse_PriceLists;
        break;
      }

      // repeated .Diadoc.Api.Proto.Events.PriceListAttachment PriceLists = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_PriceLists:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_pricelists()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(154)) goto parse_PriceLists;
        if (input->ExpectTag(162)) goto parse_PriceListAgreements;
        break;
      }

      // repeated .Diadoc.Api.Proto.Events.NonformalizedAttachment PriceListAgreements = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_PriceListAgreements:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_pricelistagreements()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(162)) goto parse_PriceListAgreements;
        if (input->ExpectTag(170)) goto parse_CertificateRegistries;
        break;
      }

      // repeated .Diadoc.Api.Proto.Events.NonformalizedAttachment CertificateRegistries = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_CertificateRegistries:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_certificateregistries()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(170)) goto parse_CertificateRegistries;
        if (input->ExpectTag(178)) goto parse_ReconciliationActs;
        break;
      }

      // repeated .Diadoc.Api.Proto.Events.ReconciliationActAttachment ReconciliationActs = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ReconciliationActs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_reconciliationacts()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(178)) goto parse_ReconciliationActs;
        if (input->ExpectTag(186)) goto parse_Contracts;
        break;
      }

      // repeated .Diadoc.Api.Proto.Events.ContractAttachment Contracts = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Contracts:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_contracts()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(186)) goto parse_Contracts;
        if (input->ExpectTag(194)) goto parse_Torg13Documents;
        break;
      }

      // repeated .Diadoc.Api.Proto.Events.Torg13Attachment Torg13Documents = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Torg13Documents:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_torg13documents()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(194)) goto parse_Torg13Documents;
        if (input->ExpectTag(202)) goto parse_ServiceDetailsDocuments;
        break;
      }

      // repeated .Diadoc.Api.Proto.Events.ServiceDetailsAttachment ServiceDetailsDocuments = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ServiceDetailsDocuments:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_servicedetailsdocuments()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(202)) goto parse_ServiceDetailsDocuments;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MessageToPost::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string FromBoxId = 1;
  if (has_fromboxid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->fromboxid().data(), this->fromboxid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->fromboxid(), output);
  }

  // optional string ToBoxId = 2;
  if (has_toboxid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->toboxid().data(), this->toboxid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->toboxid(), output);
  }

  // repeated .Diadoc.Api.Proto.Events.XmlDocumentAttachment Invoices = 3;
  for (int i = 0; i < this->invoices_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->invoices(i), output);
  }

  // repeated .Diadoc.Api.Proto.Events.NonformalizedAttachment NonformalizedDocuments = 4;
  for (int i = 0; i < this->nonformalizeddocuments_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->nonformalizeddocuments(i), output);
  }

  // repeated .Diadoc.Api.Proto.Events.BasicDocumentAttachment Torg12Documents = 5;
  for (int i = 0; i < this->torg12documents_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->torg12documents(i), output);
  }

  // optional .Diadoc.Api.Proto.Events.TrustConnectionRequestAttachment TrustConnectionRequest = 6;
  if (has_trustconnectionrequest()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->trustconnectionrequest(), output);
  }

  // repeated .Diadoc.Api.Proto.Events.AcceptanceCertificateAttachment AcceptanceCertificates = 7;
  for (int i = 0; i < this->acceptancecertificates_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->acceptancecertificates(i), output);
  }

  // repeated .Diadoc.Api.Proto.Events.StructuredDataAttachment StructuredDataAttachments = 8;
  for (int i = 0; i < this->structureddataattachments_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->structureddataattachments(i), output);
  }

  // repeated .Diadoc.Api.Proto.Events.BasicDocumentAttachment ProformaInvoices = 9;
  for (int i = 0; i < this->proformainvoices_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->proformainvoices(i), output);
  }

  // repeated .Diadoc.Api.Proto.Events.XmlDocumentAttachment XmlTorg12SellerTitles = 10;
  for (int i = 0; i < this->xmltorg12sellertitles_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->xmltorg12sellertitles(i), output);
  }

  // repeated .Diadoc.Api.Proto.Events.XmlDocumentAttachment XmlAcceptanceCertificateSellerTitles = 11;
  for (int i = 0; i < this->xmlacceptancecertificatesellertitles_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->xmlacceptancecertificatesellertitles(i), output);
  }

  // optional string ToDepartmentId = 12;
  if (has_todepartmentid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->todepartmentid().data(), this->todepartmentid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      12, this->todepartmentid(), output);
  }

  // optional bool IsDraft = 13 [default = false];
  if (has_isdraft()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(13, this->isdraft(), output);
  }

  // optional bool LockDraft = 14 [default = false];
  if (has_lockdraft()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(14, this->lockdraft(), output);
  }

  // optional bool StrictDraftValidation = 15 [default = true];
  if (has_strictdraftvalidation()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(15, this->strictdraftvalidation(), output);
  }

  // optional bool IsInternal = 16 [default = false];
  if (has_isinternal()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(16, this->isinternal(), output);
  }

  // optional string FromDepartmentId = 17;
  if (has_fromdepartmentid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->fromdepartmentid().data(), this->fromdepartmentid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      17, this->fromdepartmentid(), output);
  }

  // optional bool DelaySend = 18 [default = false];
  if (has_delaysend()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(18, this->delaysend(), output);
  }

  // repeated .Diadoc.Api.Proto.Events.PriceListAttachment PriceLists = 19;
  for (int i = 0; i < this->pricelists_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      19, this->pricelists(i), output);
  }

  // repeated .Diadoc.Api.Proto.Events.NonformalizedAttachment PriceListAgreements = 20;
  for (int i = 0; i < this->pricelistagreements_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      20, this->pricelistagreements(i), output);
  }

  // repeated .Diadoc.Api.Proto.Events.NonformalizedAttachment CertificateRegistries = 21;
  for (int i = 0; i < this->certificateregistries_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      21, this->certificateregistries(i), output);
  }

  // repeated .Diadoc.Api.Proto.Events.ReconciliationActAttachment ReconciliationActs = 22;
  for (int i = 0; i < this->reconciliationacts_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      22, this->reconciliationacts(i), output);
  }

  // repeated .Diadoc.Api.Proto.Events.ContractAttachment Contracts = 23;
  for (int i = 0; i < this->contracts_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      23, this->contracts(i), output);
  }

  // repeated .Diadoc.Api.Proto.Events.Torg13Attachment Torg13Documents = 24;
  for (int i = 0; i < this->torg13documents_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      24, this->torg13documents(i), output);
  }

  // repeated .Diadoc.Api.Proto.Events.ServiceDetailsAttachment ServiceDetailsDocuments = 25;
  for (int i = 0; i < this->servicedetailsdocuments_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      25, this->servicedetailsdocuments(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MessageToPost::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string FromBoxId = 1;
  if (has_fromboxid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->fromboxid().data(), this->fromboxid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->fromboxid(), target);
  }

  // optional string ToBoxId = 2;
  if (has_toboxid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->toboxid().data(), this->toboxid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->toboxid(), target);
  }

  // repeated .Diadoc.Api.Proto.Events.XmlDocumentAttachment Invoices = 3;
  for (int i = 0; i < this->invoices_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->invoices(i), target);
  }

  // repeated .Diadoc.Api.Proto.Events.NonformalizedAttachment NonformalizedDocuments = 4;
  for (int i = 0; i < this->nonformalizeddocuments_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->nonformalizeddocuments(i), target);
  }

  // repeated .Diadoc.Api.Proto.Events.BasicDocumentAttachment Torg12Documents = 5;
  for (int i = 0; i < this->torg12documents_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->torg12documents(i), target);
  }

  // optional .Diadoc.Api.Proto.Events.TrustConnectionRequestAttachment TrustConnectionRequest = 6;
  if (has_trustconnectionrequest()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->trustconnectionrequest(), target);
  }

  // repeated .Diadoc.Api.Proto.Events.AcceptanceCertificateAttachment AcceptanceCertificates = 7;
  for (int i = 0; i < this->acceptancecertificates_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->acceptancecertificates(i), target);
  }

  // repeated .Diadoc.Api.Proto.Events.StructuredDataAttachment StructuredDataAttachments = 8;
  for (int i = 0; i < this->structureddataattachments_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->structureddataattachments(i), target);
  }

  // repeated .Diadoc.Api.Proto.Events.BasicDocumentAttachment ProformaInvoices = 9;
  for (int i = 0; i < this->proformainvoices_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->proformainvoices(i), target);
  }

  // repeated .Diadoc.Api.Proto.Events.XmlDocumentAttachment XmlTorg12SellerTitles = 10;
  for (int i = 0; i < this->xmltorg12sellertitles_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->xmltorg12sellertitles(i), target);
  }

  // repeated .Diadoc.Api.Proto.Events.XmlDocumentAttachment XmlAcceptanceCertificateSellerTitles = 11;
  for (int i = 0; i < this->xmlacceptancecertificatesellertitles_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->xmlacceptancecertificatesellertitles(i), target);
  }

  // optional string ToDepartmentId = 12;
  if (has_todepartmentid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->todepartmentid().data(), this->todepartmentid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->todepartmentid(), target);
  }

  // optional bool IsDraft = 13 [default = false];
  if (has_isdraft()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(13, this->isdraft(), target);
  }

  // optional bool LockDraft = 14 [default = false];
  if (has_lockdraft()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(14, this->lockdraft(), target);
  }

  // optional bool StrictDraftValidation = 15 [default = true];
  if (has_strictdraftvalidation()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(15, this->strictdraftvalidation(), target);
  }

  // optional bool IsInternal = 16 [default = false];
  if (has_isinternal()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(16, this->isinternal(), target);
  }

  // optional string FromDepartmentId = 17;
  if (has_fromdepartmentid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->fromdepartmentid().data(), this->fromdepartmentid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        17, this->fromdepartmentid(), target);
  }

  // optional bool DelaySend = 18 [default = false];
  if (has_delaysend()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(18, this->delaysend(), target);
  }

  // repeated .Diadoc.Api.Proto.Events.PriceListAttachment PriceLists = 19;
  for (int i = 0; i < this->pricelists_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        19, this->pricelists(i), target);
  }

  // repeated .Diadoc.Api.Proto.Events.NonformalizedAttachment PriceListAgreements = 20;
  for (int i = 0; i < this->pricelistagreements_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        20, this->pricelistagreements(i), target);
  }

  // repeated .Diadoc.Api.Proto.Events.NonformalizedAttachment CertificateRegistries = 21;
  for (int i = 0; i < this->certificateregistries_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        21, this->certificateregistries(i), target);
  }

  // repeated .Diadoc.Api.Proto.Events.ReconciliationActAttachment ReconciliationActs = 22;
  for (int i = 0; i < this->reconciliationacts_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        22, this->reconciliationacts(i), target);
  }

  // repeated .Diadoc.Api.Proto.Events.ContractAttachment Contracts = 23;
  for (int i = 0; i < this->contracts_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        23, this->contracts(i), target);
  }

  // repeated .Diadoc.Api.Proto.Events.Torg13Attachment Torg13Documents = 24;
  for (int i = 0; i < this->torg13documents_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        24, this->torg13documents(i), target);
  }

  // repeated .Diadoc.Api.Proto.Events.ServiceDetailsAttachment ServiceDetailsDocuments = 25;
  for (int i = 0; i < this->servicedetailsdocuments_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        25, this->servicedetailsdocuments(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MessageToPost::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string FromBoxId = 1;
    if (has_fromboxid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->fromboxid());
    }

    // optional string ToBoxId = 2;
    if (has_toboxid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->toboxid());
    }

    // optional .Diadoc.Api.Proto.Events.TrustConnectionRequestAttachment TrustConnectionRequest = 6;
    if (has_trustconnectionrequest()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->trustconnectionrequest());
    }

  }
  if (_has_bits_[11 / 32] & (0xffu << (11 % 32))) {
    // optional string ToDepartmentId = 12;
    if (has_todepartmentid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->todepartmentid());
    }

    // optional bool IsDraft = 13 [default = false];
    if (has_isdraft()) {
      total_size += 1 + 1;
    }

    // optional bool LockDraft = 14 [default = false];
    if (has_lockdraft()) {
      total_size += 1 + 1;
    }

    // optional bool StrictDraftValidation = 15 [default = true];
    if (has_strictdraftvalidation()) {
      total_size += 1 + 1;
    }

    // optional bool IsInternal = 16 [default = false];
    if (has_isinternal()) {
      total_size += 2 + 1;
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional string FromDepartmentId = 17;
    if (has_fromdepartmentid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->fromdepartmentid());
    }

    // optional bool DelaySend = 18 [default = false];
    if (has_delaysend()) {
      total_size += 2 + 1;
    }

  }
  // repeated .Diadoc.Api.Proto.Events.XmlDocumentAttachment Invoices = 3;
  total_size += 1 * this->invoices_size();
  for (int i = 0; i < this->invoices_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->invoices(i));
  }

  // repeated .Diadoc.Api.Proto.Events.NonformalizedAttachment NonformalizedDocuments = 4;
  total_size += 1 * this->nonformalizeddocuments_size();
  for (int i = 0; i < this->nonformalizeddocuments_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->nonformalizeddocuments(i));
  }

  // repeated .Diadoc.Api.Proto.Events.BasicDocumentAttachment Torg12Documents = 5;
  total_size += 1 * this->torg12documents_size();
  for (int i = 0; i < this->torg12documents_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->torg12documents(i));
  }

  // repeated .Diadoc.Api.Proto.Events.AcceptanceCertificateAttachment AcceptanceCertificates = 7;
  total_size += 1 * this->acceptancecertificates_size();
  for (int i = 0; i < this->acceptancecertificates_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->acceptancecertificates(i));
  }

  // repeated .Diadoc.Api.Proto.Events.StructuredDataAttachment StructuredDataAttachments = 8;
  total_size += 1 * this->structureddataattachments_size();
  for (int i = 0; i < this->structureddataattachments_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->structureddataattachments(i));
  }

  // repeated .Diadoc.Api.Proto.Events.BasicDocumentAttachment ProformaInvoices = 9;
  total_size += 1 * this->proformainvoices_size();
  for (int i = 0; i < this->proformainvoices_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->proformainvoices(i));
  }

  // repeated .Diadoc.Api.Proto.Events.XmlDocumentAttachment XmlTorg12SellerTitles = 10;
  total_size += 1 * this->xmltorg12sellertitles_size();
  for (int i = 0; i < this->xmltorg12sellertitles_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->xmltorg12sellertitles(i));
  }

  // repeated .Diadoc.Api.Proto.Events.XmlDocumentAttachment XmlAcceptanceCertificateSellerTitles = 11;
  total_size += 1 * this->xmlacceptancecertificatesellertitles_size();
  for (int i = 0; i < this->xmlacceptancecertificatesellertitles_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->xmlacceptancecertificatesellertitles(i));
  }

  // repeated .Diadoc.Api.Proto.Events.PriceListAttachment PriceLists = 19;
  total_size += 2 * this->pricelists_size();
  for (int i = 0; i < this->pricelists_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->pricelists(i));
  }

  // repeated .Diadoc.Api.Proto.Events.NonformalizedAttachment PriceListAgreements = 20;
  total_size += 2 * this->pricelistagreements_size();
  for (int i = 0; i < this->pricelistagreements_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->pricelistagreements(i));
  }

  // repeated .Diadoc.Api.Proto.Events.NonformalizedAttachment CertificateRegistries = 21;
  total_size += 2 * this->certificateregistries_size();
  for (int i = 0; i < this->certificateregistries_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->certificateregistries(i));
  }

  // repeated .Diadoc.Api.Proto.Events.ReconciliationActAttachment ReconciliationActs = 22;
  total_size += 2 * this->reconciliationacts_size();
  for (int i = 0; i < this->reconciliationacts_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->reconciliationacts(i));
  }

  // repeated .Diadoc.Api.Proto.Events.ContractAttachment Contracts = 23;
  total_size += 2 * this->contracts_size();
  for (int i = 0; i < this->contracts_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->contracts(i));
  }

  // repeated .Diadoc.Api.Proto.Events.Torg13Attachment Torg13Documents = 24;
  total_size += 2 * this->torg13documents_size();
  for (int i = 0; i < this->torg13documents_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->torg13documents(i));
  }

  // repeated .Diadoc.Api.Proto.Events.ServiceDetailsAttachment ServiceDetailsDocuments = 25;
  total_size += 2 * this->servicedetailsdocuments_size();
  for (int i = 0; i < this->servicedetailsdocuments_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->servicedetailsdocuments(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MessageToPost::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MessageToPost* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MessageToPost*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MessageToPost::MergeFrom(const MessageToPost& from) {
  GOOGLE_CHECK_NE(&from, this);
  invoices_.MergeFrom(from.invoices_);
  nonformalizeddocuments_.MergeFrom(from.nonformalizeddocuments_);
  torg12documents_.MergeFrom(from.torg12documents_);
  acceptancecertificates_.MergeFrom(from.acceptancecertificates_);
  structureddataattachments_.MergeFrom(from.structureddataattachments_);
  proformainvoices_.MergeFrom(from.proformainvoices_);
  xmltorg12sellertitles_.MergeFrom(from.xmltorg12sellertitles_);
  xmlacceptancecertificatesellertitles_.MergeFrom(from.xmlacceptancecertificatesellertitles_);
  pricelists_.MergeFrom(from.pricelists_);
  pricelistagreements_.MergeFrom(from.pricelistagreements_);
  certificateregistries_.MergeFrom(from.certificateregistries_);
  reconciliationacts_.MergeFrom(from.reconciliationacts_);
  contracts_.MergeFrom(from.contracts_);
  torg13documents_.MergeFrom(from.torg13documents_);
  servicedetailsdocuments_.MergeFrom(from.servicedetailsdocuments_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_fromboxid()) {
      set_fromboxid(from.fromboxid());
    }
    if (from.has_toboxid()) {
      set_toboxid(from.toboxid());
    }
    if (from.has_trustconnectionrequest()) {
      mutable_trustconnectionrequest()->::Diadoc::Api::Proto::Events::TrustConnectionRequestAttachment::MergeFrom(from.trustconnectionrequest());
    }
  }
  if (from._has_bits_[11 / 32] & (0xffu << (11 % 32))) {
    if (from.has_todepartmentid()) {
      set_todepartmentid(from.todepartmentid());
    }
    if (from.has_isdraft()) {
      set_isdraft(from.isdraft());
    }
    if (from.has_lockdraft()) {
      set_lockdraft(from.lockdraft());
    }
    if (from.has_strictdraftvalidation()) {
      set_strictdraftvalidation(from.strictdraftvalidation());
    }
    if (from.has_isinternal()) {
      set_isinternal(from.isinternal());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_fromdepartmentid()) {
      set_fromdepartmentid(from.fromdepartmentid());
    }
    if (from.has_delaysend()) {
      set_delaysend(from.delaysend());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MessageToPost::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MessageToPost::CopyFrom(const MessageToPost& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MessageToPost::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < invoices_size(); i++) {
    if (!this->invoices(i).IsInitialized()) return false;
  }
  for (int i = 0; i < nonformalizeddocuments_size(); i++) {
    if (!this->nonformalizeddocuments(i).IsInitialized()) return false;
  }
  for (int i = 0; i < torg12documents_size(); i++) {
    if (!this->torg12documents(i).IsInitialized()) return false;
  }
  if (has_trustconnectionrequest()) {
    if (!this->trustconnectionrequest().IsInitialized()) return false;
  }
  for (int i = 0; i < acceptancecertificates_size(); i++) {
    if (!this->acceptancecertificates(i).IsInitialized()) return false;
  }
  for (int i = 0; i < structureddataattachments_size(); i++) {
    if (!this->structureddataattachments(i).IsInitialized()) return false;
  }
  for (int i = 0; i < proformainvoices_size(); i++) {
    if (!this->proformainvoices(i).IsInitialized()) return false;
  }
  for (int i = 0; i < xmltorg12sellertitles_size(); i++) {
    if (!this->xmltorg12sellertitles(i).IsInitialized()) return false;
  }
  for (int i = 0; i < xmlacceptancecertificatesellertitles_size(); i++) {
    if (!this->xmlacceptancecertificatesellertitles(i).IsInitialized()) return false;
  }
  for (int i = 0; i < pricelists_size(); i++) {
    if (!this->pricelists(i).IsInitialized()) return false;
  }
  for (int i = 0; i < pricelistagreements_size(); i++) {
    if (!this->pricelistagreements(i).IsInitialized()) return false;
  }
  for (int i = 0; i < certificateregistries_size(); i++) {
    if (!this->certificateregistries(i).IsInitialized()) return false;
  }
  for (int i = 0; i < reconciliationacts_size(); i++) {
    if (!this->reconciliationacts(i).IsInitialized()) return false;
  }
  for (int i = 0; i < contracts_size(); i++) {
    if (!this->contracts(i).IsInitialized()) return false;
  }
  for (int i = 0; i < torg13documents_size(); i++) {
    if (!this->torg13documents(i).IsInitialized()) return false;
  }
  for (int i = 0; i < servicedetailsdocuments_size(); i++) {
    if (!this->servicedetailsdocuments(i).IsInitialized()) return false;
  }
  return true;
}

void MessageToPost::Swap(MessageToPost* other) {
  if (other != this) {
    std::swap(fromboxid_, other->fromboxid_);
    std::swap(toboxid_, other->toboxid_);
    invoices_.Swap(&other->invoices_);
    nonformalizeddocuments_.Swap(&other->nonformalizeddocuments_);
    torg12documents_.Swap(&other->torg12documents_);
    std::swap(trustconnectionrequest_, other->trustconnectionrequest_);
    acceptancecertificates_.Swap(&other->acceptancecertificates_);
    structureddataattachments_.Swap(&other->structureddataattachments_);
    proformainvoices_.Swap(&other->proformainvoices_);
    xmltorg12sellertitles_.Swap(&other->xmltorg12sellertitles_);
    xmlacceptancecertificatesellertitles_.Swap(&other->xmlacceptancecertificatesellertitles_);
    std::swap(todepartmentid_, other->todepartmentid_);
    std::swap(isdraft_, other->isdraft_);
    std::swap(lockdraft_, other->lockdraft_);
    std::swap(strictdraftvalidation_, other->strictdraftvalidation_);
    std::swap(isinternal_, other->isinternal_);
    std::swap(fromdepartmentid_, other->fromdepartmentid_);
    std::swap(delaysend_, other->delaysend_);
    pricelists_.Swap(&other->pricelists_);
    pricelistagreements_.Swap(&other->pricelistagreements_);
    certificateregistries_.Swap(&other->certificateregistries_);
    reconciliationacts_.Swap(&other->reconciliationacts_);
    contracts_.Swap(&other->contracts_);
    torg13documents_.Swap(&other->torg13documents_);
    servicedetailsdocuments_.Swap(&other->servicedetailsdocuments_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MessageToPost::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MessageToPost_descriptor_;
  metadata.reflection = MessageToPost_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int XmlDocumentAttachment::kSignedContentFieldNumber;
const int XmlDocumentAttachment::kCommentFieldNumber;
const int XmlDocumentAttachment::kInitialDocumentIdsFieldNumber;
const int XmlDocumentAttachment::kSubordinateDocumentIdsFieldNumber;
const int XmlDocumentAttachment::kCustomDocumentIdFieldNumber;
const int XmlDocumentAttachment::kNeedReceiptFieldNumber;
#endif  // !_MSC_VER

XmlDocumentAttachment::XmlDocumentAttachment()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void XmlDocumentAttachment::InitAsDefaultInstance() {
  signedcontent_ = const_cast< ::Diadoc::Api::Proto::Events::SignedContent*>(&::Diadoc::Api::Proto::Events::SignedContent::default_instance());
}

XmlDocumentAttachment::XmlDocumentAttachment(const XmlDocumentAttachment& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void XmlDocumentAttachment::SharedCtor() {
  _cached_size_ = 0;
  signedcontent_ = NULL;
  comment_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  customdocumentid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  needreceipt_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

XmlDocumentAttachment::~XmlDocumentAttachment() {
  SharedDtor();
}

void XmlDocumentAttachment::SharedDtor() {
  if (comment_ != &::google::protobuf::internal::kEmptyString) {
    delete comment_;
  }
  if (customdocumentid_ != &::google::protobuf::internal::kEmptyString) {
    delete customdocumentid_;
  }
  if (this != default_instance_) {
    delete signedcontent_;
  }
}

void XmlDocumentAttachment::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* XmlDocumentAttachment::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return XmlDocumentAttachment_descriptor_;
}

const XmlDocumentAttachment& XmlDocumentAttachment::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Events_2fDiadocMessage_2ePostApi_2eproto();
  return *default_instance_;
}

XmlDocumentAttachment* XmlDocumentAttachment::default_instance_ = NULL;

XmlDocumentAttachment* XmlDocumentAttachment::New() const {
  return new XmlDocumentAttachment;
}

void XmlDocumentAttachment::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_signedcontent()) {
      if (signedcontent_ != NULL) signedcontent_->::Diadoc::Api::Proto::Events::SignedContent::Clear();
    }
    if (has_comment()) {
      if (comment_ != &::google::protobuf::internal::kEmptyString) {
        comment_->clear();
      }
    }
    if (has_customdocumentid()) {
      if (customdocumentid_ != &::google::protobuf::internal::kEmptyString) {
        customdocumentid_->clear();
      }
    }
    needreceipt_ = false;
  }
  initialdocumentids_.Clear();
  subordinatedocumentids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool XmlDocumentAttachment::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Diadoc.Api.Proto.Events.SignedContent SignedContent = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_signedcontent()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_Comment;
        break;
      }

      // optional string Comment = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Comment:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_comment()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->comment().data(), this->comment().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_InitialDocumentIds;
        break;
      }

      // repeated .Diadoc.Api.Proto.DocumentId InitialDocumentIds = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_InitialDocumentIds:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_initialdocumentids()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_InitialDocumentIds;
        if (input->ExpectTag(42)) goto parse_SubordinateDocumentIds;
        break;
      }

      // repeated .Diadoc.Api.Proto.DocumentId SubordinateDocumentIds = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_SubordinateDocumentIds:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_subordinatedocumentids()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_SubordinateDocumentIds;
        if (input->ExpectTag(50)) goto parse_CustomDocumentId;
        break;
      }

      // optional string CustomDocumentId = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_CustomDocumentId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_customdocumentid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->customdocumentid().data(), this->customdocumentid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_NeedReceipt;
        break;
      }

      // optional bool NeedReceipt = 7 [default = false];
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_NeedReceipt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &needreceipt_)));
          set_has_needreceipt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void XmlDocumentAttachment::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .Diadoc.Api.Proto.Events.SignedContent SignedContent = 1;
  if (has_signedcontent()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->signedcontent(), output);
  }

  // optional string Comment = 3;
  if (has_comment()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->comment().data(), this->comment().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->comment(), output);
  }

  // repeated .Diadoc.Api.Proto.DocumentId InitialDocumentIds = 4;
  for (int i = 0; i < this->initialdocumentids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->initialdocumentids(i), output);
  }

  // repeated .Diadoc.Api.Proto.DocumentId SubordinateDocumentIds = 5;
  for (int i = 0; i < this->subordinatedocumentids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->subordinatedocumentids(i), output);
  }

  // optional string CustomDocumentId = 6;
  if (has_customdocumentid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->customdocumentid().data(), this->customdocumentid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->customdocumentid(), output);
  }

  // optional bool NeedReceipt = 7 [default = false];
  if (has_needreceipt()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->needreceipt(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* XmlDocumentAttachment::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .Diadoc.Api.Proto.Events.SignedContent SignedContent = 1;
  if (has_signedcontent()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->signedcontent(), target);
  }

  // optional string Comment = 3;
  if (has_comment()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->comment().data(), this->comment().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->comment(), target);
  }

  // repeated .Diadoc.Api.Proto.DocumentId InitialDocumentIds = 4;
  for (int i = 0; i < this->initialdocumentids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->initialdocumentids(i), target);
  }

  // repeated .Diadoc.Api.Proto.DocumentId SubordinateDocumentIds = 5;
  for (int i = 0; i < this->subordinatedocumentids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->subordinatedocumentids(i), target);
  }

  // optional string CustomDocumentId = 6;
  if (has_customdocumentid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->customdocumentid().data(), this->customdocumentid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->customdocumentid(), target);
  }

  // optional bool NeedReceipt = 7 [default = false];
  if (has_needreceipt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->needreceipt(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int XmlDocumentAttachment::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .Diadoc.Api.Proto.Events.SignedContent SignedContent = 1;
    if (has_signedcontent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->signedcontent());
    }

    // optional string Comment = 3;
    if (has_comment()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->comment());
    }

    // optional string CustomDocumentId = 6;
    if (has_customdocumentid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->customdocumentid());
    }

    // optional bool NeedReceipt = 7 [default = false];
    if (has_needreceipt()) {
      total_size += 1 + 1;
    }

  }
  // repeated .Diadoc.Api.Proto.DocumentId InitialDocumentIds = 4;
  total_size += 1 * this->initialdocumentids_size();
  for (int i = 0; i < this->initialdocumentids_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->initialdocumentids(i));
  }

  // repeated .Diadoc.Api.Proto.DocumentId SubordinateDocumentIds = 5;
  total_size += 1 * this->subordinatedocumentids_size();
  for (int i = 0; i < this->subordinatedocumentids_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->subordinatedocumentids(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void XmlDocumentAttachment::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const XmlDocumentAttachment* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const XmlDocumentAttachment*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void XmlDocumentAttachment::MergeFrom(const XmlDocumentAttachment& from) {
  GOOGLE_CHECK_NE(&from, this);
  initialdocumentids_.MergeFrom(from.initialdocumentids_);
  subordinatedocumentids_.MergeFrom(from.subordinatedocumentids_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_signedcontent()) {
      mutable_signedcontent()->::Diadoc::Api::Proto::Events::SignedContent::MergeFrom(from.signedcontent());
    }
    if (from.has_comment()) {
      set_comment(from.comment());
    }
    if (from.has_customdocumentid()) {
      set_customdocumentid(from.customdocumentid());
    }
    if (from.has_needreceipt()) {
      set_needreceipt(from.needreceipt());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void XmlDocumentAttachment::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void XmlDocumentAttachment::CopyFrom(const XmlDocumentAttachment& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool XmlDocumentAttachment::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < initialdocumentids_size(); i++) {
    if (!this->initialdocumentids(i).IsInitialized()) return false;
  }
  for (int i = 0; i < subordinatedocumentids_size(); i++) {
    if (!this->subordinatedocumentids(i).IsInitialized()) return false;
  }
  return true;
}

void XmlDocumentAttachment::Swap(XmlDocumentAttachment* other) {
  if (other != this) {
    std::swap(signedcontent_, other->signedcontent_);
    std::swap(comment_, other->comment_);
    initialdocumentids_.Swap(&other->initialdocumentids_);
    subordinatedocumentids_.Swap(&other->subordinatedocumentids_);
    std::swap(customdocumentid_, other->customdocumentid_);
    std::swap(needreceipt_, other->needreceipt_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata XmlDocumentAttachment::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = XmlDocumentAttachment_descriptor_;
  metadata.reflection = XmlDocumentAttachment_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NonformalizedAttachment::kSignedContentFieldNumber;
const int NonformalizedAttachment::kFileNameFieldNumber;
const int NonformalizedAttachment::kCommentFieldNumber;
const int NonformalizedAttachment::kNeedRecipientSignatureFieldNumber;
const int NonformalizedAttachment::kInitialDocumentIdsFieldNumber;
const int NonformalizedAttachment::kSubordinateDocumentIdsFieldNumber;
const int NonformalizedAttachment::kDocumentDateFieldNumber;
const int NonformalizedAttachment::kDocumentNumberFieldNumber;
const int NonformalizedAttachment::kCustomDocumentIdFieldNumber;
const int NonformalizedAttachment::kNeedReceiptFieldNumber;
#endif  // !_MSC_VER

NonformalizedAttachment::NonformalizedAttachment()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NonformalizedAttachment::InitAsDefaultInstance() {
  signedcontent_ = const_cast< ::Diadoc::Api::Proto::Events::SignedContent*>(&::Diadoc::Api::Proto::Events::SignedContent::default_instance());
}

NonformalizedAttachment::NonformalizedAttachment(const NonformalizedAttachment& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NonformalizedAttachment::SharedCtor() {
  _cached_size_ = 0;
  signedcontent_ = NULL;
  filename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  comment_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  needrecipientsignature_ = false;
  documentdate_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  documentnumber_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  customdocumentid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  needreceipt_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NonformalizedAttachment::~NonformalizedAttachment() {
  SharedDtor();
}

void NonformalizedAttachment::SharedDtor() {
  if (filename_ != &::google::protobuf::internal::kEmptyString) {
    delete filename_;
  }
  if (comment_ != &::google::protobuf::internal::kEmptyString) {
    delete comment_;
  }
  if (documentdate_ != &::google::protobuf::internal::kEmptyString) {
    delete documentdate_;
  }
  if (documentnumber_ != &::google::protobuf::internal::kEmptyString) {
    delete documentnumber_;
  }
  if (customdocumentid_ != &::google::protobuf::internal::kEmptyString) {
    delete customdocumentid_;
  }
  if (this != default_instance_) {
    delete signedcontent_;
  }
}

void NonformalizedAttachment::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NonformalizedAttachment::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NonformalizedAttachment_descriptor_;
}

const NonformalizedAttachment& NonformalizedAttachment::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Events_2fDiadocMessage_2ePostApi_2eproto();
  return *default_instance_;
}

NonformalizedAttachment* NonformalizedAttachment::default_instance_ = NULL;

NonformalizedAttachment* NonformalizedAttachment::New() const {
  return new NonformalizedAttachment;
}

void NonformalizedAttachment::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_signedcontent()) {
      if (signedcontent_ != NULL) signedcontent_->::Diadoc::Api::Proto::Events::SignedContent::Clear();
    }
    if (has_filename()) {
      if (filename_ != &::google::protobuf::internal::kEmptyString) {
        filename_->clear();
      }
    }
    if (has_comment()) {
      if (comment_ != &::google::protobuf::internal::kEmptyString) {
        comment_->clear();
      }
    }
    needrecipientsignature_ = false;
    if (has_documentdate()) {
      if (documentdate_ != &::google::protobuf::internal::kEmptyString) {
        documentdate_->clear();
      }
    }
    if (has_documentnumber()) {
      if (documentnumber_ != &::google::protobuf::internal::kEmptyString) {
        documentnumber_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_customdocumentid()) {
      if (customdocumentid_ != &::google::protobuf::internal::kEmptyString) {
        customdocumentid_->clear();
      }
    }
    needreceipt_ = false;
  }
  initialdocumentids_.Clear();
  subordinatedocumentids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NonformalizedAttachment::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Diadoc.Api.Proto.Events.SignedContent SignedContent = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_signedcontent()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_FileName;
        break;
      }

      // required string FileName = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_FileName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_filename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->filename().data(), this->filename().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_Comment;
        break;
      }

      // optional string Comment = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Comment:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_comment()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->comment().data(), this->comment().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_NeedRecipientSignature;
        break;
      }

      // optional bool NeedRecipientSignature = 4 [default = false];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_NeedRecipientSignature:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &needrecipientsignature_)));
          set_has_needrecipientsignature();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_InitialDocumentIds;
        break;
      }

      // repeated .Diadoc.Api.Proto.DocumentId InitialDocumentIds = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_InitialDocumentIds:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_initialdocumentids()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_InitialDocumentIds;
        if (input->ExpectTag(50)) goto parse_SubordinateDocumentIds;
        break;
      }

      // repeated .Diadoc.Api.Proto.DocumentId SubordinateDocumentIds = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_SubordinateDocumentIds:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_subordinatedocumentids()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_SubordinateDocumentIds;
        if (input->ExpectTag(58)) goto parse_DocumentDate;
        break;
      }

      // optional string DocumentDate = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_DocumentDate:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_documentdate()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->documentdate().data(), this->documentdate().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_DocumentNumber;
        break;
      }

      // optional string DocumentNumber = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_DocumentNumber:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_documentnumber()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->documentnumber().data(), this->documentnumber().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_CustomDocumentId;
        break;
      }

      // optional string CustomDocumentId = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_CustomDocumentId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_customdocumentid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->customdocumentid().data(), this->customdocumentid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_NeedReceipt;
        break;
      }

      // optional bool NeedReceipt = 10 [default = false];
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_NeedReceipt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &needreceipt_)));
          set_has_needreceipt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NonformalizedAttachment::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .Diadoc.Api.Proto.Events.SignedContent SignedContent = 1;
  if (has_signedcontent()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->signedcontent(), output);
  }

  // required string FileName = 2;
  if (has_filename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->filename().data(), this->filename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->filename(), output);
  }

  // optional string Comment = 3;
  if (has_comment()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->comment().data(), this->comment().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->comment(), output);
  }

  // optional bool NeedRecipientSignature = 4 [default = false];
  if (has_needrecipientsignature()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->needrecipientsignature(), output);
  }

  // repeated .Diadoc.Api.Proto.DocumentId InitialDocumentIds = 5;
  for (int i = 0; i < this->initialdocumentids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->initialdocumentids(i), output);
  }

  // repeated .Diadoc.Api.Proto.DocumentId SubordinateDocumentIds = 6;
  for (int i = 0; i < this->subordinatedocumentids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->subordinatedocumentids(i), output);
  }

  // optional string DocumentDate = 7;
  if (has_documentdate()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->documentdate().data(), this->documentdate().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->documentdate(), output);
  }

  // optional string DocumentNumber = 8;
  if (has_documentnumber()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->documentnumber().data(), this->documentnumber().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->documentnumber(), output);
  }

  // optional string CustomDocumentId = 9;
  if (has_customdocumentid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->customdocumentid().data(), this->customdocumentid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->customdocumentid(), output);
  }

  // optional bool NeedReceipt = 10 [default = false];
  if (has_needreceipt()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->needreceipt(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NonformalizedAttachment::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .Diadoc.Api.Proto.Events.SignedContent SignedContent = 1;
  if (has_signedcontent()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->signedcontent(), target);
  }

  // required string FileName = 2;
  if (has_filename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->filename().data(), this->filename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->filename(), target);
  }

  // optional string Comment = 3;
  if (has_comment()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->comment().data(), this->comment().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->comment(), target);
  }

  // optional bool NeedRecipientSignature = 4 [default = false];
  if (has_needrecipientsignature()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->needrecipientsignature(), target);
  }

  // repeated .Diadoc.Api.Proto.DocumentId InitialDocumentIds = 5;
  for (int i = 0; i < this->initialdocumentids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->initialdocumentids(i), target);
  }

  // repeated .Diadoc.Api.Proto.DocumentId SubordinateDocumentIds = 6;
  for (int i = 0; i < this->subordinatedocumentids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->subordinatedocumentids(i), target);
  }

  // optional string DocumentDate = 7;
  if (has_documentdate()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->documentdate().data(), this->documentdate().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->documentdate(), target);
  }

  // optional string DocumentNumber = 8;
  if (has_documentnumber()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->documentnumber().data(), this->documentnumber().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->documentnumber(), target);
  }

  // optional string CustomDocumentId = 9;
  if (has_customdocumentid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->customdocumentid().data(), this->customdocumentid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->customdocumentid(), target);
  }

  // optional bool NeedReceipt = 10 [default = false];
  if (has_needreceipt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->needreceipt(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NonformalizedAttachment::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .Diadoc.Api.Proto.Events.SignedContent SignedContent = 1;
    if (has_signedcontent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->signedcontent());
    }

    // required string FileName = 2;
    if (has_filename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->filename());
    }

    // optional string Comment = 3;
    if (has_comment()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->comment());
    }

    // optional bool NeedRecipientSignature = 4 [default = false];
    if (has_needrecipientsignature()) {
      total_size += 1 + 1;
    }

    // optional string DocumentDate = 7;
    if (has_documentdate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->documentdate());
    }

    // optional string DocumentNumber = 8;
    if (has_documentnumber()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->documentnumber());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string CustomDocumentId = 9;
    if (has_customdocumentid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->customdocumentid());
    }

    // optional bool NeedReceipt = 10 [default = false];
    if (has_needreceipt()) {
      total_size += 1 + 1;
    }

  }
  // repeated .Diadoc.Api.Proto.DocumentId InitialDocumentIds = 5;
  total_size += 1 * this->initialdocumentids_size();
  for (int i = 0; i < this->initialdocumentids_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->initialdocumentids(i));
  }

  // repeated .Diadoc.Api.Proto.DocumentId SubordinateDocumentIds = 6;
  total_size += 1 * this->subordinatedocumentids_size();
  for (int i = 0; i < this->subordinatedocumentids_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->subordinatedocumentids(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NonformalizedAttachment::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NonformalizedAttachment* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NonformalizedAttachment*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NonformalizedAttachment::MergeFrom(const NonformalizedAttachment& from) {
  GOOGLE_CHECK_NE(&from, this);
  initialdocumentids_.MergeFrom(from.initialdocumentids_);
  subordinatedocumentids_.MergeFrom(from.subordinatedocumentids_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_signedcontent()) {
      mutable_signedcontent()->::Diadoc::Api::Proto::Events::SignedContent::MergeFrom(from.signedcontent());
    }
    if (from.has_filename()) {
      set_filename(from.filename());
    }
    if (from.has_comment()) {
      set_comment(from.comment());
    }
    if (from.has_needrecipientsignature()) {
      set_needrecipientsignature(from.needrecipientsignature());
    }
    if (from.has_documentdate()) {
      set_documentdate(from.documentdate());
    }
    if (from.has_documentnumber()) {
      set_documentnumber(from.documentnumber());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_customdocumentid()) {
      set_customdocumentid(from.customdocumentid());
    }
    if (from.has_needreceipt()) {
      set_needreceipt(from.needreceipt());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NonformalizedAttachment::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NonformalizedAttachment::CopyFrom(const NonformalizedAttachment& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NonformalizedAttachment::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  for (int i = 0; i < initialdocumentids_size(); i++) {
    if (!this->initialdocumentids(i).IsInitialized()) return false;
  }
  for (int i = 0; i < subordinatedocumentids_size(); i++) {
    if (!this->subordinatedocumentids(i).IsInitialized()) return false;
  }
  return true;
}

void NonformalizedAttachment::Swap(NonformalizedAttachment* other) {
  if (other != this) {
    std::swap(signedcontent_, other->signedcontent_);
    std::swap(filename_, other->filename_);
    std::swap(comment_, other->comment_);
    std::swap(needrecipientsignature_, other->needrecipientsignature_);
    initialdocumentids_.Swap(&other->initialdocumentids_);
    subordinatedocumentids_.Swap(&other->subordinatedocumentids_);
    std::swap(documentdate_, other->documentdate_);
    std::swap(documentnumber_, other->documentnumber_);
    std::swap(customdocumentid_, other->customdocumentid_);
    std::swap(needreceipt_, other->needreceipt_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NonformalizedAttachment::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NonformalizedAttachment_descriptor_;
  metadata.reflection = NonformalizedAttachment_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BasicDocumentAttachment::kSignedContentFieldNumber;
const int BasicDocumentAttachment::kFileNameFieldNumber;
const int BasicDocumentAttachment::kCommentFieldNumber;
const int BasicDocumentAttachment::kInitialDocumentIdsFieldNumber;
const int BasicDocumentAttachment::kSubordinateDocumentIdsFieldNumber;
const int BasicDocumentAttachment::kDocumentDateFieldNumber;
const int BasicDocumentAttachment::kDocumentNumberFieldNumber;
const int BasicDocumentAttachment::kTotalFieldNumber;
const int BasicDocumentAttachment::kCustomDocumentIdFieldNumber;
const int BasicDocumentAttachment::kVatFieldNumber;
const int BasicDocumentAttachment::kGroundsFieldNumber;
const int BasicDocumentAttachment::kNeedReceiptFieldNumber;
#endif  // !_MSC_VER

BasicDocumentAttachment::BasicDocumentAttachment()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BasicDocumentAttachment::InitAsDefaultInstance() {
  signedcontent_ = const_cast< ::Diadoc::Api::Proto::Events::SignedContent*>(&::Diadoc::Api::Proto::Events::SignedContent::default_instance());
}

BasicDocumentAttachment::BasicDocumentAttachment(const BasicDocumentAttachment& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BasicDocumentAttachment::SharedCtor() {
  _cached_size_ = 0;
  signedcontent_ = NULL;
  filename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  comment_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  documentdate_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  documentnumber_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  total_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  customdocumentid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  vat_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  grounds_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  needreceipt_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BasicDocumentAttachment::~BasicDocumentAttachment() {
  SharedDtor();
}

void BasicDocumentAttachment::SharedDtor() {
  if (filename_ != &::google::protobuf::internal::kEmptyString) {
    delete filename_;
  }
  if (comment_ != &::google::protobuf::internal::kEmptyString) {
    delete comment_;
  }
  if (documentdate_ != &::google::protobuf::internal::kEmptyString) {
    delete documentdate_;
  }
  if (documentnumber_ != &::google::protobuf::internal::kEmptyString) {
    delete documentnumber_;
  }
  if (total_ != &::google::protobuf::internal::kEmptyString) {
    delete total_;
  }
  if (customdocumentid_ != &::google::protobuf::internal::kEmptyString) {
    delete customdocumentid_;
  }
  if (vat_ != &::google::protobuf::internal::kEmptyString) {
    delete vat_;
  }
  if (grounds_ != &::google::protobuf::internal::kEmptyString) {
    delete grounds_;
  }
  if (this != default_instance_) {
    delete signedcontent_;
  }
}

void BasicDocumentAttachment::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BasicDocumentAttachment::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BasicDocumentAttachment_descriptor_;
}

const BasicDocumentAttachment& BasicDocumentAttachment::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Events_2fDiadocMessage_2ePostApi_2eproto();
  return *default_instance_;
}

BasicDocumentAttachment* BasicDocumentAttachment::default_instance_ = NULL;

BasicDocumentAttachment* BasicDocumentAttachment::New() const {
  return new BasicDocumentAttachment;
}

void BasicDocumentAttachment::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_signedcontent()) {
      if (signedcontent_ != NULL) signedcontent_->::Diadoc::Api::Proto::Events::SignedContent::Clear();
    }
    if (has_filename()) {
      if (filename_ != &::google::protobuf::internal::kEmptyString) {
        filename_->clear();
      }
    }
    if (has_comment()) {
      if (comment_ != &::google::protobuf::internal::kEmptyString) {
        comment_->clear();
      }
    }
    if (has_documentdate()) {
      if (documentdate_ != &::google::protobuf::internal::kEmptyString) {
        documentdate_->clear();
      }
    }
    if (has_documentnumber()) {
      if (documentnumber_ != &::google::protobuf::internal::kEmptyString) {
        documentnumber_->clear();
      }
    }
    if (has_total()) {
      if (total_ != &::google::protobuf::internal::kEmptyString) {
        total_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_customdocumentid()) {
      if (customdocumentid_ != &::google::protobuf::internal::kEmptyString) {
        customdocumentid_->clear();
      }
    }
    if (has_vat()) {
      if (vat_ != &::google::protobuf::internal::kEmptyString) {
        vat_->clear();
      }
    }
    if (has_grounds()) {
      if (grounds_ != &::google::protobuf::internal::kEmptyString) {
        grounds_->clear();
      }
    }
    needreceipt_ = false;
  }
  initialdocumentids_.Clear();
  subordinatedocumentids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BasicDocumentAttachment::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Diadoc.Api.Proto.Events.SignedContent SignedContent = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_signedcontent()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_FileName;
        break;
      }

      // required string FileName = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_FileName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_filename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->filename().data(), this->filename().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_Comment;
        break;
      }

      // optional string Comment = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Comment:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_comment()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->comment().data(), this->comment().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_InitialDocumentIds;
        break;
      }

      // repeated .Diadoc.Api.Proto.DocumentId InitialDocumentIds = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_InitialDocumentIds:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_initialdocumentids()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_InitialDocumentIds;
        if (input->ExpectTag(42)) goto parse_SubordinateDocumentIds;
        break;
      }

      // repeated .Diadoc.Api.Proto.DocumentId SubordinateDocumentIds = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_SubordinateDocumentIds:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_subordinatedocumentids()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_SubordinateDocumentIds;
        if (input->ExpectTag(50)) goto parse_DocumentDate;
        break;
      }

      // required string DocumentDate = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_DocumentDate:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_documentdate()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->documentdate().data(), this->documentdate().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_DocumentNumber;
        break;
      }

      // required string DocumentNumber = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_DocumentNumber:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_documentnumber()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->documentnumber().data(), this->documentnumber().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_Total;
        break;
      }

      // required string Total = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Total:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_total()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->total().data(), this->total().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_CustomDocumentId;
        break;
      }

      // optional string CustomDocumentId = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_CustomDocumentId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_customdocumentid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->customdocumentid().data(), this->customdocumentid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_Vat;
        break;
      }

      // optional string Vat = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Vat:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_vat()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->vat().data(), this->vat().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_Grounds;
        break;
      }

      // optional string Grounds = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Grounds:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_grounds()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->grounds().data(), this->grounds().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_NeedReceipt;
        break;
      }

      // optional bool NeedReceipt = 12 [default = false];
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_NeedReceipt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &needreceipt_)));
          set_has_needreceipt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BasicDocumentAttachment::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .Diadoc.Api.Proto.Events.SignedContent SignedContent = 1;
  if (has_signedcontent()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->signedcontent(), output);
  }

  // required string FileName = 2;
  if (has_filename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->filename().data(), this->filename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->filename(), output);
  }

  // optional string Comment = 3;
  if (has_comment()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->comment().data(), this->comment().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->comment(), output);
  }

  // repeated .Diadoc.Api.Proto.DocumentId InitialDocumentIds = 4;
  for (int i = 0; i < this->initialdocumentids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->initialdocumentids(i), output);
  }

  // repeated .Diadoc.Api.Proto.DocumentId SubordinateDocumentIds = 5;
  for (int i = 0; i < this->subordinatedocumentids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->subordinatedocumentids(i), output);
  }

  // required string DocumentDate = 6;
  if (has_documentdate()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->documentdate().data(), this->documentdate().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->documentdate(), output);
  }

  // required string DocumentNumber = 7;
  if (has_documentnumber()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->documentnumber().data(), this->documentnumber().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->documentnumber(), output);
  }

  // required string Total = 8;
  if (has_total()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->total().data(), this->total().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->total(), output);
  }

  // optional string CustomDocumentId = 9;
  if (has_customdocumentid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->customdocumentid().data(), this->customdocumentid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->customdocumentid(), output);
  }

  // optional string Vat = 10;
  if (has_vat()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->vat().data(), this->vat().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->vat(), output);
  }

  // optional string Grounds = 11;
  if (has_grounds()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->grounds().data(), this->grounds().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      11, this->grounds(), output);
  }

  // optional bool NeedReceipt = 12 [default = false];
  if (has_needreceipt()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(12, this->needreceipt(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BasicDocumentAttachment::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .Diadoc.Api.Proto.Events.SignedContent SignedContent = 1;
  if (has_signedcontent()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->signedcontent(), target);
  }

  // required string FileName = 2;
  if (has_filename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->filename().data(), this->filename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->filename(), target);
  }

  // optional string Comment = 3;
  if (has_comment()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->comment().data(), this->comment().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->comment(), target);
  }

  // repeated .Diadoc.Api.Proto.DocumentId InitialDocumentIds = 4;
  for (int i = 0; i < this->initialdocumentids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->initialdocumentids(i), target);
  }

  // repeated .Diadoc.Api.Proto.DocumentId SubordinateDocumentIds = 5;
  for (int i = 0; i < this->subordinatedocumentids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->subordinatedocumentids(i), target);
  }

  // required string DocumentDate = 6;
  if (has_documentdate()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->documentdate().data(), this->documentdate().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->documentdate(), target);
  }

  // required string DocumentNumber = 7;
  if (has_documentnumber()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->documentnumber().data(), this->documentnumber().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->documentnumber(), target);
  }

  // required string Total = 8;
  if (has_total()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->total().data(), this->total().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->total(), target);
  }

  // optional string CustomDocumentId = 9;
  if (has_customdocumentid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->customdocumentid().data(), this->customdocumentid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->customdocumentid(), target);
  }

  // optional string Vat = 10;
  if (has_vat()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->vat().data(), this->vat().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->vat(), target);
  }

  // optional string Grounds = 11;
  if (has_grounds()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->grounds().data(), this->grounds().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->grounds(), target);
  }

  // optional bool NeedReceipt = 12 [default = false];
  if (has_needreceipt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(12, this->needreceipt(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BasicDocumentAttachment::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .Diadoc.Api.Proto.Events.SignedContent SignedContent = 1;
    if (has_signedcontent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->signedcontent());
    }

    // required string FileName = 2;
    if (has_filename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->filename());
    }

    // optional string Comment = 3;
    if (has_comment()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->comment());
    }

    // required string DocumentDate = 6;
    if (has_documentdate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->documentdate());
    }

    // required string DocumentNumber = 7;
    if (has_documentnumber()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->documentnumber());
    }

    // required string Total = 8;
    if (has_total()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->total());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string CustomDocumentId = 9;
    if (has_customdocumentid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->customdocumentid());
    }

    // optional string Vat = 10;
    if (has_vat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->vat());
    }

    // optional string Grounds = 11;
    if (has_grounds()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->grounds());
    }

    // optional bool NeedReceipt = 12 [default = false];
    if (has_needreceipt()) {
      total_size += 1 + 1;
    }

  }
  // repeated .Diadoc.Api.Proto.DocumentId InitialDocumentIds = 4;
  total_size += 1 * this->initialdocumentids_size();
  for (int i = 0; i < this->initialdocumentids_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->initialdocumentids(i));
  }

  // repeated .Diadoc.Api.Proto.DocumentId SubordinateDocumentIds = 5;
  total_size += 1 * this->subordinatedocumentids_size();
  for (int i = 0; i < this->subordinatedocumentids_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->subordinatedocumentids(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BasicDocumentAttachment::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BasicDocumentAttachment* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BasicDocumentAttachment*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BasicDocumentAttachment::MergeFrom(const BasicDocumentAttachment& from) {
  GOOGLE_CHECK_NE(&from, this);
  initialdocumentids_.MergeFrom(from.initialdocumentids_);
  subordinatedocumentids_.MergeFrom(from.subordinatedocumentids_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_signedcontent()) {
      mutable_signedcontent()->::Diadoc::Api::Proto::Events::SignedContent::MergeFrom(from.signedcontent());
    }
    if (from.has_filename()) {
      set_filename(from.filename());
    }
    if (from.has_comment()) {
      set_comment(from.comment());
    }
    if (from.has_documentdate()) {
      set_documentdate(from.documentdate());
    }
    if (from.has_documentnumber()) {
      set_documentnumber(from.documentnumber());
    }
    if (from.has_total()) {
      set_total(from.total());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_customdocumentid()) {
      set_customdocumentid(from.customdocumentid());
    }
    if (from.has_vat()) {
      set_vat(from.vat());
    }
    if (from.has_grounds()) {
      set_grounds(from.grounds());
    }
    if (from.has_needreceipt()) {
      set_needreceipt(from.needreceipt());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BasicDocumentAttachment::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BasicDocumentAttachment::CopyFrom(const BasicDocumentAttachment& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BasicDocumentAttachment::IsInitialized() const {
  if ((_has_bits_[0] & 0x000000e3) != 0x000000e3) return false;

  for (int i = 0; i < initialdocumentids_size(); i++) {
    if (!this->initialdocumentids(i).IsInitialized()) return false;
  }
  for (int i = 0; i < subordinatedocumentids_size(); i++) {
    if (!this->subordinatedocumentids(i).IsInitialized()) return false;
  }
  return true;
}

void BasicDocumentAttachment::Swap(BasicDocumentAttachment* other) {
  if (other != this) {
    std::swap(signedcontent_, other->signedcontent_);
    std::swap(filename_, other->filename_);
    std::swap(comment_, other->comment_);
    initialdocumentids_.Swap(&other->initialdocumentids_);
    subordinatedocumentids_.Swap(&other->subordinatedocumentids_);
    std::swap(documentdate_, other->documentdate_);
    std::swap(documentnumber_, other->documentnumber_);
    std::swap(total_, other->total_);
    std::swap(customdocumentid_, other->customdocumentid_);
    std::swap(vat_, other->vat_);
    std::swap(grounds_, other->grounds_);
    std::swap(needreceipt_, other->needreceipt_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BasicDocumentAttachment::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BasicDocumentAttachment_descriptor_;
  metadata.reflection = BasicDocumentAttachment_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Torg13Attachment::kSignedContentFieldNumber;
const int Torg13Attachment::kFileNameFieldNumber;
const int Torg13Attachment::kCommentFieldNumber;
const int Torg13Attachment::kInitialDocumentIdsFieldNumber;
const int Torg13Attachment::kSubordinateDocumentIdsFieldNumber;
const int Torg13Attachment::kDocumentDateFieldNumber;
const int Torg13Attachment::kDocumentNumberFieldNumber;
const int Torg13Attachment::kTotalFieldNumber;
const int Torg13Attachment::kCustomDocumentIdFieldNumber;
const int Torg13Attachment::kGroundsFieldNumber;
const int Torg13Attachment::kNeedReceiptFieldNumber;
#endif  // !_MSC_VER

Torg13Attachment::Torg13Attachment()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Torg13Attachment::InitAsDefaultInstance() {
  signedcontent_ = const_cast< ::Diadoc::Api::Proto::Events::SignedContent*>(&::Diadoc::Api::Proto::Events::SignedContent::default_instance());
}

Torg13Attachment::Torg13Attachment(const Torg13Attachment& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Torg13Attachment::SharedCtor() {
  _cached_size_ = 0;
  signedcontent_ = NULL;
  filename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  comment_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  documentdate_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  documentnumber_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  total_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  customdocumentid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  grounds_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  needreceipt_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Torg13Attachment::~Torg13Attachment() {
  SharedDtor();
}

void Torg13Attachment::SharedDtor() {
  if (filename_ != &::google::protobuf::internal::kEmptyString) {
    delete filename_;
  }
  if (comment_ != &::google::protobuf::internal::kEmptyString) {
    delete comment_;
  }
  if (documentdate_ != &::google::protobuf::internal::kEmptyString) {
    delete documentdate_;
  }
  if (documentnumber_ != &::google::protobuf::internal::kEmptyString) {
    delete documentnumber_;
  }
  if (total_ != &::google::protobuf::internal::kEmptyString) {
    delete total_;
  }
  if (customdocumentid_ != &::google::protobuf::internal::kEmptyString) {
    delete customdocumentid_;
  }
  if (grounds_ != &::google::protobuf::internal::kEmptyString) {
    delete grounds_;
  }
  if (this != default_instance_) {
    delete signedcontent_;
  }
}

void Torg13Attachment::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Torg13Attachment::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Torg13Attachment_descriptor_;
}

const Torg13Attachment& Torg13Attachment::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Events_2fDiadocMessage_2ePostApi_2eproto();
  return *default_instance_;
}

Torg13Attachment* Torg13Attachment::default_instance_ = NULL;

Torg13Attachment* Torg13Attachment::New() const {
  return new Torg13Attachment;
}

void Torg13Attachment::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_signedcontent()) {
      if (signedcontent_ != NULL) signedcontent_->::Diadoc::Api::Proto::Events::SignedContent::Clear();
    }
    if (has_filename()) {
      if (filename_ != &::google::protobuf::internal::kEmptyString) {
        filename_->clear();
      }
    }
    if (has_comment()) {
      if (comment_ != &::google::protobuf::internal::kEmptyString) {
        comment_->clear();
      }
    }
    if (has_documentdate()) {
      if (documentdate_ != &::google::protobuf::internal::kEmptyString) {
        documentdate_->clear();
      }
    }
    if (has_documentnumber()) {
      if (documentnumber_ != &::google::protobuf::internal::kEmptyString) {
        documentnumber_->clear();
      }
    }
    if (has_total()) {
      if (total_ != &::google::protobuf::internal::kEmptyString) {
        total_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_customdocumentid()) {
      if (customdocumentid_ != &::google::protobuf::internal::kEmptyString) {
        customdocumentid_->clear();
      }
    }
    if (has_grounds()) {
      if (grounds_ != &::google::protobuf::internal::kEmptyString) {
        grounds_->clear();
      }
    }
    needreceipt_ = false;
  }
  initialdocumentids_.Clear();
  subordinatedocumentids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Torg13Attachment::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Diadoc.Api.Proto.Events.SignedContent SignedContent = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_signedcontent()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_FileName;
        break;
      }

      // required string FileName = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_FileName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_filename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->filename().data(), this->filename().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_Comment;
        break;
      }

      // optional string Comment = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Comment:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_comment()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->comment().data(), this->comment().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_InitialDocumentIds;
        break;
      }

      // repeated .Diadoc.Api.Proto.DocumentId InitialDocumentIds = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_InitialDocumentIds:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_initialdocumentids()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_InitialDocumentIds;
        if (input->ExpectTag(42)) goto parse_SubordinateDocumentIds;
        break;
      }

      // repeated .Diadoc.Api.Proto.DocumentId SubordinateDocumentIds = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_SubordinateDocumentIds:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_subordinatedocumentids()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_SubordinateDocumentIds;
        if (input->ExpectTag(50)) goto parse_DocumentDate;
        break;
      }

      // required string DocumentDate = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_DocumentDate:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_documentdate()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->documentdate().data(), this->documentdate().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_DocumentNumber;
        break;
      }

      // required string DocumentNumber = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_DocumentNumber:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_documentnumber()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->documentnumber().data(), this->documentnumber().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_Total;
        break;
      }

      // required string Total = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Total:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_total()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->total().data(), this->total().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_CustomDocumentId;
        break;
      }

      // optional string CustomDocumentId = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_CustomDocumentId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_customdocumentid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->customdocumentid().data(), this->customdocumentid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_Grounds;
        break;
      }

      // optional string Grounds = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Grounds:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_grounds()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->grounds().data(), this->grounds().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_NeedReceipt;
        break;
      }

      // optional bool NeedReceipt = 12 [default = false];
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_NeedReceipt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &needreceipt_)));
          set_has_needreceipt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Torg13Attachment::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .Diadoc.Api.Proto.Events.SignedContent SignedContent = 1;
  if (has_signedcontent()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->signedcontent(), output);
  }

  // required string FileName = 2;
  if (has_filename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->filename().data(), this->filename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->filename(), output);
  }

  // optional string Comment = 3;
  if (has_comment()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->comment().data(), this->comment().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->comment(), output);
  }

  // repeated .Diadoc.Api.Proto.DocumentId InitialDocumentIds = 4;
  for (int i = 0; i < this->initialdocumentids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->initialdocumentids(i), output);
  }

  // repeated .Diadoc.Api.Proto.DocumentId SubordinateDocumentIds = 5;
  for (int i = 0; i < this->subordinatedocumentids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->subordinatedocumentids(i), output);
  }

  // required string DocumentDate = 6;
  if (has_documentdate()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->documentdate().data(), this->documentdate().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->documentdate(), output);
  }

  // required string DocumentNumber = 7;
  if (has_documentnumber()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->documentnumber().data(), this->documentnumber().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->documentnumber(), output);
  }

  // required string Total = 8;
  if (has_total()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->total().data(), this->total().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->total(), output);
  }

  // optional string CustomDocumentId = 9;
  if (has_customdocumentid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->customdocumentid().data(), this->customdocumentid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->customdocumentid(), output);
  }

  // optional string Grounds = 11;
  if (has_grounds()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->grounds().data(), this->grounds().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      11, this->grounds(), output);
  }

  // optional bool NeedReceipt = 12 [default = false];
  if (has_needreceipt()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(12, this->needreceipt(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Torg13Attachment::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .Diadoc.Api.Proto.Events.SignedContent SignedContent = 1;
  if (has_signedcontent()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->signedcontent(), target);
  }

  // required string FileName = 2;
  if (has_filename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->filename().data(), this->filename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->filename(), target);
  }

  // optional string Comment = 3;
  if (has_comment()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->comment().data(), this->comment().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->comment(), target);
  }

  // repeated .Diadoc.Api.Proto.DocumentId InitialDocumentIds = 4;
  for (int i = 0; i < this->initialdocumentids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->initialdocumentids(i), target);
  }

  // repeated .Diadoc.Api.Proto.DocumentId SubordinateDocumentIds = 5;
  for (int i = 0; i < this->subordinatedocumentids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->subordinatedocumentids(i), target);
  }

  // required string DocumentDate = 6;
  if (has_documentdate()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->documentdate().data(), this->documentdate().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->documentdate(), target);
  }

  // required string DocumentNumber = 7;
  if (has_documentnumber()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->documentnumber().data(), this->documentnumber().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->documentnumber(), target);
  }

  // required string Total = 8;
  if (has_total()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->total().data(), this->total().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->total(), target);
  }

  // optional string CustomDocumentId = 9;
  if (has_customdocumentid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->customdocumentid().data(), this->customdocumentid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->customdocumentid(), target);
  }

  // optional string Grounds = 11;
  if (has_grounds()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->grounds().data(), this->grounds().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->grounds(), target);
  }

  // optional bool NeedReceipt = 12 [default = false];
  if (has_needreceipt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(12, this->needreceipt(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Torg13Attachment::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .Diadoc.Api.Proto.Events.SignedContent SignedContent = 1;
    if (has_signedcontent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->signedcontent());
    }

    // required string FileName = 2;
    if (has_filename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->filename());
    }

    // optional string Comment = 3;
    if (has_comment()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->comment());
    }

    // required string DocumentDate = 6;
    if (has_documentdate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->documentdate());
    }

    // required string DocumentNumber = 7;
    if (has_documentnumber()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->documentnumber());
    }

    // required string Total = 8;
    if (has_total()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->total());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string CustomDocumentId = 9;
    if (has_customdocumentid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->customdocumentid());
    }

    // optional string Grounds = 11;
    if (has_grounds()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->grounds());
    }

    // optional bool NeedReceipt = 12 [default = false];
    if (has_needreceipt()) {
      total_size += 1 + 1;
    }

  }
  // repeated .Diadoc.Api.Proto.DocumentId InitialDocumentIds = 4;
  total_size += 1 * this->initialdocumentids_size();
  for (int i = 0; i < this->initialdocumentids_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->initialdocumentids(i));
  }

  // repeated .Diadoc.Api.Proto.DocumentId SubordinateDocumentIds = 5;
  total_size += 1 * this->subordinatedocumentids_size();
  for (int i = 0; i < this->subordinatedocumentids_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->subordinatedocumentids(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Torg13Attachment::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Torg13Attachment* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Torg13Attachment*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Torg13Attachment::MergeFrom(const Torg13Attachment& from) {
  GOOGLE_CHECK_NE(&from, this);
  initialdocumentids_.MergeFrom(from.initialdocumentids_);
  subordinatedocumentids_.MergeFrom(from.subordinatedocumentids_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_signedcontent()) {
      mutable_signedcontent()->::Diadoc::Api::Proto::Events::SignedContent::MergeFrom(from.signedcontent());
    }
    if (from.has_filename()) {
      set_filename(from.filename());
    }
    if (from.has_comment()) {
      set_comment(from.comment());
    }
    if (from.has_documentdate()) {
      set_documentdate(from.documentdate());
    }
    if (from.has_documentnumber()) {
      set_documentnumber(from.documentnumber());
    }
    if (from.has_total()) {
      set_total(from.total());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_customdocumentid()) {
      set_customdocumentid(from.customdocumentid());
    }
    if (from.has_grounds()) {
      set_grounds(from.grounds());
    }
    if (from.has_needreceipt()) {
      set_needreceipt(from.needreceipt());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Torg13Attachment::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Torg13Attachment::CopyFrom(const Torg13Attachment& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Torg13Attachment::IsInitialized() const {
  if ((_has_bits_[0] & 0x000000e3) != 0x000000e3) return false;

  for (int i = 0; i < initialdocumentids_size(); i++) {
    if (!this->initialdocumentids(i).IsInitialized()) return false;
  }
  for (int i = 0; i < subordinatedocumentids_size(); i++) {
    if (!this->subordinatedocumentids(i).IsInitialized()) return false;
  }
  return true;
}

void Torg13Attachment::Swap(Torg13Attachment* other) {
  if (other != this) {
    std::swap(signedcontent_, other->signedcontent_);
    std::swap(filename_, other->filename_);
    std::swap(comment_, other->comment_);
    initialdocumentids_.Swap(&other->initialdocumentids_);
    subordinatedocumentids_.Swap(&other->subordinatedocumentids_);
    std::swap(documentdate_, other->documentdate_);
    std::swap(documentnumber_, other->documentnumber_);
    std::swap(total_, other->total_);
    std::swap(customdocumentid_, other->customdocumentid_);
    std::swap(grounds_, other->grounds_);
    std::swap(needreceipt_, other->needreceipt_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Torg13Attachment::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Torg13Attachment_descriptor_;
  metadata.reflection = Torg13Attachment_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AcceptanceCertificateAttachment::kSignedContentFieldNumber;
const int AcceptanceCertificateAttachment::kFileNameFieldNumber;
const int AcceptanceCertificateAttachment::kCommentFieldNumber;
const int AcceptanceCertificateAttachment::kInitialDocumentIdsFieldNumber;
const int AcceptanceCertificateAttachment::kSubordinateDocumentIdsFieldNumber;
const int AcceptanceCertificateAttachment::kDocumentDateFieldNumber;
const int AcceptanceCertificateAttachment::kDocumentNumberFieldNumber;
const int AcceptanceCertificateAttachment::kTotalFieldNumber;
const int AcceptanceCertificateAttachment::kCustomDocumentIdFieldNumber;
const int AcceptanceCertificateAttachment::kVatFieldNumber;
const int AcceptanceCertificateAttachment::kGroundsFieldNumber;
const int AcceptanceCertificateAttachment::kNeedReceiptFieldNumber;
const int AcceptanceCertificateAttachment::kNeedRecipientSignatureFieldNumber;
#endif  // !_MSC_VER

AcceptanceCertificateAttachment::AcceptanceCertificateAttachment()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AcceptanceCertificateAttachment::InitAsDefaultInstance() {
  signedcontent_ = const_cast< ::Diadoc::Api::Proto::Events::SignedContent*>(&::Diadoc::Api::Proto::Events::SignedContent::default_instance());
}

AcceptanceCertificateAttachment::AcceptanceCertificateAttachment(const AcceptanceCertificateAttachment& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AcceptanceCertificateAttachment::SharedCtor() {
  _cached_size_ = 0;
  signedcontent_ = NULL;
  filename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  comment_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  documentdate_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  documentnumber_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  total_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  customdocumentid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  vat_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  grounds_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  needreceipt_ = false;
  needrecipientsignature_ = true;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AcceptanceCertificateAttachment::~AcceptanceCertificateAttachment() {
  SharedDtor();
}

void AcceptanceCertificateAttachment::SharedDtor() {
  if (filename_ != &::google::protobuf::internal::kEmptyString) {
    delete filename_;
  }
  if (comment_ != &::google::protobuf::internal::kEmptyString) {
    delete comment_;
  }
  if (documentdate_ != &::google::protobuf::internal::kEmptyString) {
    delete documentdate_;
  }
  if (documentnumber_ != &::google::protobuf::internal::kEmptyString) {
    delete documentnumber_;
  }
  if (total_ != &::google::protobuf::internal::kEmptyString) {
    delete total_;
  }
  if (customdocumentid_ != &::google::protobuf::internal::kEmptyString) {
    delete customdocumentid_;
  }
  if (vat_ != &::google::protobuf::internal::kEmptyString) {
    delete vat_;
  }
  if (grounds_ != &::google::protobuf::internal::kEmptyString) {
    delete grounds_;
  }
  if (this != default_instance_) {
    delete signedcontent_;
  }
}

void AcceptanceCertificateAttachment::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AcceptanceCertificateAttachment::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AcceptanceCertificateAttachment_descriptor_;
}

const AcceptanceCertificateAttachment& AcceptanceCertificateAttachment::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Events_2fDiadocMessage_2ePostApi_2eproto();
  return *default_instance_;
}

AcceptanceCertificateAttachment* AcceptanceCertificateAttachment::default_instance_ = NULL;

AcceptanceCertificateAttachment* AcceptanceCertificateAttachment::New() const {
  return new AcceptanceCertificateAttachment;
}

void AcceptanceCertificateAttachment::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_signedcontent()) {
      if (signedcontent_ != NULL) signedcontent_->::Diadoc::Api::Proto::Events::SignedContent::Clear();
    }
    if (has_filename()) {
      if (filename_ != &::google::protobuf::internal::kEmptyString) {
        filename_->clear();
      }
    }
    if (has_comment()) {
      if (comment_ != &::google::protobuf::internal::kEmptyString) {
        comment_->clear();
      }
    }
    if (has_documentdate()) {
      if (documentdate_ != &::google::protobuf::internal::kEmptyString) {
        documentdate_->clear();
      }
    }
    if (has_documentnumber()) {
      if (documentnumber_ != &::google::protobuf::internal::kEmptyString) {
        documentnumber_->clear();
      }
    }
    if (has_total()) {
      if (total_ != &::google::protobuf::internal::kEmptyString) {
        total_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_customdocumentid()) {
      if (customdocumentid_ != &::google::protobuf::internal::kEmptyString) {
        customdocumentid_->clear();
      }
    }
    if (has_vat()) {
      if (vat_ != &::google::protobuf::internal::kEmptyString) {
        vat_->clear();
      }
    }
    if (has_grounds()) {
      if (grounds_ != &::google::protobuf::internal::kEmptyString) {
        grounds_->clear();
      }
    }
    needreceipt_ = false;
    needrecipientsignature_ = true;
  }
  initialdocumentids_.Clear();
  subordinatedocumentids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AcceptanceCertificateAttachment::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Diadoc.Api.Proto.Events.SignedContent SignedContent = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_signedcontent()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_FileName;
        break;
      }

      // required string FileName = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_FileName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_filename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->filename().data(), this->filename().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_Comment;
        break;
      }

      // optional string Comment = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Comment:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_comment()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->comment().data(), this->comment().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_InitialDocumentIds;
        break;
      }

      // repeated .Diadoc.Api.Proto.DocumentId InitialDocumentIds = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_InitialDocumentIds:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_initialdocumentids()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_InitialDocumentIds;
        if (input->ExpectTag(42)) goto parse_SubordinateDocumentIds;
        break;
      }

      // repeated .Diadoc.Api.Proto.DocumentId SubordinateDocumentIds = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_SubordinateDocumentIds:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_subordinatedocumentids()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_SubordinateDocumentIds;
        if (input->ExpectTag(50)) goto parse_DocumentDate;
        break;
      }

      // required string DocumentDate = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_DocumentDate:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_documentdate()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->documentdate().data(), this->documentdate().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_DocumentNumber;
        break;
      }

      // required string DocumentNumber = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_DocumentNumber:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_documentnumber()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->documentnumber().data(), this->documentnumber().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_Total;
        break;
      }

      // required string Total = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Total:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_total()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->total().data(), this->total().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_CustomDocumentId;
        break;
      }

      // optional string CustomDocumentId = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_CustomDocumentId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_customdocumentid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->customdocumentid().data(), this->customdocumentid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_Vat;
        break;
      }

      // optional string Vat = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Vat:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_vat()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->vat().data(), this->vat().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_Grounds;
        break;
      }

      // optional string Grounds = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Grounds:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_grounds()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->grounds().data(), this->grounds().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_NeedReceipt;
        break;
      }

      // optional bool NeedReceipt = 12 [default = false];
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_NeedReceipt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &needreceipt_)));
          set_has_needreceipt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_NeedRecipientSignature;
        break;
      }

      // optional bool NeedRecipientSignature = 13 [default = true];
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_NeedRecipientSignature:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &needrecipientsignature_)));
          set_has_needrecipientsignature();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AcceptanceCertificateAttachment::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .Diadoc.Api.Proto.Events.SignedContent SignedContent = 1;
  if (has_signedcontent()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->signedcontent(), output);
  }

  // required string FileName = 2;
  if (has_filename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->filename().data(), this->filename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->filename(), output);
  }

  // optional string Comment = 3;
  if (has_comment()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->comment().data(), this->comment().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->comment(), output);
  }

  // repeated .Diadoc.Api.Proto.DocumentId InitialDocumentIds = 4;
  for (int i = 0; i < this->initialdocumentids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->initialdocumentids(i), output);
  }

  // repeated .Diadoc.Api.Proto.DocumentId SubordinateDocumentIds = 5;
  for (int i = 0; i < this->subordinatedocumentids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->subordinatedocumentids(i), output);
  }

  // required string DocumentDate = 6;
  if (has_documentdate()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->documentdate().data(), this->documentdate().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->documentdate(), output);
  }

  // required string DocumentNumber = 7;
  if (has_documentnumber()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->documentnumber().data(), this->documentnumber().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->documentnumber(), output);
  }

  // required string Total = 8;
  if (has_total()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->total().data(), this->total().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->total(), output);
  }

  // optional string CustomDocumentId = 9;
  if (has_customdocumentid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->customdocumentid().data(), this->customdocumentid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->customdocumentid(), output);
  }

  // optional string Vat = 10;
  if (has_vat()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->vat().data(), this->vat().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->vat(), output);
  }

  // optional string Grounds = 11;
  if (has_grounds()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->grounds().data(), this->grounds().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      11, this->grounds(), output);
  }

  // optional bool NeedReceipt = 12 [default = false];
  if (has_needreceipt()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(12, this->needreceipt(), output);
  }

  // optional bool NeedRecipientSignature = 13 [default = true];
  if (has_needrecipientsignature()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(13, this->needrecipientsignature(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AcceptanceCertificateAttachment::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .Diadoc.Api.Proto.Events.SignedContent SignedContent = 1;
  if (has_signedcontent()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->signedcontent(), target);
  }

  // required string FileName = 2;
  if (has_filename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->filename().data(), this->filename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->filename(), target);
  }

  // optional string Comment = 3;
  if (has_comment()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->comment().data(), this->comment().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->comment(), target);
  }

  // repeated .Diadoc.Api.Proto.DocumentId InitialDocumentIds = 4;
  for (int i = 0; i < this->initialdocumentids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->initialdocumentids(i), target);
  }

  // repeated .Diadoc.Api.Proto.DocumentId SubordinateDocumentIds = 5;
  for (int i = 0; i < this->subordinatedocumentids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->subordinatedocumentids(i), target);
  }

  // required string DocumentDate = 6;
  if (has_documentdate()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->documentdate().data(), this->documentdate().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->documentdate(), target);
  }

  // required string DocumentNumber = 7;
  if (has_documentnumber()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->documentnumber().data(), this->documentnumber().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->documentnumber(), target);
  }

  // required string Total = 8;
  if (has_total()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->total().data(), this->total().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->total(), target);
  }

  // optional string CustomDocumentId = 9;
  if (has_customdocumentid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->customdocumentid().data(), this->customdocumentid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->customdocumentid(), target);
  }

  // optional string Vat = 10;
  if (has_vat()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->vat().data(), this->vat().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->vat(), target);
  }

  // optional string Grounds = 11;
  if (has_grounds()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->grounds().data(), this->grounds().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->grounds(), target);
  }

  // optional bool NeedReceipt = 12 [default = false];
  if (has_needreceipt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(12, this->needreceipt(), target);
  }

  // optional bool NeedRecipientSignature = 13 [default = true];
  if (has_needrecipientsignature()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(13, this->needrecipientsignature(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AcceptanceCertificateAttachment::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .Diadoc.Api.Proto.Events.SignedContent SignedContent = 1;
    if (has_signedcontent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->signedcontent());
    }

    // required string FileName = 2;
    if (has_filename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->filename());
    }

    // optional string Comment = 3;
    if (has_comment()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->comment());
    }

    // required string DocumentDate = 6;
    if (has_documentdate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->documentdate());
    }

    // required string DocumentNumber = 7;
    if (has_documentnumber()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->documentnumber());
    }

    // required string Total = 8;
    if (has_total()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->total());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string CustomDocumentId = 9;
    if (has_customdocumentid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->customdocumentid());
    }

    // optional string Vat = 10;
    if (has_vat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->vat());
    }

    // optional string Grounds = 11;
    if (has_grounds()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->grounds());
    }

    // optional bool NeedReceipt = 12 [default = false];
    if (has_needreceipt()) {
      total_size += 1 + 1;
    }

    // optional bool NeedRecipientSignature = 13 [default = true];
    if (has_needrecipientsignature()) {
      total_size += 1 + 1;
    }

  }
  // repeated .Diadoc.Api.Proto.DocumentId InitialDocumentIds = 4;
  total_size += 1 * this->initialdocumentids_size();
  for (int i = 0; i < this->initialdocumentids_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->initialdocumentids(i));
  }

  // repeated .Diadoc.Api.Proto.DocumentId SubordinateDocumentIds = 5;
  total_size += 1 * this->subordinatedocumentids_size();
  for (int i = 0; i < this->subordinatedocumentids_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->subordinatedocumentids(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AcceptanceCertificateAttachment::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AcceptanceCertificateAttachment* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AcceptanceCertificateAttachment*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AcceptanceCertificateAttachment::MergeFrom(const AcceptanceCertificateAttachment& from) {
  GOOGLE_CHECK_NE(&from, this);
  initialdocumentids_.MergeFrom(from.initialdocumentids_);
  subordinatedocumentids_.MergeFrom(from.subordinatedocumentids_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_signedcontent()) {
      mutable_signedcontent()->::Diadoc::Api::Proto::Events::SignedContent::MergeFrom(from.signedcontent());
    }
    if (from.has_filename()) {
      set_filename(from.filename());
    }
    if (from.has_comment()) {
      set_comment(from.comment());
    }
    if (from.has_documentdate()) {
      set_documentdate(from.documentdate());
    }
    if (from.has_documentnumber()) {
      set_documentnumber(from.documentnumber());
    }
    if (from.has_total()) {
      set_total(from.total());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_customdocumentid()) {
      set_customdocumentid(from.customdocumentid());
    }
    if (from.has_vat()) {
      set_vat(from.vat());
    }
    if (from.has_grounds()) {
      set_grounds(from.grounds());
    }
    if (from.has_needreceipt()) {
      set_needreceipt(from.needreceipt());
    }
    if (from.has_needrecipientsignature()) {
      set_needrecipientsignature(from.needrecipientsignature());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AcceptanceCertificateAttachment::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AcceptanceCertificateAttachment::CopyFrom(const AcceptanceCertificateAttachment& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AcceptanceCertificateAttachment::IsInitialized() const {
  if ((_has_bits_[0] & 0x000000e3) != 0x000000e3) return false;

  for (int i = 0; i < initialdocumentids_size(); i++) {
    if (!this->initialdocumentids(i).IsInitialized()) return false;
  }
  for (int i = 0; i < subordinatedocumentids_size(); i++) {
    if (!this->subordinatedocumentids(i).IsInitialized()) return false;
  }
  return true;
}

void AcceptanceCertificateAttachment::Swap(AcceptanceCertificateAttachment* other) {
  if (other != this) {
    std::swap(signedcontent_, other->signedcontent_);
    std::swap(filename_, other->filename_);
    std::swap(comment_, other->comment_);
    initialdocumentids_.Swap(&other->initialdocumentids_);
    subordinatedocumentids_.Swap(&other->subordinatedocumentids_);
    std::swap(documentdate_, other->documentdate_);
    std::swap(documentnumber_, other->documentnumber_);
    std::swap(total_, other->total_);
    std::swap(customdocumentid_, other->customdocumentid_);
    std::swap(vat_, other->vat_);
    std::swap(grounds_, other->grounds_);
    std::swap(needreceipt_, other->needreceipt_);
    std::swap(needrecipientsignature_, other->needrecipientsignature_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AcceptanceCertificateAttachment::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AcceptanceCertificateAttachment_descriptor_;
  metadata.reflection = AcceptanceCertificateAttachment_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TrustConnectionRequestAttachment::kSignedContentFieldNumber;
const int TrustConnectionRequestAttachment::kFileNameFieldNumber;
const int TrustConnectionRequestAttachment::kCommentFieldNumber;
const int TrustConnectionRequestAttachment::kCustomDocumentIdFieldNumber;
#endif  // !_MSC_VER

TrustConnectionRequestAttachment::TrustConnectionRequestAttachment()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TrustConnectionRequestAttachment::InitAsDefaultInstance() {
  signedcontent_ = const_cast< ::Diadoc::Api::Proto::Events::SignedContent*>(&::Diadoc::Api::Proto::Events::SignedContent::default_instance());
}

TrustConnectionRequestAttachment::TrustConnectionRequestAttachment(const TrustConnectionRequestAttachment& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TrustConnectionRequestAttachment::SharedCtor() {
  _cached_size_ = 0;
  signedcontent_ = NULL;
  filename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  comment_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  customdocumentid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TrustConnectionRequestAttachment::~TrustConnectionRequestAttachment() {
  SharedDtor();
}

void TrustConnectionRequestAttachment::SharedDtor() {
  if (filename_ != &::google::protobuf::internal::kEmptyString) {
    delete filename_;
  }
  if (comment_ != &::google::protobuf::internal::kEmptyString) {
    delete comment_;
  }
  if (customdocumentid_ != &::google::protobuf::internal::kEmptyString) {
    delete customdocumentid_;
  }
  if (this != default_instance_) {
    delete signedcontent_;
  }
}

void TrustConnectionRequestAttachment::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TrustConnectionRequestAttachment::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TrustConnectionRequestAttachment_descriptor_;
}

const TrustConnectionRequestAttachment& TrustConnectionRequestAttachment::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Events_2fDiadocMessage_2ePostApi_2eproto();
  return *default_instance_;
}

TrustConnectionRequestAttachment* TrustConnectionRequestAttachment::default_instance_ = NULL;

TrustConnectionRequestAttachment* TrustConnectionRequestAttachment::New() const {
  return new TrustConnectionRequestAttachment;
}

void TrustConnectionRequestAttachment::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_signedcontent()) {
      if (signedcontent_ != NULL) signedcontent_->::Diadoc::Api::Proto::Events::SignedContent::Clear();
    }
    if (has_filename()) {
      if (filename_ != &::google::protobuf::internal::kEmptyString) {
        filename_->clear();
      }
    }
    if (has_comment()) {
      if (comment_ != &::google::protobuf::internal::kEmptyString) {
        comment_->clear();
      }
    }
    if (has_customdocumentid()) {
      if (customdocumentid_ != &::google::protobuf::internal::kEmptyString) {
        customdocumentid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TrustConnectionRequestAttachment::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Diadoc.Api.Proto.Events.SignedContent SignedContent = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_signedcontent()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_FileName;
        break;
      }

      // required string FileName = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_FileName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_filename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->filename().data(), this->filename().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_Comment;
        break;
      }

      // optional string Comment = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Comment:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_comment()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->comment().data(), this->comment().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_CustomDocumentId;
        break;
      }

      // optional string CustomDocumentId = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_CustomDocumentId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_customdocumentid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->customdocumentid().data(), this->customdocumentid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TrustConnectionRequestAttachment::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .Diadoc.Api.Proto.Events.SignedContent SignedContent = 1;
  if (has_signedcontent()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->signedcontent(), output);
  }

  // required string FileName = 2;
  if (has_filename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->filename().data(), this->filename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->filename(), output);
  }

  // optional string Comment = 3;
  if (has_comment()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->comment().data(), this->comment().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->comment(), output);
  }

  // optional string CustomDocumentId = 4;
  if (has_customdocumentid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->customdocumentid().data(), this->customdocumentid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->customdocumentid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TrustConnectionRequestAttachment::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .Diadoc.Api.Proto.Events.SignedContent SignedContent = 1;
  if (has_signedcontent()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->signedcontent(), target);
  }

  // required string FileName = 2;
  if (has_filename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->filename().data(), this->filename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->filename(), target);
  }

  // optional string Comment = 3;
  if (has_comment()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->comment().data(), this->comment().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->comment(), target);
  }

  // optional string CustomDocumentId = 4;
  if (has_customdocumentid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->customdocumentid().data(), this->customdocumentid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->customdocumentid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TrustConnectionRequestAttachment::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .Diadoc.Api.Proto.Events.SignedContent SignedContent = 1;
    if (has_signedcontent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->signedcontent());
    }

    // required string FileName = 2;
    if (has_filename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->filename());
    }

    // optional string Comment = 3;
    if (has_comment()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->comment());
    }

    // optional string CustomDocumentId = 4;
    if (has_customdocumentid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->customdocumentid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TrustConnectionRequestAttachment::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TrustConnectionRequestAttachment* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TrustConnectionRequestAttachment*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TrustConnectionRequestAttachment::MergeFrom(const TrustConnectionRequestAttachment& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_signedcontent()) {
      mutable_signedcontent()->::Diadoc::Api::Proto::Events::SignedContent::MergeFrom(from.signedcontent());
    }
    if (from.has_filename()) {
      set_filename(from.filename());
    }
    if (from.has_comment()) {
      set_comment(from.comment());
    }
    if (from.has_customdocumentid()) {
      set_customdocumentid(from.customdocumentid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TrustConnectionRequestAttachment::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrustConnectionRequestAttachment::CopyFrom(const TrustConnectionRequestAttachment& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrustConnectionRequestAttachment::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void TrustConnectionRequestAttachment::Swap(TrustConnectionRequestAttachment* other) {
  if (other != this) {
    std::swap(signedcontent_, other->signedcontent_);
    std::swap(filename_, other->filename_);
    std::swap(comment_, other->comment_);
    std::swap(customdocumentid_, other->customdocumentid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TrustConnectionRequestAttachment::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TrustConnectionRequestAttachment_descriptor_;
  metadata.reflection = TrustConnectionRequestAttachment_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int StructuredDataAttachment::kContentFieldNumber;
const int StructuredDataAttachment::kFileNameFieldNumber;
const int StructuredDataAttachment::kParentCustomDocumentIdFieldNumber;
#endif  // !_MSC_VER

StructuredDataAttachment::StructuredDataAttachment()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void StructuredDataAttachment::InitAsDefaultInstance() {
}

StructuredDataAttachment::StructuredDataAttachment(const StructuredDataAttachment& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void StructuredDataAttachment::SharedCtor() {
  _cached_size_ = 0;
  content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  filename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  parentcustomdocumentid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StructuredDataAttachment::~StructuredDataAttachment() {
  SharedDtor();
}

void StructuredDataAttachment::SharedDtor() {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    delete content_;
  }
  if (filename_ != &::google::protobuf::internal::kEmptyString) {
    delete filename_;
  }
  if (parentcustomdocumentid_ != &::google::protobuf::internal::kEmptyString) {
    delete parentcustomdocumentid_;
  }
  if (this != default_instance_) {
  }
}

void StructuredDataAttachment::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StructuredDataAttachment::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StructuredDataAttachment_descriptor_;
}

const StructuredDataAttachment& StructuredDataAttachment::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Events_2fDiadocMessage_2ePostApi_2eproto();
  return *default_instance_;
}

StructuredDataAttachment* StructuredDataAttachment::default_instance_ = NULL;

StructuredDataAttachment* StructuredDataAttachment::New() const {
  return new StructuredDataAttachment;
}

void StructuredDataAttachment::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_content()) {
      if (content_ != &::google::protobuf::internal::kEmptyString) {
        content_->clear();
      }
    }
    if (has_filename()) {
      if (filename_ != &::google::protobuf::internal::kEmptyString) {
        filename_->clear();
      }
    }
    if (has_parentcustomdocumentid()) {
      if (parentcustomdocumentid_ != &::google::protobuf::internal::kEmptyString) {
        parentcustomdocumentid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StructuredDataAttachment::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes Content = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_content()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_FileName;
        break;
      }

      // required string FileName = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_FileName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_filename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->filename().data(), this->filename().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_ParentCustomDocumentId;
        break;
      }

      // required string ParentCustomDocumentId = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ParentCustomDocumentId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_parentcustomdocumentid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->parentcustomdocumentid().data(), this->parentcustomdocumentid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StructuredDataAttachment::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bytes Content = 1;
  if (has_content()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->content(), output);
  }

  // required string FileName = 2;
  if (has_filename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->filename().data(), this->filename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->filename(), output);
  }

  // required string ParentCustomDocumentId = 3;
  if (has_parentcustomdocumentid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->parentcustomdocumentid().data(), this->parentcustomdocumentid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->parentcustomdocumentid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* StructuredDataAttachment::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bytes Content = 1;
  if (has_content()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->content(), target);
  }

  // required string FileName = 2;
  if (has_filename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->filename().data(), this->filename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->filename(), target);
  }

  // required string ParentCustomDocumentId = 3;
  if (has_parentcustomdocumentid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->parentcustomdocumentid().data(), this->parentcustomdocumentid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->parentcustomdocumentid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int StructuredDataAttachment::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes Content = 1;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->content());
    }

    // required string FileName = 2;
    if (has_filename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->filename());
    }

    // required string ParentCustomDocumentId = 3;
    if (has_parentcustomdocumentid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->parentcustomdocumentid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StructuredDataAttachment::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StructuredDataAttachment* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StructuredDataAttachment*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StructuredDataAttachment::MergeFrom(const StructuredDataAttachment& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_content()) {
      set_content(from.content());
    }
    if (from.has_filename()) {
      set_filename(from.filename());
    }
    if (from.has_parentcustomdocumentid()) {
      set_parentcustomdocumentid(from.parentcustomdocumentid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StructuredDataAttachment::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StructuredDataAttachment::CopyFrom(const StructuredDataAttachment& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StructuredDataAttachment::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void StructuredDataAttachment::Swap(StructuredDataAttachment* other) {
  if (other != this) {
    std::swap(content_, other->content_);
    std::swap(filename_, other->filename_);
    std::swap(parentcustomdocumentid_, other->parentcustomdocumentid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StructuredDataAttachment::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StructuredDataAttachment_descriptor_;
  metadata.reflection = StructuredDataAttachment_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PriceListAttachment::kSignedContentFieldNumber;
const int PriceListAttachment::kFileNameFieldNumber;
const int PriceListAttachment::kCommentFieldNumber;
const int PriceListAttachment::kInitialDocumentIdsFieldNumber;
const int PriceListAttachment::kSubordinateDocumentIdsFieldNumber;
const int PriceListAttachment::kCustomDocumentIdFieldNumber;
const int PriceListAttachment::kDocumentDateFieldNumber;
const int PriceListAttachment::kDocumentNumberFieldNumber;
const int PriceListAttachment::kPriceListEffectiveDateFieldNumber;
const int PriceListAttachment::kContractDocumentDateFieldNumber;
const int PriceListAttachment::kContractDocumentNumberFieldNumber;
const int PriceListAttachment::kNeedReceiptFieldNumber;
#endif  // !_MSC_VER

PriceListAttachment::PriceListAttachment()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PriceListAttachment::InitAsDefaultInstance() {
  signedcontent_ = const_cast< ::Diadoc::Api::Proto::Events::SignedContent*>(&::Diadoc::Api::Proto::Events::SignedContent::default_instance());
}

PriceListAttachment::PriceListAttachment(const PriceListAttachment& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PriceListAttachment::SharedCtor() {
  _cached_size_ = 0;
  signedcontent_ = NULL;
  filename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  comment_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  customdocumentid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  documentdate_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  documentnumber_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  pricelisteffectivedate_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  contractdocumentdate_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  contractdocumentnumber_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  needreceipt_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PriceListAttachment::~PriceListAttachment() {
  SharedDtor();
}

void PriceListAttachment::SharedDtor() {
  if (filename_ != &::google::protobuf::internal::kEmptyString) {
    delete filename_;
  }
  if (comment_ != &::google::protobuf::internal::kEmptyString) {
    delete comment_;
  }
  if (customdocumentid_ != &::google::protobuf::internal::kEmptyString) {
    delete customdocumentid_;
  }
  if (documentdate_ != &::google::protobuf::internal::kEmptyString) {
    delete documentdate_;
  }
  if (documentnumber_ != &::google::protobuf::internal::kEmptyString) {
    delete documentnumber_;
  }
  if (pricelisteffectivedate_ != &::google::protobuf::internal::kEmptyString) {
    delete pricelisteffectivedate_;
  }
  if (contractdocumentdate_ != &::google::protobuf::internal::kEmptyString) {
    delete contractdocumentdate_;
  }
  if (contractdocumentnumber_ != &::google::protobuf::internal::kEmptyString) {
    delete contractdocumentnumber_;
  }
  if (this != default_instance_) {
    delete signedcontent_;
  }
}

void PriceListAttachment::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PriceListAttachment::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PriceListAttachment_descriptor_;
}

const PriceListAttachment& PriceListAttachment::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Events_2fDiadocMessage_2ePostApi_2eproto();
  return *default_instance_;
}

PriceListAttachment* PriceListAttachment::default_instance_ = NULL;

PriceListAttachment* PriceListAttachment::New() const {
  return new PriceListAttachment;
}

void PriceListAttachment::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_signedcontent()) {
      if (signedcontent_ != NULL) signedcontent_->::Diadoc::Api::Proto::Events::SignedContent::Clear();
    }
    if (has_filename()) {
      if (filename_ != &::google::protobuf::internal::kEmptyString) {
        filename_->clear();
      }
    }
    if (has_comment()) {
      if (comment_ != &::google::protobuf::internal::kEmptyString) {
        comment_->clear();
      }
    }
    if (has_customdocumentid()) {
      if (customdocumentid_ != &::google::protobuf::internal::kEmptyString) {
        customdocumentid_->clear();
      }
    }
    if (has_documentdate()) {
      if (documentdate_ != &::google::protobuf::internal::kEmptyString) {
        documentdate_->clear();
      }
    }
    if (has_documentnumber()) {
      if (documentnumber_ != &::google::protobuf::internal::kEmptyString) {
        documentnumber_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_pricelisteffectivedate()) {
      if (pricelisteffectivedate_ != &::google::protobuf::internal::kEmptyString) {
        pricelisteffectivedate_->clear();
      }
    }
    if (has_contractdocumentdate()) {
      if (contractdocumentdate_ != &::google::protobuf::internal::kEmptyString) {
        contractdocumentdate_->clear();
      }
    }
    if (has_contractdocumentnumber()) {
      if (contractdocumentnumber_ != &::google::protobuf::internal::kEmptyString) {
        contractdocumentnumber_->clear();
      }
    }
    needreceipt_ = false;
  }
  initialdocumentids_.Clear();
  subordinatedocumentids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PriceListAttachment::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Diadoc.Api.Proto.Events.SignedContent SignedContent = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_signedcontent()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_FileName;
        break;
      }

      // required string FileName = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_FileName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_filename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->filename().data(), this->filename().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_Comment;
        break;
      }

      // optional string Comment = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Comment:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_comment()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->comment().data(), this->comment().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_InitialDocumentIds;
        break;
      }

      // repeated .Diadoc.Api.Proto.DocumentId InitialDocumentIds = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_InitialDocumentIds:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_initialdocumentids()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_InitialDocumentIds;
        if (input->ExpectTag(42)) goto parse_SubordinateDocumentIds;
        break;
      }

      // repeated .Diadoc.Api.Proto.DocumentId SubordinateDocumentIds = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_SubordinateDocumentIds:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_subordinatedocumentids()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_SubordinateDocumentIds;
        if (input->ExpectTag(50)) goto parse_CustomDocumentId;
        break;
      }

      // optional string CustomDocumentId = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_CustomDocumentId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_customdocumentid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->customdocumentid().data(), this->customdocumentid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_DocumentDate;
        break;
      }

      // required string DocumentDate = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_DocumentDate:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_documentdate()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->documentdate().data(), this->documentdate().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_DocumentNumber;
        break;
      }

      // required string DocumentNumber = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_DocumentNumber:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_documentnumber()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->documentnumber().data(), this->documentnumber().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_PriceListEffectiveDate;
        break;
      }

      // required string PriceListEffectiveDate = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_PriceListEffectiveDate:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pricelisteffectivedate()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->pricelisteffectivedate().data(), this->pricelisteffectivedate().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_ContractDocumentDate;
        break;
      }

      // required string ContractDocumentDate = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ContractDocumentDate:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_contractdocumentdate()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->contractdocumentdate().data(), this->contractdocumentdate().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_ContractDocumentNumber;
        break;
      }

      // required string ContractDocumentNumber = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ContractDocumentNumber:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_contractdocumentnumber()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->contractdocumentnumber().data(), this->contractdocumentnumber().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_NeedReceipt;
        break;
      }

      // optional bool NeedReceipt = 12 [default = false];
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_NeedReceipt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &needreceipt_)));
          set_has_needreceipt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PriceListAttachment::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .Diadoc.Api.Proto.Events.SignedContent SignedContent = 1;
  if (has_signedcontent()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->signedcontent(), output);
  }

  // required string FileName = 2;
  if (has_filename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->filename().data(), this->filename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->filename(), output);
  }

  // optional string Comment = 3;
  if (has_comment()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->comment().data(), this->comment().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->comment(), output);
  }

  // repeated .Diadoc.Api.Proto.DocumentId InitialDocumentIds = 4;
  for (int i = 0; i < this->initialdocumentids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->initialdocumentids(i), output);
  }

  // repeated .Diadoc.Api.Proto.DocumentId SubordinateDocumentIds = 5;
  for (int i = 0; i < this->subordinatedocumentids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->subordinatedocumentids(i), output);
  }

  // optional string CustomDocumentId = 6;
  if (has_customdocumentid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->customdocumentid().data(), this->customdocumentid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->customdocumentid(), output);
  }

  // required string DocumentDate = 7;
  if (has_documentdate()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->documentdate().data(), this->documentdate().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->documentdate(), output);
  }

  // required string DocumentNumber = 8;
  if (has_documentnumber()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->documentnumber().data(), this->documentnumber().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->documentnumber(), output);
  }

  // required string PriceListEffectiveDate = 9;
  if (has_pricelisteffectivedate()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pricelisteffectivedate().data(), this->pricelisteffectivedate().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->pricelisteffectivedate(), output);
  }

  // required string ContractDocumentDate = 10;
  if (has_contractdocumentdate()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->contractdocumentdate().data(), this->contractdocumentdate().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->contractdocumentdate(), output);
  }

  // required string ContractDocumentNumber = 11;
  if (has_contractdocumentnumber()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->contractdocumentnumber().data(), this->contractdocumentnumber().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      11, this->contractdocumentnumber(), output);
  }

  // optional bool NeedReceipt = 12 [default = false];
  if (has_needreceipt()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(12, this->needreceipt(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PriceListAttachment::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .Diadoc.Api.Proto.Events.SignedContent SignedContent = 1;
  if (has_signedcontent()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->signedcontent(), target);
  }

  // required string FileName = 2;
  if (has_filename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->filename().data(), this->filename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->filename(), target);
  }

  // optional string Comment = 3;
  if (has_comment()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->comment().data(), this->comment().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->comment(), target);
  }

  // repeated .Diadoc.Api.Proto.DocumentId InitialDocumentIds = 4;
  for (int i = 0; i < this->initialdocumentids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->initialdocumentids(i), target);
  }

  // repeated .Diadoc.Api.Proto.DocumentId SubordinateDocumentIds = 5;
  for (int i = 0; i < this->subordinatedocumentids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->subordinatedocumentids(i), target);
  }

  // optional string CustomDocumentId = 6;
  if (has_customdocumentid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->customdocumentid().data(), this->customdocumentid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->customdocumentid(), target);
  }

  // required string DocumentDate = 7;
  if (has_documentdate()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->documentdate().data(), this->documentdate().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->documentdate(), target);
  }

  // required string DocumentNumber = 8;
  if (has_documentnumber()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->documentnumber().data(), this->documentnumber().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->documentnumber(), target);
  }

  // required string PriceListEffectiveDate = 9;
  if (has_pricelisteffectivedate()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pricelisteffectivedate().data(), this->pricelisteffectivedate().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->pricelisteffectivedate(), target);
  }

  // required string ContractDocumentDate = 10;
  if (has_contractdocumentdate()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->contractdocumentdate().data(), this->contractdocumentdate().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->contractdocumentdate(), target);
  }

  // required string ContractDocumentNumber = 11;
  if (has_contractdocumentnumber()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->contractdocumentnumber().data(), this->contractdocumentnumber().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->contractdocumentnumber(), target);
  }

  // optional bool NeedReceipt = 12 [default = false];
  if (has_needreceipt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(12, this->needreceipt(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PriceListAttachment::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .Diadoc.Api.Proto.Events.SignedContent SignedContent = 1;
    if (has_signedcontent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->signedcontent());
    }

    // required string FileName = 2;
    if (has_filename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->filename());
    }

    // optional string Comment = 3;
    if (has_comment()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->comment());
    }

    // optional string CustomDocumentId = 6;
    if (has_customdocumentid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->customdocumentid());
    }

    // required string DocumentDate = 7;
    if (has_documentdate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->documentdate());
    }

    // required string DocumentNumber = 8;
    if (has_documentnumber()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->documentnumber());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required string PriceListEffectiveDate = 9;
    if (has_pricelisteffectivedate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pricelisteffectivedate());
    }

    // required string ContractDocumentDate = 10;
    if (has_contractdocumentdate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->contractdocumentdate());
    }

    // required string ContractDocumentNumber = 11;
    if (has_contractdocumentnumber()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->contractdocumentnumber());
    }

    // optional bool NeedReceipt = 12 [default = false];
    if (has_needreceipt()) {
      total_size += 1 + 1;
    }

  }
  // repeated .Diadoc.Api.Proto.DocumentId InitialDocumentIds = 4;
  total_size += 1 * this->initialdocumentids_size();
  for (int i = 0; i < this->initialdocumentids_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->initialdocumentids(i));
  }

  // repeated .Diadoc.Api.Proto.DocumentId SubordinateDocumentIds = 5;
  total_size += 1 * this->subordinatedocumentids_size();
  for (int i = 0; i < this->subordinatedocumentids_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->subordinatedocumentids(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PriceListAttachment::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PriceListAttachment* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PriceListAttachment*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PriceListAttachment::MergeFrom(const PriceListAttachment& from) {
  GOOGLE_CHECK_NE(&from, this);
  initialdocumentids_.MergeFrom(from.initialdocumentids_);
  subordinatedocumentids_.MergeFrom(from.subordinatedocumentids_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_signedcontent()) {
      mutable_signedcontent()->::Diadoc::Api::Proto::Events::SignedContent::MergeFrom(from.signedcontent());
    }
    if (from.has_filename()) {
      set_filename(from.filename());
    }
    if (from.has_comment()) {
      set_comment(from.comment());
    }
    if (from.has_customdocumentid()) {
      set_customdocumentid(from.customdocumentid());
    }
    if (from.has_documentdate()) {
      set_documentdate(from.documentdate());
    }
    if (from.has_documentnumber()) {
      set_documentnumber(from.documentnumber());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_pricelisteffectivedate()) {
      set_pricelisteffectivedate(from.pricelisteffectivedate());
    }
    if (from.has_contractdocumentdate()) {
      set_contractdocumentdate(from.contractdocumentdate());
    }
    if (from.has_contractdocumentnumber()) {
      set_contractdocumentnumber(from.contractdocumentnumber());
    }
    if (from.has_needreceipt()) {
      set_needreceipt(from.needreceipt());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PriceListAttachment::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PriceListAttachment::CopyFrom(const PriceListAttachment& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PriceListAttachment::IsInitialized() const {
  if ((_has_bits_[0] & 0x000007c3) != 0x000007c3) return false;

  for (int i = 0; i < initialdocumentids_size(); i++) {
    if (!this->initialdocumentids(i).IsInitialized()) return false;
  }
  for (int i = 0; i < subordinatedocumentids_size(); i++) {
    if (!this->subordinatedocumentids(i).IsInitialized()) return false;
  }
  return true;
}

void PriceListAttachment::Swap(PriceListAttachment* other) {
  if (other != this) {
    std::swap(signedcontent_, other->signedcontent_);
    std::swap(filename_, other->filename_);
    std::swap(comment_, other->comment_);
    initialdocumentids_.Swap(&other->initialdocumentids_);
    subordinatedocumentids_.Swap(&other->subordinatedocumentids_);
    std::swap(customdocumentid_, other->customdocumentid_);
    std::swap(documentdate_, other->documentdate_);
    std::swap(documentnumber_, other->documentnumber_);
    std::swap(pricelisteffectivedate_, other->pricelisteffectivedate_);
    std::swap(contractdocumentdate_, other->contractdocumentdate_);
    std::swap(contractdocumentnumber_, other->contractdocumentnumber_);
    std::swap(needreceipt_, other->needreceipt_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PriceListAttachment::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PriceListAttachment_descriptor_;
  metadata.reflection = PriceListAttachment_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReconciliationActAttachment::kSignedContentFieldNumber;
const int ReconciliationActAttachment::kFileNameFieldNumber;
const int ReconciliationActAttachment::kCommentFieldNumber;
const int ReconciliationActAttachment::kInitialDocumentIdsFieldNumber;
const int ReconciliationActAttachment::kSubordinateDocumentIdsFieldNumber;
const int ReconciliationActAttachment::kDocumentDateFieldNumber;
const int ReconciliationActAttachment::kDocumentNumberFieldNumber;
const int ReconciliationActAttachment::kCustomDocumentIdFieldNumber;
const int ReconciliationActAttachment::kNeedReceiptFieldNumber;
#endif  // !_MSC_VER

ReconciliationActAttachment::ReconciliationActAttachment()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReconciliationActAttachment::InitAsDefaultInstance() {
  signedcontent_ = const_cast< ::Diadoc::Api::Proto::Events::SignedContent*>(&::Diadoc::Api::Proto::Events::SignedContent::default_instance());
}

ReconciliationActAttachment::ReconciliationActAttachment(const ReconciliationActAttachment& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReconciliationActAttachment::SharedCtor() {
  _cached_size_ = 0;
  signedcontent_ = NULL;
  filename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  comment_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  documentdate_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  documentnumber_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  customdocumentid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  needreceipt_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReconciliationActAttachment::~ReconciliationActAttachment() {
  SharedDtor();
}

void ReconciliationActAttachment::SharedDtor() {
  if (filename_ != &::google::protobuf::internal::kEmptyString) {
    delete filename_;
  }
  if (comment_ != &::google::protobuf::internal::kEmptyString) {
    delete comment_;
  }
  if (documentdate_ != &::google::protobuf::internal::kEmptyString) {
    delete documentdate_;
  }
  if (documentnumber_ != &::google::protobuf::internal::kEmptyString) {
    delete documentnumber_;
  }
  if (customdocumentid_ != &::google::protobuf::internal::kEmptyString) {
    delete customdocumentid_;
  }
  if (this != default_instance_) {
    delete signedcontent_;
  }
}

void ReconciliationActAttachment::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReconciliationActAttachment::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReconciliationActAttachment_descriptor_;
}

const ReconciliationActAttachment& ReconciliationActAttachment::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Events_2fDiadocMessage_2ePostApi_2eproto();
  return *default_instance_;
}

ReconciliationActAttachment* ReconciliationActAttachment::default_instance_ = NULL;

ReconciliationActAttachment* ReconciliationActAttachment::New() const {
  return new ReconciliationActAttachment;
}

void ReconciliationActAttachment::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_signedcontent()) {
      if (signedcontent_ != NULL) signedcontent_->::Diadoc::Api::Proto::Events::SignedContent::Clear();
    }
    if (has_filename()) {
      if (filename_ != &::google::protobuf::internal::kEmptyString) {
        filename_->clear();
      }
    }
    if (has_comment()) {
      if (comment_ != &::google::protobuf::internal::kEmptyString) {
        comment_->clear();
      }
    }
    if (has_documentdate()) {
      if (documentdate_ != &::google::protobuf::internal::kEmptyString) {
        documentdate_->clear();
      }
    }
    if (has_documentnumber()) {
      if (documentnumber_ != &::google::protobuf::internal::kEmptyString) {
        documentnumber_->clear();
      }
    }
    if (has_customdocumentid()) {
      if (customdocumentid_ != &::google::protobuf::internal::kEmptyString) {
        customdocumentid_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    needreceipt_ = false;
  }
  initialdocumentids_.Clear();
  subordinatedocumentids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReconciliationActAttachment::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Diadoc.Api.Proto.Events.SignedContent SignedContent = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_signedcontent()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_FileName;
        break;
      }

      // required string FileName = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_FileName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_filename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->filename().data(), this->filename().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_Comment;
        break;
      }

      // optional string Comment = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Comment:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_comment()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->comment().data(), this->comment().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_InitialDocumentIds;
        break;
      }

      // repeated .Diadoc.Api.Proto.DocumentId InitialDocumentIds = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_InitialDocumentIds:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_initialdocumentids()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_InitialDocumentIds;
        if (input->ExpectTag(50)) goto parse_SubordinateDocumentIds;
        break;
      }

      // repeated .Diadoc.Api.Proto.DocumentId SubordinateDocumentIds = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_SubordinateDocumentIds:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_subordinatedocumentids()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_SubordinateDocumentIds;
        if (input->ExpectTag(58)) goto parse_DocumentDate;
        break;
      }

      // required string DocumentDate = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_DocumentDate:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_documentdate()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->documentdate().data(), this->documentdate().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_DocumentNumber;
        break;
      }

      // required string DocumentNumber = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_DocumentNumber:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_documentnumber()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->documentnumber().data(), this->documentnumber().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_CustomDocumentId;
        break;
      }

      // optional string CustomDocumentId = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_CustomDocumentId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_customdocumentid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->customdocumentid().data(), this->customdocumentid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_NeedReceipt;
        break;
      }

      // optional bool NeedReceipt = 10 [default = false];
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_NeedReceipt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &needreceipt_)));
          set_has_needreceipt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReconciliationActAttachment::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .Diadoc.Api.Proto.Events.SignedContent SignedContent = 1;
  if (has_signedcontent()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->signedcontent(), output);
  }

  // required string FileName = 2;
  if (has_filename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->filename().data(), this->filename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->filename(), output);
  }

  // optional string Comment = 3;
  if (has_comment()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->comment().data(), this->comment().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->comment(), output);
  }

  // repeated .Diadoc.Api.Proto.DocumentId InitialDocumentIds = 5;
  for (int i = 0; i < this->initialdocumentids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->initialdocumentids(i), output);
  }

  // repeated .Diadoc.Api.Proto.DocumentId SubordinateDocumentIds = 6;
  for (int i = 0; i < this->subordinatedocumentids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->subordinatedocumentids(i), output);
  }

  // required string DocumentDate = 7;
  if (has_documentdate()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->documentdate().data(), this->documentdate().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->documentdate(), output);
  }

  // required string DocumentNumber = 8;
  if (has_documentnumber()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->documentnumber().data(), this->documentnumber().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->documentnumber(), output);
  }

  // optional string CustomDocumentId = 9;
  if (has_customdocumentid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->customdocumentid().data(), this->customdocumentid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->customdocumentid(), output);
  }

  // optional bool NeedReceipt = 10 [default = false];
  if (has_needreceipt()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->needreceipt(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReconciliationActAttachment::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .Diadoc.Api.Proto.Events.SignedContent SignedContent = 1;
  if (has_signedcontent()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->signedcontent(), target);
  }

  // required string FileName = 2;
  if (has_filename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->filename().data(), this->filename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->filename(), target);
  }

  // optional string Comment = 3;
  if (has_comment()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->comment().data(), this->comment().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->comment(), target);
  }

  // repeated .Diadoc.Api.Proto.DocumentId InitialDocumentIds = 5;
  for (int i = 0; i < this->initialdocumentids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->initialdocumentids(i), target);
  }

  // repeated .Diadoc.Api.Proto.DocumentId SubordinateDocumentIds = 6;
  for (int i = 0; i < this->subordinatedocumentids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->subordinatedocumentids(i), target);
  }

  // required string DocumentDate = 7;
  if (has_documentdate()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->documentdate().data(), this->documentdate().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->documentdate(), target);
  }

  // required string DocumentNumber = 8;
  if (has_documentnumber()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->documentnumber().data(), this->documentnumber().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->documentnumber(), target);
  }

  // optional string CustomDocumentId = 9;
  if (has_customdocumentid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->customdocumentid().data(), this->customdocumentid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->customdocumentid(), target);
  }

  // optional bool NeedReceipt = 10 [default = false];
  if (has_needreceipt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->needreceipt(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReconciliationActAttachment::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .Diadoc.Api.Proto.Events.SignedContent SignedContent = 1;
    if (has_signedcontent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->signedcontent());
    }

    // required string FileName = 2;
    if (has_filename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->filename());
    }

    // optional string Comment = 3;
    if (has_comment()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->comment());
    }

    // required string DocumentDate = 7;
    if (has_documentdate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->documentdate());
    }

    // required string DocumentNumber = 8;
    if (has_documentnumber()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->documentnumber());
    }

    // optional string CustomDocumentId = 9;
    if (has_customdocumentid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->customdocumentid());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional bool NeedReceipt = 10 [default = false];
    if (has_needreceipt()) {
      total_size += 1 + 1;
    }

  }
  // repeated .Diadoc.Api.Proto.DocumentId InitialDocumentIds = 5;
  total_size += 1 * this->initialdocumentids_size();
  for (int i = 0; i < this->initialdocumentids_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->initialdocumentids(i));
  }

  // repeated .Diadoc.Api.Proto.DocumentId SubordinateDocumentIds = 6;
  total_size += 1 * this->subordinatedocumentids_size();
  for (int i = 0; i < this->subordinatedocumentids_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->subordinatedocumentids(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReconciliationActAttachment::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReconciliationActAttachment* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReconciliationActAttachment*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReconciliationActAttachment::MergeFrom(const ReconciliationActAttachment& from) {
  GOOGLE_CHECK_NE(&from, this);
  initialdocumentids_.MergeFrom(from.initialdocumentids_);
  subordinatedocumentids_.MergeFrom(from.subordinatedocumentids_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_signedcontent()) {
      mutable_signedcontent()->::Diadoc::Api::Proto::Events::SignedContent::MergeFrom(from.signedcontent());
    }
    if (from.has_filename()) {
      set_filename(from.filename());
    }
    if (from.has_comment()) {
      set_comment(from.comment());
    }
    if (from.has_documentdate()) {
      set_documentdate(from.documentdate());
    }
    if (from.has_documentnumber()) {
      set_documentnumber(from.documentnumber());
    }
    if (from.has_customdocumentid()) {
      set_customdocumentid(from.customdocumentid());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_needreceipt()) {
      set_needreceipt(from.needreceipt());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReconciliationActAttachment::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReconciliationActAttachment::CopyFrom(const ReconciliationActAttachment& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReconciliationActAttachment::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000063) != 0x00000063) return false;

  for (int i = 0; i < initialdocumentids_size(); i++) {
    if (!this->initialdocumentids(i).IsInitialized()) return false;
  }
  for (int i = 0; i < subordinatedocumentids_size(); i++) {
    if (!this->subordinatedocumentids(i).IsInitialized()) return false;
  }
  return true;
}

void ReconciliationActAttachment::Swap(ReconciliationActAttachment* other) {
  if (other != this) {
    std::swap(signedcontent_, other->signedcontent_);
    std::swap(filename_, other->filename_);
    std::swap(comment_, other->comment_);
    initialdocumentids_.Swap(&other->initialdocumentids_);
    subordinatedocumentids_.Swap(&other->subordinatedocumentids_);
    std::swap(documentdate_, other->documentdate_);
    std::swap(documentnumber_, other->documentnumber_);
    std::swap(customdocumentid_, other->customdocumentid_);
    std::swap(needreceipt_, other->needreceipt_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReconciliationActAttachment::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReconciliationActAttachment_descriptor_;
  metadata.reflection = ReconciliationActAttachment_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ContractAttachment::kSignedContentFieldNumber;
const int ContractAttachment::kFileNameFieldNumber;
const int ContractAttachment::kCommentFieldNumber;
const int ContractAttachment::kInitialDocumentIdsFieldNumber;
const int ContractAttachment::kSubordinateDocumentIdsFieldNumber;
const int ContractAttachment::kCustomDocumentIdFieldNumber;
const int ContractAttachment::kDocumentDateFieldNumber;
const int ContractAttachment::kDocumentNumberFieldNumber;
const int ContractAttachment::kContractPriceFieldNumber;
const int ContractAttachment::kContractTypeFieldNumber;
const int ContractAttachment::kNeedReceiptFieldNumber;
#endif  // !_MSC_VER

ContractAttachment::ContractAttachment()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ContractAttachment::InitAsDefaultInstance() {
  signedcontent_ = const_cast< ::Diadoc::Api::Proto::Events::SignedContent*>(&::Diadoc::Api::Proto::Events::SignedContent::default_instance());
}

ContractAttachment::ContractAttachment(const ContractAttachment& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ContractAttachment::SharedCtor() {
  _cached_size_ = 0;
  signedcontent_ = NULL;
  filename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  comment_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  customdocumentid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  documentdate_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  documentnumber_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  contractprice_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  contracttype_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  needreceipt_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ContractAttachment::~ContractAttachment() {
  SharedDtor();
}

void ContractAttachment::SharedDtor() {
  if (filename_ != &::google::protobuf::internal::kEmptyString) {
    delete filename_;
  }
  if (comment_ != &::google::protobuf::internal::kEmptyString) {
    delete comment_;
  }
  if (customdocumentid_ != &::google::protobuf::internal::kEmptyString) {
    delete customdocumentid_;
  }
  if (documentdate_ != &::google::protobuf::internal::kEmptyString) {
    delete documentdate_;
  }
  if (documentnumber_ != &::google::protobuf::internal::kEmptyString) {
    delete documentnumber_;
  }
  if (contractprice_ != &::google::protobuf::internal::kEmptyString) {
    delete contractprice_;
  }
  if (contracttype_ != &::google::protobuf::internal::kEmptyString) {
    delete contracttype_;
  }
  if (this != default_instance_) {
    delete signedcontent_;
  }
}

void ContractAttachment::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ContractAttachment::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ContractAttachment_descriptor_;
}

const ContractAttachment& ContractAttachment::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Events_2fDiadocMessage_2ePostApi_2eproto();
  return *default_instance_;
}

ContractAttachment* ContractAttachment::default_instance_ = NULL;

ContractAttachment* ContractAttachment::New() const {
  return new ContractAttachment;
}

void ContractAttachment::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_signedcontent()) {
      if (signedcontent_ != NULL) signedcontent_->::Diadoc::Api::Proto::Events::SignedContent::Clear();
    }
    if (has_filename()) {
      if (filename_ != &::google::protobuf::internal::kEmptyString) {
        filename_->clear();
      }
    }
    if (has_comment()) {
      if (comment_ != &::google::protobuf::internal::kEmptyString) {
        comment_->clear();
      }
    }
    if (has_customdocumentid()) {
      if (customdocumentid_ != &::google::protobuf::internal::kEmptyString) {
        customdocumentid_->clear();
      }
    }
    if (has_documentdate()) {
      if (documentdate_ != &::google::protobuf::internal::kEmptyString) {
        documentdate_->clear();
      }
    }
    if (has_documentnumber()) {
      if (documentnumber_ != &::google::protobuf::internal::kEmptyString) {
        documentnumber_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_contractprice()) {
      if (contractprice_ != &::google::protobuf::internal::kEmptyString) {
        contractprice_->clear();
      }
    }
    if (has_contracttype()) {
      if (contracttype_ != &::google::protobuf::internal::kEmptyString) {
        contracttype_->clear();
      }
    }
    needreceipt_ = false;
  }
  initialdocumentids_.Clear();
  subordinatedocumentids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ContractAttachment::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Diadoc.Api.Proto.Events.SignedContent SignedContent = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_signedcontent()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_FileName;
        break;
      }

      // required string FileName = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_FileName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_filename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->filename().data(), this->filename().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_Comment;
        break;
      }

      // optional string Comment = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Comment:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_comment()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->comment().data(), this->comment().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_InitialDocumentIds;
        break;
      }

      // repeated .Diadoc.Api.Proto.DocumentId InitialDocumentIds = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_InitialDocumentIds:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_initialdocumentids()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_InitialDocumentIds;
        if (input->ExpectTag(42)) goto parse_SubordinateDocumentIds;
        break;
      }

      // repeated .Diadoc.Api.Proto.DocumentId SubordinateDocumentIds = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_SubordinateDocumentIds:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_subordinatedocumentids()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_SubordinateDocumentIds;
        if (input->ExpectTag(50)) goto parse_CustomDocumentId;
        break;
      }

      // optional string CustomDocumentId = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_CustomDocumentId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_customdocumentid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->customdocumentid().data(), this->customdocumentid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_DocumentDate;
        break;
      }

      // required string DocumentDate = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_DocumentDate:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_documentdate()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->documentdate().data(), this->documentdate().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_DocumentNumber;
        break;
      }

      // required string DocumentNumber = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_DocumentNumber:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_documentnumber()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->documentnumber().data(), this->documentnumber().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_ContractPrice;
        break;
      }

      // optional string ContractPrice = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ContractPrice:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_contractprice()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->contractprice().data(), this->contractprice().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_ContractType;
        break;
      }

      // optional string ContractType = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ContractType:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_contracttype()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->contracttype().data(), this->contracttype().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_NeedReceipt;
        break;
      }

      // optional bool NeedReceipt = 11 [default = false];
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_NeedReceipt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &needreceipt_)));
          set_has_needreceipt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ContractAttachment::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .Diadoc.Api.Proto.Events.SignedContent SignedContent = 1;
  if (has_signedcontent()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->signedcontent(), output);
  }

  // required string FileName = 2;
  if (has_filename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->filename().data(), this->filename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->filename(), output);
  }

  // optional string Comment = 3;
  if (has_comment()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->comment().data(), this->comment().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->comment(), output);
  }

  // repeated .Diadoc.Api.Proto.DocumentId InitialDocumentIds = 4;
  for (int i = 0; i < this->initialdocumentids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->initialdocumentids(i), output);
  }

  // repeated .Diadoc.Api.Proto.DocumentId SubordinateDocumentIds = 5;
  for (int i = 0; i < this->subordinatedocumentids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->subordinatedocumentids(i), output);
  }

  // optional string CustomDocumentId = 6;
  if (has_customdocumentid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->customdocumentid().data(), this->customdocumentid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->customdocumentid(), output);
  }

  // required string DocumentDate = 7;
  if (has_documentdate()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->documentdate().data(), this->documentdate().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->documentdate(), output);
  }

  // required string DocumentNumber = 8;
  if (has_documentnumber()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->documentnumber().data(), this->documentnumber().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->documentnumber(), output);
  }

  // optional string ContractPrice = 9;
  if (has_contractprice()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->contractprice().data(), this->contractprice().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->contractprice(), output);
  }

  // optional string ContractType = 10;
  if (has_contracttype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->contracttype().data(), this->contracttype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->contracttype(), output);
  }

  // optional bool NeedReceipt = 11 [default = false];
  if (has_needreceipt()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->needreceipt(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ContractAttachment::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .Diadoc.Api.Proto.Events.SignedContent SignedContent = 1;
  if (has_signedcontent()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->signedcontent(), target);
  }

  // required string FileName = 2;
  if (has_filename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->filename().data(), this->filename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->filename(), target);
  }

  // optional string Comment = 3;
  if (has_comment()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->comment().data(), this->comment().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->comment(), target);
  }

  // repeated .Diadoc.Api.Proto.DocumentId InitialDocumentIds = 4;
  for (int i = 0; i < this->initialdocumentids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->initialdocumentids(i), target);
  }

  // repeated .Diadoc.Api.Proto.DocumentId SubordinateDocumentIds = 5;
  for (int i = 0; i < this->subordinatedocumentids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->subordinatedocumentids(i), target);
  }

  // optional string CustomDocumentId = 6;
  if (has_customdocumentid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->customdocumentid().data(), this->customdocumentid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->customdocumentid(), target);
  }

  // required string DocumentDate = 7;
  if (has_documentdate()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->documentdate().data(), this->documentdate().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->documentdate(), target);
  }

  // required string DocumentNumber = 8;
  if (has_documentnumber()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->documentnumber().data(), this->documentnumber().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->documentnumber(), target);
  }

  // optional string ContractPrice = 9;
  if (has_contractprice()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->contractprice().data(), this->contractprice().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->contractprice(), target);
  }

  // optional string ContractType = 10;
  if (has_contracttype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->contracttype().data(), this->contracttype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->contracttype(), target);
  }

  // optional bool NeedReceipt = 11 [default = false];
  if (has_needreceipt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(11, this->needreceipt(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ContractAttachment::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .Diadoc.Api.Proto.Events.SignedContent SignedContent = 1;
    if (has_signedcontent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->signedcontent());
    }

    // required string FileName = 2;
    if (has_filename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->filename());
    }

    // optional string Comment = 3;
    if (has_comment()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->comment());
    }

    // optional string CustomDocumentId = 6;
    if (has_customdocumentid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->customdocumentid());
    }

    // required string DocumentDate = 7;
    if (has_documentdate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->documentdate());
    }

    // required string DocumentNumber = 8;
    if (has_documentnumber()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->documentnumber());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string ContractPrice = 9;
    if (has_contractprice()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->contractprice());
    }

    // optional string ContractType = 10;
    if (has_contracttype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->contracttype());
    }

    // optional bool NeedReceipt = 11 [default = false];
    if (has_needreceipt()) {
      total_size += 1 + 1;
    }

  }
  // repeated .Diadoc.Api.Proto.DocumentId InitialDocumentIds = 4;
  total_size += 1 * this->initialdocumentids_size();
  for (int i = 0; i < this->initialdocumentids_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->initialdocumentids(i));
  }

  // repeated .Diadoc.Api.Proto.DocumentId SubordinateDocumentIds = 5;
  total_size += 1 * this->subordinatedocumentids_size();
  for (int i = 0; i < this->subordinatedocumentids_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->subordinatedocumentids(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ContractAttachment::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ContractAttachment* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ContractAttachment*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ContractAttachment::MergeFrom(const ContractAttachment& from) {
  GOOGLE_CHECK_NE(&from, this);
  initialdocumentids_.MergeFrom(from.initialdocumentids_);
  subordinatedocumentids_.MergeFrom(from.subordinatedocumentids_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_signedcontent()) {
      mutable_signedcontent()->::Diadoc::Api::Proto::Events::SignedContent::MergeFrom(from.signedcontent());
    }
    if (from.has_filename()) {
      set_filename(from.filename());
    }
    if (from.has_comment()) {
      set_comment(from.comment());
    }
    if (from.has_customdocumentid()) {
      set_customdocumentid(from.customdocumentid());
    }
    if (from.has_documentdate()) {
      set_documentdate(from.documentdate());
    }
    if (from.has_documentnumber()) {
      set_documentnumber(from.documentnumber());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_contractprice()) {
      set_contractprice(from.contractprice());
    }
    if (from.has_contracttype()) {
      set_contracttype(from.contracttype());
    }
    if (from.has_needreceipt()) {
      set_needreceipt(from.needreceipt());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ContractAttachment::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ContractAttachment::CopyFrom(const ContractAttachment& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ContractAttachment::IsInitialized() const {
  if ((_has_bits_[0] & 0x000000c3) != 0x000000c3) return false;

  for (int i = 0; i < initialdocumentids_size(); i++) {
    if (!this->initialdocumentids(i).IsInitialized()) return false;
  }
  for (int i = 0; i < subordinatedocumentids_size(); i++) {
    if (!this->subordinatedocumentids(i).IsInitialized()) return false;
  }
  return true;
}

void ContractAttachment::Swap(ContractAttachment* other) {
  if (other != this) {
    std::swap(signedcontent_, other->signedcontent_);
    std::swap(filename_, other->filename_);
    std::swap(comment_, other->comment_);
    initialdocumentids_.Swap(&other->initialdocumentids_);
    subordinatedocumentids_.Swap(&other->subordinatedocumentids_);
    std::swap(customdocumentid_, other->customdocumentid_);
    std::swap(documentdate_, other->documentdate_);
    std::swap(documentnumber_, other->documentnumber_);
    std::swap(contractprice_, other->contractprice_);
    std::swap(contracttype_, other->contracttype_);
    std::swap(needreceipt_, other->needreceipt_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ContractAttachment::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ContractAttachment_descriptor_;
  metadata.reflection = ContractAttachment_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ServiceDetailsAttachment::kSignedContentFieldNumber;
const int ServiceDetailsAttachment::kFileNameFieldNumber;
const int ServiceDetailsAttachment::kCommentFieldNumber;
const int ServiceDetailsAttachment::kInitialDocumentIdsFieldNumber;
const int ServiceDetailsAttachment::kSubordinateDocumentIdsFieldNumber;
const int ServiceDetailsAttachment::kDocumentDateFieldNumber;
const int ServiceDetailsAttachment::kDocumentNumberFieldNumber;
const int ServiceDetailsAttachment::kCustomDocumentIdFieldNumber;
const int ServiceDetailsAttachment::kNeedReceiptFieldNumber;
#endif  // !_MSC_VER

ServiceDetailsAttachment::ServiceDetailsAttachment()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ServiceDetailsAttachment::InitAsDefaultInstance() {
  signedcontent_ = const_cast< ::Diadoc::Api::Proto::Events::SignedContent*>(&::Diadoc::Api::Proto::Events::SignedContent::default_instance());
}

ServiceDetailsAttachment::ServiceDetailsAttachment(const ServiceDetailsAttachment& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ServiceDetailsAttachment::SharedCtor() {
  _cached_size_ = 0;
  signedcontent_ = NULL;
  filename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  comment_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  documentdate_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  documentnumber_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  customdocumentid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  needreceipt_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ServiceDetailsAttachment::~ServiceDetailsAttachment() {
  SharedDtor();
}

void ServiceDetailsAttachment::SharedDtor() {
  if (filename_ != &::google::protobuf::internal::kEmptyString) {
    delete filename_;
  }
  if (comment_ != &::google::protobuf::internal::kEmptyString) {
    delete comment_;
  }
  if (documentdate_ != &::google::protobuf::internal::kEmptyString) {
    delete documentdate_;
  }
  if (documentnumber_ != &::google::protobuf::internal::kEmptyString) {
    delete documentnumber_;
  }
  if (customdocumentid_ != &::google::protobuf::internal::kEmptyString) {
    delete customdocumentid_;
  }
  if (this != default_instance_) {
    delete signedcontent_;
  }
}

void ServiceDetailsAttachment::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ServiceDetailsAttachment::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ServiceDetailsAttachment_descriptor_;
}

const ServiceDetailsAttachment& ServiceDetailsAttachment::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Events_2fDiadocMessage_2ePostApi_2eproto();
  return *default_instance_;
}

ServiceDetailsAttachment* ServiceDetailsAttachment::default_instance_ = NULL;

ServiceDetailsAttachment* ServiceDetailsAttachment::New() const {
  return new ServiceDetailsAttachment;
}

void ServiceDetailsAttachment::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_signedcontent()) {
      if (signedcontent_ != NULL) signedcontent_->::Diadoc::Api::Proto::Events::SignedContent::Clear();
    }
    if (has_filename()) {
      if (filename_ != &::google::protobuf::internal::kEmptyString) {
        filename_->clear();
      }
    }
    if (has_comment()) {
      if (comment_ != &::google::protobuf::internal::kEmptyString) {
        comment_->clear();
      }
    }
    if (has_documentdate()) {
      if (documentdate_ != &::google::protobuf::internal::kEmptyString) {
        documentdate_->clear();
      }
    }
    if (has_documentnumber()) {
      if (documentnumber_ != &::google::protobuf::internal::kEmptyString) {
        documentnumber_->clear();
      }
    }
    if (has_customdocumentid()) {
      if (customdocumentid_ != &::google::protobuf::internal::kEmptyString) {
        customdocumentid_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    needreceipt_ = false;
  }
  initialdocumentids_.Clear();
  subordinatedocumentids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ServiceDetailsAttachment::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Diadoc.Api.Proto.Events.SignedContent SignedContent = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_signedcontent()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_FileName;
        break;
      }

      // required string FileName = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_FileName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_filename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->filename().data(), this->filename().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_Comment;
        break;
      }

      // optional string Comment = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Comment:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_comment()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->comment().data(), this->comment().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_InitialDocumentIds;
        break;
      }

      // repeated .Diadoc.Api.Proto.DocumentId InitialDocumentIds = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_InitialDocumentIds:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_initialdocumentids()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_InitialDocumentIds;
        if (input->ExpectTag(50)) goto parse_SubordinateDocumentIds;
        break;
      }

      // repeated .Diadoc.Api.Proto.DocumentId SubordinateDocumentIds = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_SubordinateDocumentIds:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_subordinatedocumentids()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_SubordinateDocumentIds;
        if (input->ExpectTag(58)) goto parse_DocumentDate;
        break;
      }

      // optional string DocumentDate = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_DocumentDate:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_documentdate()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->documentdate().data(), this->documentdate().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_DocumentNumber;
        break;
      }

      // optional string DocumentNumber = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_DocumentNumber:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_documentnumber()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->documentnumber().data(), this->documentnumber().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_CustomDocumentId;
        break;
      }

      // optional string CustomDocumentId = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_CustomDocumentId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_customdocumentid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->customdocumentid().data(), this->customdocumentid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_NeedReceipt;
        break;
      }

      // optional bool NeedReceipt = 10 [default = false];
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_NeedReceipt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &needreceipt_)));
          set_has_needreceipt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ServiceDetailsAttachment::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .Diadoc.Api.Proto.Events.SignedContent SignedContent = 1;
  if (has_signedcontent()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->signedcontent(), output);
  }

  // required string FileName = 2;
  if (has_filename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->filename().data(), this->filename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->filename(), output);
  }

  // optional string Comment = 3;
  if (has_comment()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->comment().data(), this->comment().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->comment(), output);
  }

  // repeated .Diadoc.Api.Proto.DocumentId InitialDocumentIds = 5;
  for (int i = 0; i < this->initialdocumentids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->initialdocumentids(i), output);
  }

  // repeated .Diadoc.Api.Proto.DocumentId SubordinateDocumentIds = 6;
  for (int i = 0; i < this->subordinatedocumentids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->subordinatedocumentids(i), output);
  }

  // optional string DocumentDate = 7;
  if (has_documentdate()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->documentdate().data(), this->documentdate().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->documentdate(), output);
  }

  // optional string DocumentNumber = 8;
  if (has_documentnumber()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->documentnumber().data(), this->documentnumber().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->documentnumber(), output);
  }

  // optional string CustomDocumentId = 9;
  if (has_customdocumentid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->customdocumentid().data(), this->customdocumentid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->customdocumentid(), output);
  }

  // optional bool NeedReceipt = 10 [default = false];
  if (has_needreceipt()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->needreceipt(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ServiceDetailsAttachment::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .Diadoc.Api.Proto.Events.SignedContent SignedContent = 1;
  if (has_signedcontent()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->signedcontent(), target);
  }

  // required string FileName = 2;
  if (has_filename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->filename().data(), this->filename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->filename(), target);
  }

  // optional string Comment = 3;
  if (has_comment()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->comment().data(), this->comment().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->comment(), target);
  }

  // repeated .Diadoc.Api.Proto.DocumentId InitialDocumentIds = 5;
  for (int i = 0; i < this->initialdocumentids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->initialdocumentids(i), target);
  }

  // repeated .Diadoc.Api.Proto.DocumentId SubordinateDocumentIds = 6;
  for (int i = 0; i < this->subordinatedocumentids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->subordinatedocumentids(i), target);
  }

  // optional string DocumentDate = 7;
  if (has_documentdate()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->documentdate().data(), this->documentdate().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->documentdate(), target);
  }

  // optional string DocumentNumber = 8;
  if (has_documentnumber()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->documentnumber().data(), this->documentnumber().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->documentnumber(), target);
  }

  // optional string CustomDocumentId = 9;
  if (has_customdocumentid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->customdocumentid().data(), this->customdocumentid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->customdocumentid(), target);
  }

  // optional bool NeedReceipt = 10 [default = false];
  if (has_needreceipt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->needreceipt(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ServiceDetailsAttachment::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .Diadoc.Api.Proto.Events.SignedContent SignedContent = 1;
    if (has_signedcontent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->signedcontent());
    }

    // required string FileName = 2;
    if (has_filename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->filename());
    }

    // optional string Comment = 3;
    if (has_comment()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->comment());
    }

    // optional string DocumentDate = 7;
    if (has_documentdate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->documentdate());
    }

    // optional string DocumentNumber = 8;
    if (has_documentnumber()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->documentnumber());
    }

    // optional string CustomDocumentId = 9;
    if (has_customdocumentid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->customdocumentid());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional bool NeedReceipt = 10 [default = false];
    if (has_needreceipt()) {
      total_size += 1 + 1;
    }

  }
  // repeated .Diadoc.Api.Proto.DocumentId InitialDocumentIds = 5;
  total_size += 1 * this->initialdocumentids_size();
  for (int i = 0; i < this->initialdocumentids_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->initialdocumentids(i));
  }

  // repeated .Diadoc.Api.Proto.DocumentId SubordinateDocumentIds = 6;
  total_size += 1 * this->subordinatedocumentids_size();
  for (int i = 0; i < this->subordinatedocumentids_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->subordinatedocumentids(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ServiceDetailsAttachment::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ServiceDetailsAttachment* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ServiceDetailsAttachment*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ServiceDetailsAttachment::MergeFrom(const ServiceDetailsAttachment& from) {
  GOOGLE_CHECK_NE(&from, this);
  initialdocumentids_.MergeFrom(from.initialdocumentids_);
  subordinatedocumentids_.MergeFrom(from.subordinatedocumentids_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_signedcontent()) {
      mutable_signedcontent()->::Diadoc::Api::Proto::Events::SignedContent::MergeFrom(from.signedcontent());
    }
    if (from.has_filename()) {
      set_filename(from.filename());
    }
    if (from.has_comment()) {
      set_comment(from.comment());
    }
    if (from.has_documentdate()) {
      set_documentdate(from.documentdate());
    }
    if (from.has_documentnumber()) {
      set_documentnumber(from.documentnumber());
    }
    if (from.has_customdocumentid()) {
      set_customdocumentid(from.customdocumentid());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_needreceipt()) {
      set_needreceipt(from.needreceipt());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ServiceDetailsAttachment::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServiceDetailsAttachment::CopyFrom(const ServiceDetailsAttachment& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServiceDetailsAttachment::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  for (int i = 0; i < initialdocumentids_size(); i++) {
    if (!this->initialdocumentids(i).IsInitialized()) return false;
  }
  for (int i = 0; i < subordinatedocumentids_size(); i++) {
    if (!this->subordinatedocumentids(i).IsInitialized()) return false;
  }
  return true;
}

void ServiceDetailsAttachment::Swap(ServiceDetailsAttachment* other) {
  if (other != this) {
    std::swap(signedcontent_, other->signedcontent_);
    std::swap(filename_, other->filename_);
    std::swap(comment_, other->comment_);
    initialdocumentids_.Swap(&other->initialdocumentids_);
    subordinatedocumentids_.Swap(&other->subordinatedocumentids_);
    std::swap(documentdate_, other->documentdate_);
    std::swap(documentnumber_, other->documentnumber_);
    std::swap(customdocumentid_, other->customdocumentid_);
    std::swap(needreceipt_, other->needreceipt_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ServiceDetailsAttachment::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ServiceDetailsAttachment_descriptor_;
  metadata.reflection = ServiceDetailsAttachment_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MessagePatchToPost::kBoxIdFieldNumber;
const int MessagePatchToPost::kMessageIdFieldNumber;
const int MessagePatchToPost::kReceiptsFieldNumber;
const int MessagePatchToPost::kCorrectionRequestsFieldNumber;
const int MessagePatchToPost::kRequestedSignaturesFieldNumber;
const int MessagePatchToPost::kRequestedSignatureRejectionsFieldNumber;
const int MessagePatchToPost::kXmlTorg12BuyerTitlesFieldNumber;
const int MessagePatchToPost::kXmlAcceptanceCertificateBuyerTitlesFieldNumber;
const int MessagePatchToPost::kResolutionsFieldNumber;
const int MessagePatchToPost::kResolutionRequestsFieldNumber;
const int MessagePatchToPost::kResolutionRequestCancellationsFieldNumber;
const int MessagePatchToPost::kResolutionRequestDenialsFieldNumber;
const int MessagePatchToPost::kResolutionRequestDenialCancellationsFieldNumber;
const int MessagePatchToPost::kRevocationRequestsFieldNumber;
const int MessagePatchToPost::kXmlSignatureRejectionsFieldNumber;
#endif  // !_MSC_VER

MessagePatchToPost::MessagePatchToPost()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MessagePatchToPost::InitAsDefaultInstance() {
}

MessagePatchToPost::MessagePatchToPost(const MessagePatchToPost& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MessagePatchToPost::SharedCtor() {
  _cached_size_ = 0;
  boxid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  messageid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MessagePatchToPost::~MessagePatchToPost() {
  SharedDtor();
}

void MessagePatchToPost::SharedDtor() {
  if (boxid_ != &::google::protobuf::internal::kEmptyString) {
    delete boxid_;
  }
  if (messageid_ != &::google::protobuf::internal::kEmptyString) {
    delete messageid_;
  }
  if (this != default_instance_) {
  }
}

void MessagePatchToPost::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MessagePatchToPost::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MessagePatchToPost_descriptor_;
}

const MessagePatchToPost& MessagePatchToPost::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Events_2fDiadocMessage_2ePostApi_2eproto();
  return *default_instance_;
}

MessagePatchToPost* MessagePatchToPost::default_instance_ = NULL;

MessagePatchToPost* MessagePatchToPost::New() const {
  return new MessagePatchToPost;
}

void MessagePatchToPost::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_boxid()) {
      if (boxid_ != &::google::protobuf::internal::kEmptyString) {
        boxid_->clear();
      }
    }
    if (has_messageid()) {
      if (messageid_ != &::google::protobuf::internal::kEmptyString) {
        messageid_->clear();
      }
    }
  }
  receipts_.Clear();
  correctionrequests_.Clear();
  requestedsignatures_.Clear();
  requestedsignaturerejections_.Clear();
  xmltorg12buyertitles_.Clear();
  xmlacceptancecertificatebuyertitles_.Clear();
  resolutions_.Clear();
  resolutionrequests_.Clear();
  resolutionrequestcancellations_.Clear();
  resolutionrequestdenials_.Clear();
  resolutionrequestdenialcancellations_.Clear();
  revocationrequests_.Clear();
  xmlsignaturerejections_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MessagePatchToPost::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string BoxId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_boxid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->boxid().data(), this->boxid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_MessageId;
        break;
      }

      // required string MessageId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_MessageId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_messageid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->messageid().data(), this->messageid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_Receipts;
        break;
      }

      // repeated .Diadoc.Api.Proto.Events.ReceiptAttachment Receipts = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Receipts:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_receipts()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_Receipts;
        if (input->ExpectTag(34)) goto parse_CorrectionRequests;
        break;
      }

      // repeated .Diadoc.Api.Proto.Events.CorrectionRequestAttachment CorrectionRequests = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_CorrectionRequests:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_correctionrequests()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_CorrectionRequests;
        if (input->ExpectTag(42)) goto parse_RequestedSignatures;
        break;
      }

      // repeated .Diadoc.Api.Proto.Events.DocumentSignature RequestedSignatures = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_RequestedSignatures:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_requestedsignatures()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_RequestedSignatures;
        if (input->ExpectTag(50)) goto parse_RequestedSignatureRejections;
        break;
      }

      // repeated .Diadoc.Api.Proto.Events.RequestedSignatureRejection RequestedSignatureRejections = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_RequestedSignatureRejections:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_requestedsignaturerejections()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_RequestedSignatureRejections;
        if (input->ExpectTag(58)) goto parse_XmlTorg12BuyerTitles;
        break;
      }

      // repeated .Diadoc.Api.Proto.Events.ReceiptAttachment XmlTorg12BuyerTitles = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_XmlTorg12BuyerTitles:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_xmltorg12buyertitles()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_XmlTorg12BuyerTitles;
        if (input->ExpectTag(66)) goto parse_XmlAcceptanceCertificateBuyerTitles;
        break;
      }

      // repeated .Diadoc.Api.Proto.Events.ReceiptAttachment XmlAcceptanceCertificateBuyerTitles = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_XmlAcceptanceCertificateBuyerTitles:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_xmlacceptancecertificatebuyertitles()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_XmlAcceptanceCertificateBuyerTitles;
        if (input->ExpectTag(74)) goto parse_Resolutions;
        break;
      }

      // repeated .Diadoc.Api.Proto.Events.ResolutionAttachment Resolutions = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Resolutions:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_resolutions()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_Resolutions;
        if (input->ExpectTag(82)) goto parse_ResolutionRequests;
        break;
      }

      // repeated .Diadoc.Api.Proto.Events.ResolutionRequestAttachment ResolutionRequests = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ResolutionRequests:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_resolutionrequests()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_ResolutionRequests;
        if (input->ExpectTag(90)) goto parse_ResolutionRequestCancellations;
        break;
      }

      // repeated .Diadoc.Api.Proto.Events.ResolutionRequestCancellationAttachment ResolutionRequestCancellations = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ResolutionRequestCancellations:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_resolutionrequestcancellations()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_ResolutionRequestCancellations;
        if (input->ExpectTag(98)) goto parse_ResolutionRequestDenials;
        break;
      }

      // repeated .Diadoc.Api.Proto.Events.ResolutionRequestDenialAttachment ResolutionRequestDenials = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ResolutionRequestDenials:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_resolutionrequestdenials()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_ResolutionRequestDenials;
        if (input->ExpectTag(106)) goto parse_ResolutionRequestDenialCancellations;
        break;
      }

      // repeated .Diadoc.Api.Proto.Events.ResolutionRequestDenialCancellationAttachment ResolutionRequestDenialCancellations = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ResolutionRequestDenialCancellations:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_resolutionrequestdenialcancellations()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_ResolutionRequestDenialCancellations;
        if (input->ExpectTag(114)) goto parse_RevocationRequests;
        break;
      }

      // repeated .Diadoc.Api.Proto.Events.RevocationRequestAttachment RevocationRequests = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_RevocationRequests:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_revocationrequests()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_RevocationRequests;
        if (input->ExpectTag(122)) goto parse_XmlSignatureRejections;
        break;
      }

      // repeated .Diadoc.Api.Proto.Events.XmlSignatureRejectionAttachment XmlSignatureRejections = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_XmlSignatureRejections:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_xmlsignaturerejections()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_XmlSignatureRejections;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MessagePatchToPost::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string BoxId = 1;
  if (has_boxid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->boxid().data(), this->boxid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->boxid(), output);
  }

  // required string MessageId = 2;
  if (has_messageid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->messageid().data(), this->messageid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->messageid(), output);
  }

  // repeated .Diadoc.Api.Proto.Events.ReceiptAttachment Receipts = 3;
  for (int i = 0; i < this->receipts_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->receipts(i), output);
  }

  // repeated .Diadoc.Api.Proto.Events.CorrectionRequestAttachment CorrectionRequests = 4;
  for (int i = 0; i < this->correctionrequests_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->correctionrequests(i), output);
  }

  // repeated .Diadoc.Api.Proto.Events.DocumentSignature RequestedSignatures = 5;
  for (int i = 0; i < this->requestedsignatures_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->requestedsignatures(i), output);
  }

  // repeated .Diadoc.Api.Proto.Events.RequestedSignatureRejection RequestedSignatureRejections = 6;
  for (int i = 0; i < this->requestedsignaturerejections_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->requestedsignaturerejections(i), output);
  }

  // repeated .Diadoc.Api.Proto.Events.ReceiptAttachment XmlTorg12BuyerTitles = 7;
  for (int i = 0; i < this->xmltorg12buyertitles_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->xmltorg12buyertitles(i), output);
  }

  // repeated .Diadoc.Api.Proto.Events.ReceiptAttachment XmlAcceptanceCertificateBuyerTitles = 8;
  for (int i = 0; i < this->xmlacceptancecertificatebuyertitles_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->xmlacceptancecertificatebuyertitles(i), output);
  }

  // repeated .Diadoc.Api.Proto.Events.ResolutionAttachment Resolutions = 9;
  for (int i = 0; i < this->resolutions_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->resolutions(i), output);
  }

  // repeated .Diadoc.Api.Proto.Events.ResolutionRequestAttachment ResolutionRequests = 10;
  for (int i = 0; i < this->resolutionrequests_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->resolutionrequests(i), output);
  }

  // repeated .Diadoc.Api.Proto.Events.ResolutionRequestCancellationAttachment ResolutionRequestCancellations = 11;
  for (int i = 0; i < this->resolutionrequestcancellations_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->resolutionrequestcancellations(i), output);
  }

  // repeated .Diadoc.Api.Proto.Events.ResolutionRequestDenialAttachment ResolutionRequestDenials = 12;
  for (int i = 0; i < this->resolutionrequestdenials_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->resolutionrequestdenials(i), output);
  }

  // repeated .Diadoc.Api.Proto.Events.ResolutionRequestDenialCancellationAttachment ResolutionRequestDenialCancellations = 13;
  for (int i = 0; i < this->resolutionrequestdenialcancellations_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->resolutionrequestdenialcancellations(i), output);
  }

  // repeated .Diadoc.Api.Proto.Events.RevocationRequestAttachment RevocationRequests = 14;
  for (int i = 0; i < this->revocationrequests_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, this->revocationrequests(i), output);
  }

  // repeated .Diadoc.Api.Proto.Events.XmlSignatureRejectionAttachment XmlSignatureRejections = 15;
  for (int i = 0; i < this->xmlsignaturerejections_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, this->xmlsignaturerejections(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MessagePatchToPost::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string BoxId = 1;
  if (has_boxid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->boxid().data(), this->boxid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->boxid(), target);
  }

  // required string MessageId = 2;
  if (has_messageid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->messageid().data(), this->messageid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->messageid(), target);
  }

  // repeated .Diadoc.Api.Proto.Events.ReceiptAttachment Receipts = 3;
  for (int i = 0; i < this->receipts_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->receipts(i), target);
  }

  // repeated .Diadoc.Api.Proto.Events.CorrectionRequestAttachment CorrectionRequests = 4;
  for (int i = 0; i < this->correctionrequests_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->correctionrequests(i), target);
  }

  // repeated .Diadoc.Api.Proto.Events.DocumentSignature RequestedSignatures = 5;
  for (int i = 0; i < this->requestedsignatures_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->requestedsignatures(i), target);
  }

  // repeated .Diadoc.Api.Proto.Events.RequestedSignatureRejection RequestedSignatureRejections = 6;
  for (int i = 0; i < this->requestedsignaturerejections_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->requestedsignaturerejections(i), target);
  }

  // repeated .Diadoc.Api.Proto.Events.ReceiptAttachment XmlTorg12BuyerTitles = 7;
  for (int i = 0; i < this->xmltorg12buyertitles_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->xmltorg12buyertitles(i), target);
  }

  // repeated .Diadoc.Api.Proto.Events.ReceiptAttachment XmlAcceptanceCertificateBuyerTitles = 8;
  for (int i = 0; i < this->xmlacceptancecertificatebuyertitles_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->xmlacceptancecertificatebuyertitles(i), target);
  }

  // repeated .Diadoc.Api.Proto.Events.ResolutionAttachment Resolutions = 9;
  for (int i = 0; i < this->resolutions_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->resolutions(i), target);
  }

  // repeated .Diadoc.Api.Proto.Events.ResolutionRequestAttachment ResolutionRequests = 10;
  for (int i = 0; i < this->resolutionrequests_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->resolutionrequests(i), target);
  }

  // repeated .Diadoc.Api.Proto.Events.ResolutionRequestCancellationAttachment ResolutionRequestCancellations = 11;
  for (int i = 0; i < this->resolutionrequestcancellations_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->resolutionrequestcancellations(i), target);
  }

  // repeated .Diadoc.Api.Proto.Events.ResolutionRequestDenialAttachment ResolutionRequestDenials = 12;
  for (int i = 0; i < this->resolutionrequestdenials_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->resolutionrequestdenials(i), target);
  }

  // repeated .Diadoc.Api.Proto.Events.ResolutionRequestDenialCancellationAttachment ResolutionRequestDenialCancellations = 13;
  for (int i = 0; i < this->resolutionrequestdenialcancellations_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, this->resolutionrequestdenialcancellations(i), target);
  }

  // repeated .Diadoc.Api.Proto.Events.RevocationRequestAttachment RevocationRequests = 14;
  for (int i = 0; i < this->revocationrequests_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        14, this->revocationrequests(i), target);
  }

  // repeated .Diadoc.Api.Proto.Events.XmlSignatureRejectionAttachment XmlSignatureRejections = 15;
  for (int i = 0; i < this->xmlsignaturerejections_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        15, this->xmlsignaturerejections(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MessagePatchToPost::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string BoxId = 1;
    if (has_boxid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->boxid());
    }

    // required string MessageId = 2;
    if (has_messageid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->messageid());
    }

  }
  // repeated .Diadoc.Api.Proto.Events.ReceiptAttachment Receipts = 3;
  total_size += 1 * this->receipts_size();
  for (int i = 0; i < this->receipts_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->receipts(i));
  }

  // repeated .Diadoc.Api.Proto.Events.CorrectionRequestAttachment CorrectionRequests = 4;
  total_size += 1 * this->correctionrequests_size();
  for (int i = 0; i < this->correctionrequests_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->correctionrequests(i));
  }

  // repeated .Diadoc.Api.Proto.Events.DocumentSignature RequestedSignatures = 5;
  total_size += 1 * this->requestedsignatures_size();
  for (int i = 0; i < this->requestedsignatures_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->requestedsignatures(i));
  }

  // repeated .Diadoc.Api.Proto.Events.RequestedSignatureRejection RequestedSignatureRejections = 6;
  total_size += 1 * this->requestedsignaturerejections_size();
  for (int i = 0; i < this->requestedsignaturerejections_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->requestedsignaturerejections(i));
  }

  // repeated .Diadoc.Api.Proto.Events.ReceiptAttachment XmlTorg12BuyerTitles = 7;
  total_size += 1 * this->xmltorg12buyertitles_size();
  for (int i = 0; i < this->xmltorg12buyertitles_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->xmltorg12buyertitles(i));
  }

  // repeated .Diadoc.Api.Proto.Events.ReceiptAttachment XmlAcceptanceCertificateBuyerTitles = 8;
  total_size += 1 * this->xmlacceptancecertificatebuyertitles_size();
  for (int i = 0; i < this->xmlacceptancecertificatebuyertitles_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->xmlacceptancecertificatebuyertitles(i));
  }

  // repeated .Diadoc.Api.Proto.Events.ResolutionAttachment Resolutions = 9;
  total_size += 1 * this->resolutions_size();
  for (int i = 0; i < this->resolutions_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->resolutions(i));
  }

  // repeated .Diadoc.Api.Proto.Events.ResolutionRequestAttachment ResolutionRequests = 10;
  total_size += 1 * this->resolutionrequests_size();
  for (int i = 0; i < this->resolutionrequests_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->resolutionrequests(i));
  }

  // repeated .Diadoc.Api.Proto.Events.ResolutionRequestCancellationAttachment ResolutionRequestCancellations = 11;
  total_size += 1 * this->resolutionrequestcancellations_size();
  for (int i = 0; i < this->resolutionrequestcancellations_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->resolutionrequestcancellations(i));
  }

  // repeated .Diadoc.Api.Proto.Events.ResolutionRequestDenialAttachment ResolutionRequestDenials = 12;
  total_size += 1 * this->resolutionrequestdenials_size();
  for (int i = 0; i < this->resolutionrequestdenials_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->resolutionrequestdenials(i));
  }

  // repeated .Diadoc.Api.Proto.Events.ResolutionRequestDenialCancellationAttachment ResolutionRequestDenialCancellations = 13;
  total_size += 1 * this->resolutionrequestdenialcancellations_size();
  for (int i = 0; i < this->resolutionrequestdenialcancellations_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->resolutionrequestdenialcancellations(i));
  }

  // repeated .Diadoc.Api.Proto.Events.RevocationRequestAttachment RevocationRequests = 14;
  total_size += 1 * this->revocationrequests_size();
  for (int i = 0; i < this->revocationrequests_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->revocationrequests(i));
  }

  // repeated .Diadoc.Api.Proto.Events.XmlSignatureRejectionAttachment XmlSignatureRejections = 15;
  total_size += 1 * this->xmlsignaturerejections_size();
  for (int i = 0; i < this->xmlsignaturerejections_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->xmlsignaturerejections(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MessagePatchToPost::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MessagePatchToPost* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MessagePatchToPost*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MessagePatchToPost::MergeFrom(const MessagePatchToPost& from) {
  GOOGLE_CHECK_NE(&from, this);
  receipts_.MergeFrom(from.receipts_);
  correctionrequests_.MergeFrom(from.correctionrequests_);
  requestedsignatures_.MergeFrom(from.requestedsignatures_);
  requestedsignaturerejections_.MergeFrom(from.requestedsignaturerejections_);
  xmltorg12buyertitles_.MergeFrom(from.xmltorg12buyertitles_);
  xmlacceptancecertificatebuyertitles_.MergeFrom(from.xmlacceptancecertificatebuyertitles_);
  resolutions_.MergeFrom(from.resolutions_);
  resolutionrequests_.MergeFrom(from.resolutionrequests_);
  resolutionrequestcancellations_.MergeFrom(from.resolutionrequestcancellations_);
  resolutionrequestdenials_.MergeFrom(from.resolutionrequestdenials_);
  resolutionrequestdenialcancellations_.MergeFrom(from.resolutionrequestdenialcancellations_);
  revocationrequests_.MergeFrom(from.revocationrequests_);
  xmlsignaturerejections_.MergeFrom(from.xmlsignaturerejections_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_boxid()) {
      set_boxid(from.boxid());
    }
    if (from.has_messageid()) {
      set_messageid(from.messageid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MessagePatchToPost::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MessagePatchToPost::CopyFrom(const MessagePatchToPost& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MessagePatchToPost::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  for (int i = 0; i < receipts_size(); i++) {
    if (!this->receipts(i).IsInitialized()) return false;
  }
  for (int i = 0; i < correctionrequests_size(); i++) {
    if (!this->correctionrequests(i).IsInitialized()) return false;
  }
  for (int i = 0; i < requestedsignatures_size(); i++) {
    if (!this->requestedsignatures(i).IsInitialized()) return false;
  }
  for (int i = 0; i < requestedsignaturerejections_size(); i++) {
    if (!this->requestedsignaturerejections(i).IsInitialized()) return false;
  }
  for (int i = 0; i < xmltorg12buyertitles_size(); i++) {
    if (!this->xmltorg12buyertitles(i).IsInitialized()) return false;
  }
  for (int i = 0; i < xmlacceptancecertificatebuyertitles_size(); i++) {
    if (!this->xmlacceptancecertificatebuyertitles(i).IsInitialized()) return false;
  }
  for (int i = 0; i < resolutions_size(); i++) {
    if (!this->resolutions(i).IsInitialized()) return false;
  }
  for (int i = 0; i < resolutionrequests_size(); i++) {
    if (!this->resolutionrequests(i).IsInitialized()) return false;
  }
  for (int i = 0; i < resolutionrequestcancellations_size(); i++) {
    if (!this->resolutionrequestcancellations(i).IsInitialized()) return false;
  }
  for (int i = 0; i < resolutionrequestdenials_size(); i++) {
    if (!this->resolutionrequestdenials(i).IsInitialized()) return false;
  }
  for (int i = 0; i < resolutionrequestdenialcancellations_size(); i++) {
    if (!this->resolutionrequestdenialcancellations(i).IsInitialized()) return false;
  }
  for (int i = 0; i < revocationrequests_size(); i++) {
    if (!this->revocationrequests(i).IsInitialized()) return false;
  }
  for (int i = 0; i < xmlsignaturerejections_size(); i++) {
    if (!this->xmlsignaturerejections(i).IsInitialized()) return false;
  }
  return true;
}

void MessagePatchToPost::Swap(MessagePatchToPost* other) {
  if (other != this) {
    std::swap(boxid_, other->boxid_);
    std::swap(messageid_, other->messageid_);
    receipts_.Swap(&other->receipts_);
    correctionrequests_.Swap(&other->correctionrequests_);
    requestedsignatures_.Swap(&other->requestedsignatures_);
    requestedsignaturerejections_.Swap(&other->requestedsignaturerejections_);
    xmltorg12buyertitles_.Swap(&other->xmltorg12buyertitles_);
    xmlacceptancecertificatebuyertitles_.Swap(&other->xmlacceptancecertificatebuyertitles_);
    resolutions_.Swap(&other->resolutions_);
    resolutionrequests_.Swap(&other->resolutionrequests_);
    resolutionrequestcancellations_.Swap(&other->resolutionrequestcancellations_);
    resolutionrequestdenials_.Swap(&other->resolutionrequestdenials_);
    resolutionrequestdenialcancellations_.Swap(&other->resolutionrequestdenialcancellations_);
    revocationrequests_.Swap(&other->revocationrequests_);
    xmlsignaturerejections_.Swap(&other->xmlsignaturerejections_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MessagePatchToPost::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MessagePatchToPost_descriptor_;
  metadata.reflection = MessagePatchToPost_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ResolutionRequestAttachment::kInitialDocumentIdFieldNumber;
const int ResolutionRequestAttachment::kTypeFieldNumber;
const int ResolutionRequestAttachment::kTargetUserIdFieldNumber;
const int ResolutionRequestAttachment::kTargetDepartmentIdFieldNumber;
const int ResolutionRequestAttachment::kCommentFieldNumber;
#endif  // !_MSC_VER

ResolutionRequestAttachment::ResolutionRequestAttachment()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ResolutionRequestAttachment::InitAsDefaultInstance() {
}

ResolutionRequestAttachment::ResolutionRequestAttachment(const ResolutionRequestAttachment& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ResolutionRequestAttachment::SharedCtor() {
  _cached_size_ = 0;
  initialdocumentid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  type_ = 0;
  targetuserid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  targetdepartmentid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  comment_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ResolutionRequestAttachment::~ResolutionRequestAttachment() {
  SharedDtor();
}

void ResolutionRequestAttachment::SharedDtor() {
  if (initialdocumentid_ != &::google::protobuf::internal::kEmptyString) {
    delete initialdocumentid_;
  }
  if (targetuserid_ != &::google::protobuf::internal::kEmptyString) {
    delete targetuserid_;
  }
  if (targetdepartmentid_ != &::google::protobuf::internal::kEmptyString) {
    delete targetdepartmentid_;
  }
  if (comment_ != &::google::protobuf::internal::kEmptyString) {
    delete comment_;
  }
  if (this != default_instance_) {
  }
}

void ResolutionRequestAttachment::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResolutionRequestAttachment::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResolutionRequestAttachment_descriptor_;
}

const ResolutionRequestAttachment& ResolutionRequestAttachment::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Events_2fDiadocMessage_2ePostApi_2eproto();
  return *default_instance_;
}

ResolutionRequestAttachment* ResolutionRequestAttachment::default_instance_ = NULL;

ResolutionRequestAttachment* ResolutionRequestAttachment::New() const {
  return new ResolutionRequestAttachment;
}

void ResolutionRequestAttachment::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_initialdocumentid()) {
      if (initialdocumentid_ != &::google::protobuf::internal::kEmptyString) {
        initialdocumentid_->clear();
      }
    }
    type_ = 0;
    if (has_targetuserid()) {
      if (targetuserid_ != &::google::protobuf::internal::kEmptyString) {
        targetuserid_->clear();
      }
    }
    if (has_targetdepartmentid()) {
      if (targetdepartmentid_ != &::google::protobuf::internal::kEmptyString) {
        targetdepartmentid_->clear();
      }
    }
    if (has_comment()) {
      if (comment_ != &::google::protobuf::internal::kEmptyString) {
        comment_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ResolutionRequestAttachment::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string InitialDocumentId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_initialdocumentid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->initialdocumentid().data(), this->initialdocumentid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_Type;
        break;
      }

      // required .Diadoc.Api.Proto.Events.ResolutionRequestType Type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Diadoc::Api::Proto::Events::ResolutionRequestType_IsValid(value)) {
            set_type(static_cast< ::Diadoc::Api::Proto::Events::ResolutionRequestType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_TargetUserId;
        break;
      }

      // optional string TargetUserId = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_TargetUserId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_targetuserid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->targetuserid().data(), this->targetuserid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_TargetDepartmentId;
        break;
      }

      // optional string TargetDepartmentId = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_TargetDepartmentId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_targetdepartmentid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->targetdepartmentid().data(), this->targetdepartmentid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_Comment;
        break;
      }

      // optional string Comment = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Comment:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_comment()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->comment().data(), this->comment().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ResolutionRequestAttachment::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string InitialDocumentId = 1;
  if (has_initialdocumentid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->initialdocumentid().data(), this->initialdocumentid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->initialdocumentid(), output);
  }

  // required .Diadoc.Api.Proto.Events.ResolutionRequestType Type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  // optional string TargetUserId = 3;
  if (has_targetuserid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->targetuserid().data(), this->targetuserid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->targetuserid(), output);
  }

  // optional string TargetDepartmentId = 4;
  if (has_targetdepartmentid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->targetdepartmentid().data(), this->targetdepartmentid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->targetdepartmentid(), output);
  }

  // optional string Comment = 5;
  if (has_comment()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->comment().data(), this->comment().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->comment(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ResolutionRequestAttachment::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string InitialDocumentId = 1;
  if (has_initialdocumentid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->initialdocumentid().data(), this->initialdocumentid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->initialdocumentid(), target);
  }

  // required .Diadoc.Api.Proto.Events.ResolutionRequestType Type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }

  // optional string TargetUserId = 3;
  if (has_targetuserid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->targetuserid().data(), this->targetuserid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->targetuserid(), target);
  }

  // optional string TargetDepartmentId = 4;
  if (has_targetdepartmentid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->targetdepartmentid().data(), this->targetdepartmentid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->targetdepartmentid(), target);
  }

  // optional string Comment = 5;
  if (has_comment()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->comment().data(), this->comment().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->comment(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ResolutionRequestAttachment::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string InitialDocumentId = 1;
    if (has_initialdocumentid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->initialdocumentid());
    }

    // required .Diadoc.Api.Proto.Events.ResolutionRequestType Type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional string TargetUserId = 3;
    if (has_targetuserid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->targetuserid());
    }

    // optional string TargetDepartmentId = 4;
    if (has_targetdepartmentid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->targetdepartmentid());
    }

    // optional string Comment = 5;
    if (has_comment()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->comment());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResolutionRequestAttachment::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ResolutionRequestAttachment* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ResolutionRequestAttachment*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ResolutionRequestAttachment::MergeFrom(const ResolutionRequestAttachment& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_initialdocumentid()) {
      set_initialdocumentid(from.initialdocumentid());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_targetuserid()) {
      set_targetuserid(from.targetuserid());
    }
    if (from.has_targetdepartmentid()) {
      set_targetdepartmentid(from.targetdepartmentid());
    }
    if (from.has_comment()) {
      set_comment(from.comment());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ResolutionRequestAttachment::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResolutionRequestAttachment::CopyFrom(const ResolutionRequestAttachment& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResolutionRequestAttachment::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void ResolutionRequestAttachment::Swap(ResolutionRequestAttachment* other) {
  if (other != this) {
    std::swap(initialdocumentid_, other->initialdocumentid_);
    std::swap(type_, other->type_);
    std::swap(targetuserid_, other->targetuserid_);
    std::swap(targetdepartmentid_, other->targetdepartmentid_);
    std::swap(comment_, other->comment_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ResolutionRequestAttachment::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ResolutionRequestAttachment_descriptor_;
  metadata.reflection = ResolutionRequestAttachment_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ResolutionRequestCancellationAttachment::kInitialResolutionRequestIdFieldNumber;
#endif  // !_MSC_VER

ResolutionRequestCancellationAttachment::ResolutionRequestCancellationAttachment()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ResolutionRequestCancellationAttachment::InitAsDefaultInstance() {
}

ResolutionRequestCancellationAttachment::ResolutionRequestCancellationAttachment(const ResolutionRequestCancellationAttachment& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ResolutionRequestCancellationAttachment::SharedCtor() {
  _cached_size_ = 0;
  initialresolutionrequestid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ResolutionRequestCancellationAttachment::~ResolutionRequestCancellationAttachment() {
  SharedDtor();
}

void ResolutionRequestCancellationAttachment::SharedDtor() {
  if (initialresolutionrequestid_ != &::google::protobuf::internal::kEmptyString) {
    delete initialresolutionrequestid_;
  }
  if (this != default_instance_) {
  }
}

void ResolutionRequestCancellationAttachment::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResolutionRequestCancellationAttachment::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResolutionRequestCancellationAttachment_descriptor_;
}

const ResolutionRequestCancellationAttachment& ResolutionRequestCancellationAttachment::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Events_2fDiadocMessage_2ePostApi_2eproto();
  return *default_instance_;
}

ResolutionRequestCancellationAttachment* ResolutionRequestCancellationAttachment::default_instance_ = NULL;

ResolutionRequestCancellationAttachment* ResolutionRequestCancellationAttachment::New() const {
  return new ResolutionRequestCancellationAttachment;
}

void ResolutionRequestCancellationAttachment::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_initialresolutionrequestid()) {
      if (initialresolutionrequestid_ != &::google::protobuf::internal::kEmptyString) {
        initialresolutionrequestid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ResolutionRequestCancellationAttachment::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string InitialResolutionRequestId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_initialresolutionrequestid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->initialresolutionrequestid().data(), this->initialresolutionrequestid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ResolutionRequestCancellationAttachment::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string InitialResolutionRequestId = 1;
  if (has_initialresolutionrequestid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->initialresolutionrequestid().data(), this->initialresolutionrequestid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->initialresolutionrequestid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ResolutionRequestCancellationAttachment::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string InitialResolutionRequestId = 1;
  if (has_initialresolutionrequestid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->initialresolutionrequestid().data(), this->initialresolutionrequestid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->initialresolutionrequestid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ResolutionRequestCancellationAttachment::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string InitialResolutionRequestId = 1;
    if (has_initialresolutionrequestid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->initialresolutionrequestid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResolutionRequestCancellationAttachment::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ResolutionRequestCancellationAttachment* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ResolutionRequestCancellationAttachment*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ResolutionRequestCancellationAttachment::MergeFrom(const ResolutionRequestCancellationAttachment& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_initialresolutionrequestid()) {
      set_initialresolutionrequestid(from.initialresolutionrequestid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ResolutionRequestCancellationAttachment::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResolutionRequestCancellationAttachment::CopyFrom(const ResolutionRequestCancellationAttachment& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResolutionRequestCancellationAttachment::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ResolutionRequestCancellationAttachment::Swap(ResolutionRequestCancellationAttachment* other) {
  if (other != this) {
    std::swap(initialresolutionrequestid_, other->initialresolutionrequestid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ResolutionRequestCancellationAttachment::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ResolutionRequestCancellationAttachment_descriptor_;
  metadata.reflection = ResolutionRequestCancellationAttachment_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ResolutionRequestDenialCancellationAttachment::kInitialResolutionRequestDenialIdFieldNumber;
#endif  // !_MSC_VER

ResolutionRequestDenialCancellationAttachment::ResolutionRequestDenialCancellationAttachment()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ResolutionRequestDenialCancellationAttachment::InitAsDefaultInstance() {
}

ResolutionRequestDenialCancellationAttachment::ResolutionRequestDenialCancellationAttachment(const ResolutionRequestDenialCancellationAttachment& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ResolutionRequestDenialCancellationAttachment::SharedCtor() {
  _cached_size_ = 0;
  initialresolutionrequestdenialid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ResolutionRequestDenialCancellationAttachment::~ResolutionRequestDenialCancellationAttachment() {
  SharedDtor();
}

void ResolutionRequestDenialCancellationAttachment::SharedDtor() {
  if (initialresolutionrequestdenialid_ != &::google::protobuf::internal::kEmptyString) {
    delete initialresolutionrequestdenialid_;
  }
  if (this != default_instance_) {
  }
}

void ResolutionRequestDenialCancellationAttachment::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResolutionRequestDenialCancellationAttachment::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResolutionRequestDenialCancellationAttachment_descriptor_;
}

const ResolutionRequestDenialCancellationAttachment& ResolutionRequestDenialCancellationAttachment::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Events_2fDiadocMessage_2ePostApi_2eproto();
  return *default_instance_;
}

ResolutionRequestDenialCancellationAttachment* ResolutionRequestDenialCancellationAttachment::default_instance_ = NULL;

ResolutionRequestDenialCancellationAttachment* ResolutionRequestDenialCancellationAttachment::New() const {
  return new ResolutionRequestDenialCancellationAttachment;
}

void ResolutionRequestDenialCancellationAttachment::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_initialresolutionrequestdenialid()) {
      if (initialresolutionrequestdenialid_ != &::google::protobuf::internal::kEmptyString) {
        initialresolutionrequestdenialid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ResolutionRequestDenialCancellationAttachment::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string InitialResolutionRequestDenialId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_initialresolutionrequestdenialid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->initialresolutionrequestdenialid().data(), this->initialresolutionrequestdenialid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ResolutionRequestDenialCancellationAttachment::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string InitialResolutionRequestDenialId = 1;
  if (has_initialresolutionrequestdenialid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->initialresolutionrequestdenialid().data(), this->initialresolutionrequestdenialid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->initialresolutionrequestdenialid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ResolutionRequestDenialCancellationAttachment::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string InitialResolutionRequestDenialId = 1;
  if (has_initialresolutionrequestdenialid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->initialresolutionrequestdenialid().data(), this->initialresolutionrequestdenialid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->initialresolutionrequestdenialid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ResolutionRequestDenialCancellationAttachment::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string InitialResolutionRequestDenialId = 1;
    if (has_initialresolutionrequestdenialid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->initialresolutionrequestdenialid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResolutionRequestDenialCancellationAttachment::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ResolutionRequestDenialCancellationAttachment* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ResolutionRequestDenialCancellationAttachment*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ResolutionRequestDenialCancellationAttachment::MergeFrom(const ResolutionRequestDenialCancellationAttachment& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_initialresolutionrequestdenialid()) {
      set_initialresolutionrequestdenialid(from.initialresolutionrequestdenialid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ResolutionRequestDenialCancellationAttachment::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResolutionRequestDenialCancellationAttachment::CopyFrom(const ResolutionRequestDenialCancellationAttachment& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResolutionRequestDenialCancellationAttachment::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ResolutionRequestDenialCancellationAttachment::Swap(ResolutionRequestDenialCancellationAttachment* other) {
  if (other != this) {
    std::swap(initialresolutionrequestdenialid_, other->initialresolutionrequestdenialid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ResolutionRequestDenialCancellationAttachment::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ResolutionRequestDenialCancellationAttachment_descriptor_;
  metadata.reflection = ResolutionRequestDenialCancellationAttachment_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ResolutionRequestDenialAttachment::kInitialResolutionRequestIdFieldNumber;
const int ResolutionRequestDenialAttachment::kCommentFieldNumber;
#endif  // !_MSC_VER

ResolutionRequestDenialAttachment::ResolutionRequestDenialAttachment()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ResolutionRequestDenialAttachment::InitAsDefaultInstance() {
}

ResolutionRequestDenialAttachment::ResolutionRequestDenialAttachment(const ResolutionRequestDenialAttachment& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ResolutionRequestDenialAttachment::SharedCtor() {
  _cached_size_ = 0;
  initialresolutionrequestid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  comment_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ResolutionRequestDenialAttachment::~ResolutionRequestDenialAttachment() {
  SharedDtor();
}

void ResolutionRequestDenialAttachment::SharedDtor() {
  if (initialresolutionrequestid_ != &::google::protobuf::internal::kEmptyString) {
    delete initialresolutionrequestid_;
  }
  if (comment_ != &::google::protobuf::internal::kEmptyString) {
    delete comment_;
  }
  if (this != default_instance_) {
  }
}

void ResolutionRequestDenialAttachment::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResolutionRequestDenialAttachment::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResolutionRequestDenialAttachment_descriptor_;
}

const ResolutionRequestDenialAttachment& ResolutionRequestDenialAttachment::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Events_2fDiadocMessage_2ePostApi_2eproto();
  return *default_instance_;
}

ResolutionRequestDenialAttachment* ResolutionRequestDenialAttachment::default_instance_ = NULL;

ResolutionRequestDenialAttachment* ResolutionRequestDenialAttachment::New() const {
  return new ResolutionRequestDenialAttachment;
}

void ResolutionRequestDenialAttachment::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_initialresolutionrequestid()) {
      if (initialresolutionrequestid_ != &::google::protobuf::internal::kEmptyString) {
        initialresolutionrequestid_->clear();
      }
    }
    if (has_comment()) {
      if (comment_ != &::google::protobuf::internal::kEmptyString) {
        comment_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ResolutionRequestDenialAttachment::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string InitialResolutionRequestId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_initialresolutionrequestid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->initialresolutionrequestid().data(), this->initialresolutionrequestid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_Comment;
        break;
      }

      // optional string Comment = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Comment:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_comment()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->comment().data(), this->comment().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ResolutionRequestDenialAttachment::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string InitialResolutionRequestId = 1;
  if (has_initialresolutionrequestid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->initialresolutionrequestid().data(), this->initialresolutionrequestid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->initialresolutionrequestid(), output);
  }

  // optional string Comment = 2;
  if (has_comment()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->comment().data(), this->comment().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->comment(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ResolutionRequestDenialAttachment::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string InitialResolutionRequestId = 1;
  if (has_initialresolutionrequestid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->initialresolutionrequestid().data(), this->initialresolutionrequestid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->initialresolutionrequestid(), target);
  }

  // optional string Comment = 2;
  if (has_comment()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->comment().data(), this->comment().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->comment(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ResolutionRequestDenialAttachment::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string InitialResolutionRequestId = 1;
    if (has_initialresolutionrequestid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->initialresolutionrequestid());
    }

    // optional string Comment = 2;
    if (has_comment()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->comment());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResolutionRequestDenialAttachment::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ResolutionRequestDenialAttachment* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ResolutionRequestDenialAttachment*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ResolutionRequestDenialAttachment::MergeFrom(const ResolutionRequestDenialAttachment& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_initialresolutionrequestid()) {
      set_initialresolutionrequestid(from.initialresolutionrequestid());
    }
    if (from.has_comment()) {
      set_comment(from.comment());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ResolutionRequestDenialAttachment::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResolutionRequestDenialAttachment::CopyFrom(const ResolutionRequestDenialAttachment& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResolutionRequestDenialAttachment::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ResolutionRequestDenialAttachment::Swap(ResolutionRequestDenialAttachment* other) {
  if (other != this) {
    std::swap(initialresolutionrequestid_, other->initialresolutionrequestid_);
    std::swap(comment_, other->comment_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ResolutionRequestDenialAttachment::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ResolutionRequestDenialAttachment_descriptor_;
  metadata.reflection = ResolutionRequestDenialAttachment_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ResolutionAttachment::kInitialDocumentIdFieldNumber;
const int ResolutionAttachment::kResolutionTypeFieldNumber;
const int ResolutionAttachment::kCommentFieldNumber;
#endif  // !_MSC_VER

ResolutionAttachment::ResolutionAttachment()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ResolutionAttachment::InitAsDefaultInstance() {
}

ResolutionAttachment::ResolutionAttachment(const ResolutionAttachment& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ResolutionAttachment::SharedCtor() {
  _cached_size_ = 0;
  initialdocumentid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  resolutiontype_ = 0;
  comment_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ResolutionAttachment::~ResolutionAttachment() {
  SharedDtor();
}

void ResolutionAttachment::SharedDtor() {
  if (initialdocumentid_ != &::google::protobuf::internal::kEmptyString) {
    delete initialdocumentid_;
  }
  if (comment_ != &::google::protobuf::internal::kEmptyString) {
    delete comment_;
  }
  if (this != default_instance_) {
  }
}

void ResolutionAttachment::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResolutionAttachment::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResolutionAttachment_descriptor_;
}

const ResolutionAttachment& ResolutionAttachment::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Events_2fDiadocMessage_2ePostApi_2eproto();
  return *default_instance_;
}

ResolutionAttachment* ResolutionAttachment::default_instance_ = NULL;

ResolutionAttachment* ResolutionAttachment::New() const {
  return new ResolutionAttachment;
}

void ResolutionAttachment::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_initialdocumentid()) {
      if (initialdocumentid_ != &::google::protobuf::internal::kEmptyString) {
        initialdocumentid_->clear();
      }
    }
    resolutiontype_ = 0;
    if (has_comment()) {
      if (comment_ != &::google::protobuf::internal::kEmptyString) {
        comment_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ResolutionAttachment::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string InitialDocumentId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_initialdocumentid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->initialdocumentid().data(), this->initialdocumentid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ResolutionType;
        break;
      }

      // required .Diadoc.Api.Proto.Events.ResolutionType ResolutionType = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ResolutionType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Diadoc::Api::Proto::Events::ResolutionType_IsValid(value)) {
            set_resolutiontype(static_cast< ::Diadoc::Api::Proto::Events::ResolutionType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_Comment;
        break;
      }

      // optional string Comment = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Comment:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_comment()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->comment().data(), this->comment().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ResolutionAttachment::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string InitialDocumentId = 1;
  if (has_initialdocumentid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->initialdocumentid().data(), this->initialdocumentid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->initialdocumentid(), output);
  }

  // required .Diadoc.Api.Proto.Events.ResolutionType ResolutionType = 2;
  if (has_resolutiontype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->resolutiontype(), output);
  }

  // optional string Comment = 3;
  if (has_comment()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->comment().data(), this->comment().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->comment(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ResolutionAttachment::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string InitialDocumentId = 1;
  if (has_initialdocumentid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->initialdocumentid().data(), this->initialdocumentid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->initialdocumentid(), target);
  }

  // required .Diadoc.Api.Proto.Events.ResolutionType ResolutionType = 2;
  if (has_resolutiontype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->resolutiontype(), target);
  }

  // optional string Comment = 3;
  if (has_comment()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->comment().data(), this->comment().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->comment(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ResolutionAttachment::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string InitialDocumentId = 1;
    if (has_initialdocumentid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->initialdocumentid());
    }

    // required .Diadoc.Api.Proto.Events.ResolutionType ResolutionType = 2;
    if (has_resolutiontype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->resolutiontype());
    }

    // optional string Comment = 3;
    if (has_comment()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->comment());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResolutionAttachment::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ResolutionAttachment* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ResolutionAttachment*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ResolutionAttachment::MergeFrom(const ResolutionAttachment& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_initialdocumentid()) {
      set_initialdocumentid(from.initialdocumentid());
    }
    if (from.has_resolutiontype()) {
      set_resolutiontype(from.resolutiontype());
    }
    if (from.has_comment()) {
      set_comment(from.comment());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ResolutionAttachment::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResolutionAttachment::CopyFrom(const ResolutionAttachment& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResolutionAttachment::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void ResolutionAttachment::Swap(ResolutionAttachment* other) {
  if (other != this) {
    std::swap(initialdocumentid_, other->initialdocumentid_);
    std::swap(resolutiontype_, other->resolutiontype_);
    std::swap(comment_, other->comment_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ResolutionAttachment::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ResolutionAttachment_descriptor_;
  metadata.reflection = ResolutionAttachment_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReceiptAttachment::kParentEntityIdFieldNumber;
const int ReceiptAttachment::kSignedContentFieldNumber;
#endif  // !_MSC_VER

ReceiptAttachment::ReceiptAttachment()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReceiptAttachment::InitAsDefaultInstance() {
  signedcontent_ = const_cast< ::Diadoc::Api::Proto::Events::SignedContent*>(&::Diadoc::Api::Proto::Events::SignedContent::default_instance());
}

ReceiptAttachment::ReceiptAttachment(const ReceiptAttachment& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReceiptAttachment::SharedCtor() {
  _cached_size_ = 0;
  parententityid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  signedcontent_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReceiptAttachment::~ReceiptAttachment() {
  SharedDtor();
}

void ReceiptAttachment::SharedDtor() {
  if (parententityid_ != &::google::protobuf::internal::kEmptyString) {
    delete parententityid_;
  }
  if (this != default_instance_) {
    delete signedcontent_;
  }
}

void ReceiptAttachment::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReceiptAttachment::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReceiptAttachment_descriptor_;
}

const ReceiptAttachment& ReceiptAttachment::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Events_2fDiadocMessage_2ePostApi_2eproto();
  return *default_instance_;
}

ReceiptAttachment* ReceiptAttachment::default_instance_ = NULL;

ReceiptAttachment* ReceiptAttachment::New() const {
  return new ReceiptAttachment;
}

void ReceiptAttachment::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_parententityid()) {
      if (parententityid_ != &::google::protobuf::internal::kEmptyString) {
        parententityid_->clear();
      }
    }
    if (has_signedcontent()) {
      if (signedcontent_ != NULL) signedcontent_->::Diadoc::Api::Proto::Events::SignedContent::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReceiptAttachment::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string ParentEntityId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_parententityid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->parententityid().data(), this->parententityid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_SignedContent;
        break;
      }

      // required .Diadoc.Api.Proto.Events.SignedContent SignedContent = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_SignedContent:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_signedcontent()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReceiptAttachment::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string ParentEntityId = 1;
  if (has_parententityid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->parententityid().data(), this->parententityid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->parententityid(), output);
  }

  // required .Diadoc.Api.Proto.Events.SignedContent SignedContent = 2;
  if (has_signedcontent()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->signedcontent(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReceiptAttachment::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string ParentEntityId = 1;
  if (has_parententityid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->parententityid().data(), this->parententityid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->parententityid(), target);
  }

  // required .Diadoc.Api.Proto.Events.SignedContent SignedContent = 2;
  if (has_signedcontent()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->signedcontent(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReceiptAttachment::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string ParentEntityId = 1;
    if (has_parententityid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->parententityid());
    }

    // required .Diadoc.Api.Proto.Events.SignedContent SignedContent = 2;
    if (has_signedcontent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->signedcontent());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReceiptAttachment::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReceiptAttachment* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReceiptAttachment*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReceiptAttachment::MergeFrom(const ReceiptAttachment& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_parententityid()) {
      set_parententityid(from.parententityid());
    }
    if (from.has_signedcontent()) {
      mutable_signedcontent()->::Diadoc::Api::Proto::Events::SignedContent::MergeFrom(from.signedcontent());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReceiptAttachment::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReceiptAttachment::CopyFrom(const ReceiptAttachment& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReceiptAttachment::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void ReceiptAttachment::Swap(ReceiptAttachment* other) {
  if (other != this) {
    std::swap(parententityid_, other->parententityid_);
    std::swap(signedcontent_, other->signedcontent_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReceiptAttachment::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReceiptAttachment_descriptor_;
  metadata.reflection = ReceiptAttachment_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CorrectionRequestAttachment::kParentEntityIdFieldNumber;
const int CorrectionRequestAttachment::kSignedContentFieldNumber;
#endif  // !_MSC_VER

CorrectionRequestAttachment::CorrectionRequestAttachment()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CorrectionRequestAttachment::InitAsDefaultInstance() {
  signedcontent_ = const_cast< ::Diadoc::Api::Proto::Events::SignedContent*>(&::Diadoc::Api::Proto::Events::SignedContent::default_instance());
}

CorrectionRequestAttachment::CorrectionRequestAttachment(const CorrectionRequestAttachment& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CorrectionRequestAttachment::SharedCtor() {
  _cached_size_ = 0;
  parententityid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  signedcontent_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CorrectionRequestAttachment::~CorrectionRequestAttachment() {
  SharedDtor();
}

void CorrectionRequestAttachment::SharedDtor() {
  if (parententityid_ != &::google::protobuf::internal::kEmptyString) {
    delete parententityid_;
  }
  if (this != default_instance_) {
    delete signedcontent_;
  }
}

void CorrectionRequestAttachment::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CorrectionRequestAttachment::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CorrectionRequestAttachment_descriptor_;
}

const CorrectionRequestAttachment& CorrectionRequestAttachment::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Events_2fDiadocMessage_2ePostApi_2eproto();
  return *default_instance_;
}

CorrectionRequestAttachment* CorrectionRequestAttachment::default_instance_ = NULL;

CorrectionRequestAttachment* CorrectionRequestAttachment::New() const {
  return new CorrectionRequestAttachment;
}

void CorrectionRequestAttachment::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_parententityid()) {
      if (parententityid_ != &::google::protobuf::internal::kEmptyString) {
        parententityid_->clear();
      }
    }
    if (has_signedcontent()) {
      if (signedcontent_ != NULL) signedcontent_->::Diadoc::Api::Proto::Events::SignedContent::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CorrectionRequestAttachment::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string ParentEntityId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_parententityid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->parententityid().data(), this->parententityid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_SignedContent;
        break;
      }

      // required .Diadoc.Api.Proto.Events.SignedContent SignedContent = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_SignedContent:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_signedcontent()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CorrectionRequestAttachment::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string ParentEntityId = 1;
  if (has_parententityid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->parententityid().data(), this->parententityid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->parententityid(), output);
  }

  // required .Diadoc.Api.Proto.Events.SignedContent SignedContent = 2;
  if (has_signedcontent()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->signedcontent(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CorrectionRequestAttachment::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string ParentEntityId = 1;
  if (has_parententityid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->parententityid().data(), this->parententityid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->parententityid(), target);
  }

  // required .Diadoc.Api.Proto.Events.SignedContent SignedContent = 2;
  if (has_signedcontent()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->signedcontent(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CorrectionRequestAttachment::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string ParentEntityId = 1;
    if (has_parententityid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->parententityid());
    }

    // required .Diadoc.Api.Proto.Events.SignedContent SignedContent = 2;
    if (has_signedcontent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->signedcontent());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CorrectionRequestAttachment::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CorrectionRequestAttachment* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CorrectionRequestAttachment*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CorrectionRequestAttachment::MergeFrom(const CorrectionRequestAttachment& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_parententityid()) {
      set_parententityid(from.parententityid());
    }
    if (from.has_signedcontent()) {
      mutable_signedcontent()->::Diadoc::Api::Proto::Events::SignedContent::MergeFrom(from.signedcontent());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CorrectionRequestAttachment::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CorrectionRequestAttachment::CopyFrom(const CorrectionRequestAttachment& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CorrectionRequestAttachment::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void CorrectionRequestAttachment::Swap(CorrectionRequestAttachment* other) {
  if (other != this) {
    std::swap(parententityid_, other->parententityid_);
    std::swap(signedcontent_, other->signedcontent_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CorrectionRequestAttachment::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CorrectionRequestAttachment_descriptor_;
  metadata.reflection = CorrectionRequestAttachment_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DocumentSignature::kParentEntityIdFieldNumber;
const int DocumentSignature::kSignatureFieldNumber;
const int DocumentSignature::kSignByAttorneyFieldNumber;
const int DocumentSignature::kSignWithTestSignatureFieldNumber;
#endif  // !_MSC_VER

DocumentSignature::DocumentSignature()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DocumentSignature::InitAsDefaultInstance() {
}

DocumentSignature::DocumentSignature(const DocumentSignature& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DocumentSignature::SharedCtor() {
  _cached_size_ = 0;
  parententityid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  signature_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  signbyattorney_ = false;
  signwithtestsignature_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DocumentSignature::~DocumentSignature() {
  SharedDtor();
}

void DocumentSignature::SharedDtor() {
  if (parententityid_ != &::google::protobuf::internal::kEmptyString) {
    delete parententityid_;
  }
  if (signature_ != &::google::protobuf::internal::kEmptyString) {
    delete signature_;
  }
  if (this != default_instance_) {
  }
}

void DocumentSignature::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DocumentSignature::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DocumentSignature_descriptor_;
}

const DocumentSignature& DocumentSignature::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Events_2fDiadocMessage_2ePostApi_2eproto();
  return *default_instance_;
}

DocumentSignature* DocumentSignature::default_instance_ = NULL;

DocumentSignature* DocumentSignature::New() const {
  return new DocumentSignature;
}

void DocumentSignature::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_parententityid()) {
      if (parententityid_ != &::google::protobuf::internal::kEmptyString) {
        parententityid_->clear();
      }
    }
    if (has_signature()) {
      if (signature_ != &::google::protobuf::internal::kEmptyString) {
        signature_->clear();
      }
    }
    signbyattorney_ = false;
    signwithtestsignature_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DocumentSignature::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string ParentEntityId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_parententityid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->parententityid().data(), this->parententityid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_Signature;
        break;
      }

      // optional bytes Signature = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Signature:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_signature()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_SignByAttorney;
        break;
      }

      // optional bool SignByAttorney = 3 [default = false];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_SignByAttorney:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &signbyattorney_)));
          set_has_signbyattorney();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_SignWithTestSignature;
        break;
      }

      // optional bool SignWithTestSignature = 4 [default = false];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_SignWithTestSignature:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &signwithtestsignature_)));
          set_has_signwithtestsignature();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DocumentSignature::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string ParentEntityId = 1;
  if (has_parententityid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->parententityid().data(), this->parententityid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->parententityid(), output);
  }

  // optional bytes Signature = 2;
  if (has_signature()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->signature(), output);
  }

  // optional bool SignByAttorney = 3 [default = false];
  if (has_signbyattorney()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->signbyattorney(), output);
  }

  // optional bool SignWithTestSignature = 4 [default = false];
  if (has_signwithtestsignature()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->signwithtestsignature(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DocumentSignature::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string ParentEntityId = 1;
  if (has_parententityid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->parententityid().data(), this->parententityid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->parententityid(), target);
  }

  // optional bytes Signature = 2;
  if (has_signature()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->signature(), target);
  }

  // optional bool SignByAttorney = 3 [default = false];
  if (has_signbyattorney()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->signbyattorney(), target);
  }

  // optional bool SignWithTestSignature = 4 [default = false];
  if (has_signwithtestsignature()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->signwithtestsignature(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DocumentSignature::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string ParentEntityId = 1;
    if (has_parententityid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->parententityid());
    }

    // optional bytes Signature = 2;
    if (has_signature()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->signature());
    }

    // optional bool SignByAttorney = 3 [default = false];
    if (has_signbyattorney()) {
      total_size += 1 + 1;
    }

    // optional bool SignWithTestSignature = 4 [default = false];
    if (has_signwithtestsignature()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DocumentSignature::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DocumentSignature* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DocumentSignature*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DocumentSignature::MergeFrom(const DocumentSignature& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_parententityid()) {
      set_parententityid(from.parententityid());
    }
    if (from.has_signature()) {
      set_signature(from.signature());
    }
    if (from.has_signbyattorney()) {
      set_signbyattorney(from.signbyattorney());
    }
    if (from.has_signwithtestsignature()) {
      set_signwithtestsignature(from.signwithtestsignature());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DocumentSignature::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DocumentSignature::CopyFrom(const DocumentSignature& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DocumentSignature::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void DocumentSignature::Swap(DocumentSignature* other) {
  if (other != this) {
    std::swap(parententityid_, other->parententityid_);
    std::swap(signature_, other->signature_);
    std::swap(signbyattorney_, other->signbyattorney_);
    std::swap(signwithtestsignature_, other->signwithtestsignature_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DocumentSignature::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DocumentSignature_descriptor_;
  metadata.reflection = DocumentSignature_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RequestedSignatureRejection::kParentEntityIdFieldNumber;
const int RequestedSignatureRejection::kSignedContentFieldNumber;
#endif  // !_MSC_VER

RequestedSignatureRejection::RequestedSignatureRejection()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RequestedSignatureRejection::InitAsDefaultInstance() {
  signedcontent_ = const_cast< ::Diadoc::Api::Proto::Events::SignedContent*>(&::Diadoc::Api::Proto::Events::SignedContent::default_instance());
}

RequestedSignatureRejection::RequestedSignatureRejection(const RequestedSignatureRejection& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RequestedSignatureRejection::SharedCtor() {
  _cached_size_ = 0;
  parententityid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  signedcontent_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestedSignatureRejection::~RequestedSignatureRejection() {
  SharedDtor();
}

void RequestedSignatureRejection::SharedDtor() {
  if (parententityid_ != &::google::protobuf::internal::kEmptyString) {
    delete parententityid_;
  }
  if (this != default_instance_) {
    delete signedcontent_;
  }
}

void RequestedSignatureRejection::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestedSignatureRejection::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequestedSignatureRejection_descriptor_;
}

const RequestedSignatureRejection& RequestedSignatureRejection::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Events_2fDiadocMessage_2ePostApi_2eproto();
  return *default_instance_;
}

RequestedSignatureRejection* RequestedSignatureRejection::default_instance_ = NULL;

RequestedSignatureRejection* RequestedSignatureRejection::New() const {
  return new RequestedSignatureRejection;
}

void RequestedSignatureRejection::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_parententityid()) {
      if (parententityid_ != &::google::protobuf::internal::kEmptyString) {
        parententityid_->clear();
      }
    }
    if (has_signedcontent()) {
      if (signedcontent_ != NULL) signedcontent_->::Diadoc::Api::Proto::Events::SignedContent::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RequestedSignatureRejection::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string ParentEntityId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_parententityid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->parententityid().data(), this->parententityid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_SignedContent;
        break;
      }

      // required .Diadoc.Api.Proto.Events.SignedContent SignedContent = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_SignedContent:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_signedcontent()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RequestedSignatureRejection::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string ParentEntityId = 1;
  if (has_parententityid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->parententityid().data(), this->parententityid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->parententityid(), output);
  }

  // required .Diadoc.Api.Proto.Events.SignedContent SignedContent = 2;
  if (has_signedcontent()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->signedcontent(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RequestedSignatureRejection::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string ParentEntityId = 1;
  if (has_parententityid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->parententityid().data(), this->parententityid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->parententityid(), target);
  }

  // required .Diadoc.Api.Proto.Events.SignedContent SignedContent = 2;
  if (has_signedcontent()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->signedcontent(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RequestedSignatureRejection::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string ParentEntityId = 1;
    if (has_parententityid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->parententityid());
    }

    // required .Diadoc.Api.Proto.Events.SignedContent SignedContent = 2;
    if (has_signedcontent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->signedcontent());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestedSignatureRejection::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RequestedSignatureRejection* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RequestedSignatureRejection*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RequestedSignatureRejection::MergeFrom(const RequestedSignatureRejection& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_parententityid()) {
      set_parententityid(from.parententityid());
    }
    if (from.has_signedcontent()) {
      mutable_signedcontent()->::Diadoc::Api::Proto::Events::SignedContent::MergeFrom(from.signedcontent());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RequestedSignatureRejection::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestedSignatureRejection::CopyFrom(const RequestedSignatureRejection& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestedSignatureRejection::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void RequestedSignatureRejection::Swap(RequestedSignatureRejection* other) {
  if (other != this) {
    std::swap(parententityid_, other->parententityid_);
    std::swap(signedcontent_, other->signedcontent_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RequestedSignatureRejection::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RequestedSignatureRejection_descriptor_;
  metadata.reflection = RequestedSignatureRejection_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SignedContent::kContentFieldNumber;
const int SignedContent::kSignatureFieldNumber;
const int SignedContent::kSignByAttorneyFieldNumber;
const int SignedContent::kNameOnShelfFieldNumber;
const int SignedContent::kSignWithTestSignatureFieldNumber;
#endif  // !_MSC_VER

SignedContent::SignedContent()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SignedContent::InitAsDefaultInstance() {
}

SignedContent::SignedContent(const SignedContent& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SignedContent::SharedCtor() {
  _cached_size_ = 0;
  content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  signature_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  signbyattorney_ = false;
  nameonshelf_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  signwithtestsignature_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SignedContent::~SignedContent() {
  SharedDtor();
}

void SignedContent::SharedDtor() {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    delete content_;
  }
  if (signature_ != &::google::protobuf::internal::kEmptyString) {
    delete signature_;
  }
  if (nameonshelf_ != &::google::protobuf::internal::kEmptyString) {
    delete nameonshelf_;
  }
  if (this != default_instance_) {
  }
}

void SignedContent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SignedContent::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SignedContent_descriptor_;
}

const SignedContent& SignedContent::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Events_2fDiadocMessage_2ePostApi_2eproto();
  return *default_instance_;
}

SignedContent* SignedContent::default_instance_ = NULL;

SignedContent* SignedContent::New() const {
  return new SignedContent;
}

void SignedContent::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_content()) {
      if (content_ != &::google::protobuf::internal::kEmptyString) {
        content_->clear();
      }
    }
    if (has_signature()) {
      if (signature_ != &::google::protobuf::internal::kEmptyString) {
        signature_->clear();
      }
    }
    signbyattorney_ = false;
    if (has_nameonshelf()) {
      if (nameonshelf_ != &::google::protobuf::internal::kEmptyString) {
        nameonshelf_->clear();
      }
    }
    signwithtestsignature_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SignedContent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes Content = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_content()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_Signature;
        break;
      }

      // optional bytes Signature = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Signature:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_signature()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_SignByAttorney;
        break;
      }

      // optional bool SignByAttorney = 3 [default = false];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_SignByAttorney:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &signbyattorney_)));
          set_has_signbyattorney();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_NameOnShelf;
        break;
      }

      // optional string NameOnShelf = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_NameOnShelf:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nameonshelf()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->nameonshelf().data(), this->nameonshelf().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_SignWithTestSignature;
        break;
      }

      // optional bool SignWithTestSignature = 5 [default = false];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_SignWithTestSignature:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &signwithtestsignature_)));
          set_has_signwithtestsignature();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SignedContent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes Content = 1;
  if (has_content()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->content(), output);
  }

  // optional bytes Signature = 2;
  if (has_signature()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->signature(), output);
  }

  // optional bool SignByAttorney = 3 [default = false];
  if (has_signbyattorney()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->signbyattorney(), output);
  }

  // optional string NameOnShelf = 4;
  if (has_nameonshelf()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nameonshelf().data(), this->nameonshelf().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->nameonshelf(), output);
  }

  // optional bool SignWithTestSignature = 5 [default = false];
  if (has_signwithtestsignature()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->signwithtestsignature(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SignedContent::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bytes Content = 1;
  if (has_content()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->content(), target);
  }

  // optional bytes Signature = 2;
  if (has_signature()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->signature(), target);
  }

  // optional bool SignByAttorney = 3 [default = false];
  if (has_signbyattorney()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->signbyattorney(), target);
  }

  // optional string NameOnShelf = 4;
  if (has_nameonshelf()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nameonshelf().data(), this->nameonshelf().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->nameonshelf(), target);
  }

  // optional bool SignWithTestSignature = 5 [default = false];
  if (has_signwithtestsignature()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->signwithtestsignature(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SignedContent::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes Content = 1;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->content());
    }

    // optional bytes Signature = 2;
    if (has_signature()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->signature());
    }

    // optional bool SignByAttorney = 3 [default = false];
    if (has_signbyattorney()) {
      total_size += 1 + 1;
    }

    // optional string NameOnShelf = 4;
    if (has_nameonshelf()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nameonshelf());
    }

    // optional bool SignWithTestSignature = 5 [default = false];
    if (has_signwithtestsignature()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SignedContent::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SignedContent* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SignedContent*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SignedContent::MergeFrom(const SignedContent& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_content()) {
      set_content(from.content());
    }
    if (from.has_signature()) {
      set_signature(from.signature());
    }
    if (from.has_signbyattorney()) {
      set_signbyattorney(from.signbyattorney());
    }
    if (from.has_nameonshelf()) {
      set_nameonshelf(from.nameonshelf());
    }
    if (from.has_signwithtestsignature()) {
      set_signwithtestsignature(from.signwithtestsignature());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SignedContent::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SignedContent::CopyFrom(const SignedContent& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SignedContent::IsInitialized() const {

  return true;
}

void SignedContent::Swap(SignedContent* other) {
  if (other != this) {
    std::swap(content_, other->content_);
    std::swap(signature_, other->signature_);
    std::swap(signbyattorney_, other->signbyattorney_);
    std::swap(nameonshelf_, other->nameonshelf_);
    std::swap(signwithtestsignature_, other->signwithtestsignature_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SignedContent::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SignedContent_descriptor_;
  metadata.reflection = SignedContent_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DraftToSend::kBoxIdFieldNumber;
const int DraftToSend::kDraftIdFieldNumber;
const int DraftToSend::kToBoxIdFieldNumber;
const int DraftToSend::kToDepartmentIdFieldNumber;
const int DraftToSend::kDocumentSignaturesFieldNumber;
#endif  // !_MSC_VER

DraftToSend::DraftToSend()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DraftToSend::InitAsDefaultInstance() {
}

DraftToSend::DraftToSend(const DraftToSend& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DraftToSend::SharedCtor() {
  _cached_size_ = 0;
  boxid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  draftid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  toboxid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  todepartmentid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DraftToSend::~DraftToSend() {
  SharedDtor();
}

void DraftToSend::SharedDtor() {
  if (boxid_ != &::google::protobuf::internal::kEmptyString) {
    delete boxid_;
  }
  if (draftid_ != &::google::protobuf::internal::kEmptyString) {
    delete draftid_;
  }
  if (toboxid_ != &::google::protobuf::internal::kEmptyString) {
    delete toboxid_;
  }
  if (todepartmentid_ != &::google::protobuf::internal::kEmptyString) {
    delete todepartmentid_;
  }
  if (this != default_instance_) {
  }
}

void DraftToSend::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DraftToSend::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DraftToSend_descriptor_;
}

const DraftToSend& DraftToSend::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Events_2fDiadocMessage_2ePostApi_2eproto();
  return *default_instance_;
}

DraftToSend* DraftToSend::default_instance_ = NULL;

DraftToSend* DraftToSend::New() const {
  return new DraftToSend;
}

void DraftToSend::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_boxid()) {
      if (boxid_ != &::google::protobuf::internal::kEmptyString) {
        boxid_->clear();
      }
    }
    if (has_draftid()) {
      if (draftid_ != &::google::protobuf::internal::kEmptyString) {
        draftid_->clear();
      }
    }
    if (has_toboxid()) {
      if (toboxid_ != &::google::protobuf::internal::kEmptyString) {
        toboxid_->clear();
      }
    }
    if (has_todepartmentid()) {
      if (todepartmentid_ != &::google::protobuf::internal::kEmptyString) {
        todepartmentid_->clear();
      }
    }
  }
  documentsignatures_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DraftToSend::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string BoxId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_boxid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->boxid().data(), this->boxid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_DraftId;
        break;
      }

      // required string DraftId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_DraftId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_draftid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->draftid().data(), this->draftid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_ToBoxId;
        break;
      }

      // optional string ToBoxId = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ToBoxId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_toboxid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->toboxid().data(), this->toboxid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_ToDepartmentId;
        break;
      }

      // optional string ToDepartmentId = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ToDepartmentId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_todepartmentid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->todepartmentid().data(), this->todepartmentid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_DocumentSignatures;
        break;
      }

      // repeated .Diadoc.Api.Proto.Events.DocumentSignature DocumentSignatures = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_DocumentSignatures:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_documentsignatures()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_DocumentSignatures;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DraftToSend::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string BoxId = 1;
  if (has_boxid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->boxid().data(), this->boxid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->boxid(), output);
  }

  // required string DraftId = 2;
  if (has_draftid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->draftid().data(), this->draftid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->draftid(), output);
  }

  // optional string ToBoxId = 3;
  if (has_toboxid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->toboxid().data(), this->toboxid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->toboxid(), output);
  }

  // optional string ToDepartmentId = 4;
  if (has_todepartmentid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->todepartmentid().data(), this->todepartmentid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->todepartmentid(), output);
  }

  // repeated .Diadoc.Api.Proto.Events.DocumentSignature DocumentSignatures = 5;
  for (int i = 0; i < this->documentsignatures_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->documentsignatures(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DraftToSend::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string BoxId = 1;
  if (has_boxid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->boxid().data(), this->boxid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->boxid(), target);
  }

  // required string DraftId = 2;
  if (has_draftid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->draftid().data(), this->draftid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->draftid(), target);
  }

  // optional string ToBoxId = 3;
  if (has_toboxid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->toboxid().data(), this->toboxid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->toboxid(), target);
  }

  // optional string ToDepartmentId = 4;
  if (has_todepartmentid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->todepartmentid().data(), this->todepartmentid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->todepartmentid(), target);
  }

  // repeated .Diadoc.Api.Proto.Events.DocumentSignature DocumentSignatures = 5;
  for (int i = 0; i < this->documentsignatures_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->documentsignatures(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DraftToSend::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string BoxId = 1;
    if (has_boxid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->boxid());
    }

    // required string DraftId = 2;
    if (has_draftid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->draftid());
    }

    // optional string ToBoxId = 3;
    if (has_toboxid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->toboxid());
    }

    // optional string ToDepartmentId = 4;
    if (has_todepartmentid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->todepartmentid());
    }

  }
  // repeated .Diadoc.Api.Proto.Events.DocumentSignature DocumentSignatures = 5;
  total_size += 1 * this->documentsignatures_size();
  for (int i = 0; i < this->documentsignatures_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->documentsignatures(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DraftToSend::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DraftToSend* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DraftToSend*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DraftToSend::MergeFrom(const DraftToSend& from) {
  GOOGLE_CHECK_NE(&from, this);
  documentsignatures_.MergeFrom(from.documentsignatures_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_boxid()) {
      set_boxid(from.boxid());
    }
    if (from.has_draftid()) {
      set_draftid(from.draftid());
    }
    if (from.has_toboxid()) {
      set_toboxid(from.toboxid());
    }
    if (from.has_todepartmentid()) {
      set_todepartmentid(from.todepartmentid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DraftToSend::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DraftToSend::CopyFrom(const DraftToSend& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DraftToSend::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  for (int i = 0; i < documentsignatures_size(); i++) {
    if (!this->documentsignatures(i).IsInitialized()) return false;
  }
  return true;
}

void DraftToSend::Swap(DraftToSend* other) {
  if (other != this) {
    std::swap(boxid_, other->boxid_);
    std::swap(draftid_, other->draftid_);
    std::swap(toboxid_, other->toboxid_);
    std::swap(todepartmentid_, other->todepartmentid_);
    documentsignatures_.Swap(&other->documentsignatures_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DraftToSend::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DraftToSend_descriptor_;
  metadata.reflection = DraftToSend_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MessageToSend::kBoxIdFieldNumber;
const int MessageToSend::kMessageIdFieldNumber;
const int MessageToSend::kDocumentSignaturesFieldNumber;
#endif  // !_MSC_VER

MessageToSend::MessageToSend()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MessageToSend::InitAsDefaultInstance() {
}

MessageToSend::MessageToSend(const MessageToSend& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MessageToSend::SharedCtor() {
  _cached_size_ = 0;
  boxid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  messageid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MessageToSend::~MessageToSend() {
  SharedDtor();
}

void MessageToSend::SharedDtor() {
  if (boxid_ != &::google::protobuf::internal::kEmptyString) {
    delete boxid_;
  }
  if (messageid_ != &::google::protobuf::internal::kEmptyString) {
    delete messageid_;
  }
  if (this != default_instance_) {
  }
}

void MessageToSend::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MessageToSend::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MessageToSend_descriptor_;
}

const MessageToSend& MessageToSend::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Events_2fDiadocMessage_2ePostApi_2eproto();
  return *default_instance_;
}

MessageToSend* MessageToSend::default_instance_ = NULL;

MessageToSend* MessageToSend::New() const {
  return new MessageToSend;
}

void MessageToSend::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_boxid()) {
      if (boxid_ != &::google::protobuf::internal::kEmptyString) {
        boxid_->clear();
      }
    }
    if (has_messageid()) {
      if (messageid_ != &::google::protobuf::internal::kEmptyString) {
        messageid_->clear();
      }
    }
  }
  documentsignatures_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MessageToSend::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string BoxId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_boxid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->boxid().data(), this->boxid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_MessageId;
        break;
      }

      // required string MessageId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_MessageId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_messageid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->messageid().data(), this->messageid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_DocumentSignatures;
        break;
      }

      // repeated .Diadoc.Api.Proto.Events.DocumentSignature DocumentSignatures = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_DocumentSignatures:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_documentsignatures()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_DocumentSignatures;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MessageToSend::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string BoxId = 1;
  if (has_boxid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->boxid().data(), this->boxid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->boxid(), output);
  }

  // required string MessageId = 2;
  if (has_messageid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->messageid().data(), this->messageid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->messageid(), output);
  }

  // repeated .Diadoc.Api.Proto.Events.DocumentSignature DocumentSignatures = 3;
  for (int i = 0; i < this->documentsignatures_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->documentsignatures(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MessageToSend::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string BoxId = 1;
  if (has_boxid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->boxid().data(), this->boxid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->boxid(), target);
  }

  // required string MessageId = 2;
  if (has_messageid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->messageid().data(), this->messageid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->messageid(), target);
  }

  // repeated .Diadoc.Api.Proto.Events.DocumentSignature DocumentSignatures = 3;
  for (int i = 0; i < this->documentsignatures_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->documentsignatures(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MessageToSend::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string BoxId = 1;
    if (has_boxid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->boxid());
    }

    // required string MessageId = 2;
    if (has_messageid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->messageid());
    }

  }
  // repeated .Diadoc.Api.Proto.Events.DocumentSignature DocumentSignatures = 3;
  total_size += 1 * this->documentsignatures_size();
  for (int i = 0; i < this->documentsignatures_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->documentsignatures(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MessageToSend::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MessageToSend* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MessageToSend*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MessageToSend::MergeFrom(const MessageToSend& from) {
  GOOGLE_CHECK_NE(&from, this);
  documentsignatures_.MergeFrom(from.documentsignatures_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_boxid()) {
      set_boxid(from.boxid());
    }
    if (from.has_messageid()) {
      set_messageid(from.messageid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MessageToSend::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MessageToSend::CopyFrom(const MessageToSend& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MessageToSend::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  for (int i = 0; i < documentsignatures_size(); i++) {
    if (!this->documentsignatures(i).IsInitialized()) return false;
  }
  return true;
}

void MessageToSend::Swap(MessageToSend* other) {
  if (other != this) {
    std::swap(boxid_, other->boxid_);
    std::swap(messageid_, other->messageid_);
    documentsignatures_.Swap(&other->documentsignatures_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MessageToSend::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MessageToSend_descriptor_;
  metadata.reflection = MessageToSend_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RevocationRequestAttachment::kParentEntityIdFieldNumber;
const int RevocationRequestAttachment::kSignedContentFieldNumber;
#endif  // !_MSC_VER

RevocationRequestAttachment::RevocationRequestAttachment()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RevocationRequestAttachment::InitAsDefaultInstance() {
  signedcontent_ = const_cast< ::Diadoc::Api::Proto::Events::SignedContent*>(&::Diadoc::Api::Proto::Events::SignedContent::default_instance());
}

RevocationRequestAttachment::RevocationRequestAttachment(const RevocationRequestAttachment& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RevocationRequestAttachment::SharedCtor() {
  _cached_size_ = 0;
  parententityid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  signedcontent_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RevocationRequestAttachment::~RevocationRequestAttachment() {
  SharedDtor();
}

void RevocationRequestAttachment::SharedDtor() {
  if (parententityid_ != &::google::protobuf::internal::kEmptyString) {
    delete parententityid_;
  }
  if (this != default_instance_) {
    delete signedcontent_;
  }
}

void RevocationRequestAttachment::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RevocationRequestAttachment::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RevocationRequestAttachment_descriptor_;
}

const RevocationRequestAttachment& RevocationRequestAttachment::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Events_2fDiadocMessage_2ePostApi_2eproto();
  return *default_instance_;
}

RevocationRequestAttachment* RevocationRequestAttachment::default_instance_ = NULL;

RevocationRequestAttachment* RevocationRequestAttachment::New() const {
  return new RevocationRequestAttachment;
}

void RevocationRequestAttachment::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_parententityid()) {
      if (parententityid_ != &::google::protobuf::internal::kEmptyString) {
        parententityid_->clear();
      }
    }
    if (has_signedcontent()) {
      if (signedcontent_ != NULL) signedcontent_->::Diadoc::Api::Proto::Events::SignedContent::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RevocationRequestAttachment::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string ParentEntityId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_parententityid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->parententityid().data(), this->parententityid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_SignedContent;
        break;
      }

      // required .Diadoc.Api.Proto.Events.SignedContent SignedContent = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_SignedContent:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_signedcontent()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RevocationRequestAttachment::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string ParentEntityId = 1;
  if (has_parententityid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->parententityid().data(), this->parententityid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->parententityid(), output);
  }

  // required .Diadoc.Api.Proto.Events.SignedContent SignedContent = 2;
  if (has_signedcontent()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->signedcontent(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RevocationRequestAttachment::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string ParentEntityId = 1;
  if (has_parententityid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->parententityid().data(), this->parententityid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->parententityid(), target);
  }

  // required .Diadoc.Api.Proto.Events.SignedContent SignedContent = 2;
  if (has_signedcontent()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->signedcontent(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RevocationRequestAttachment::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string ParentEntityId = 1;
    if (has_parententityid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->parententityid());
    }

    // required .Diadoc.Api.Proto.Events.SignedContent SignedContent = 2;
    if (has_signedcontent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->signedcontent());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RevocationRequestAttachment::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RevocationRequestAttachment* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RevocationRequestAttachment*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RevocationRequestAttachment::MergeFrom(const RevocationRequestAttachment& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_parententityid()) {
      set_parententityid(from.parententityid());
    }
    if (from.has_signedcontent()) {
      mutable_signedcontent()->::Diadoc::Api::Proto::Events::SignedContent::MergeFrom(from.signedcontent());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RevocationRequestAttachment::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RevocationRequestAttachment::CopyFrom(const RevocationRequestAttachment& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RevocationRequestAttachment::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void RevocationRequestAttachment::Swap(RevocationRequestAttachment* other) {
  if (other != this) {
    std::swap(parententityid_, other->parententityid_);
    std::swap(signedcontent_, other->signedcontent_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RevocationRequestAttachment::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RevocationRequestAttachment_descriptor_;
  metadata.reflection = RevocationRequestAttachment_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int XmlSignatureRejectionAttachment::kParentEntityIdFieldNumber;
const int XmlSignatureRejectionAttachment::kSignedContentFieldNumber;
#endif  // !_MSC_VER

XmlSignatureRejectionAttachment::XmlSignatureRejectionAttachment()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void XmlSignatureRejectionAttachment::InitAsDefaultInstance() {
  signedcontent_ = const_cast< ::Diadoc::Api::Proto::Events::SignedContent*>(&::Diadoc::Api::Proto::Events::SignedContent::default_instance());
}

XmlSignatureRejectionAttachment::XmlSignatureRejectionAttachment(const XmlSignatureRejectionAttachment& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void XmlSignatureRejectionAttachment::SharedCtor() {
  _cached_size_ = 0;
  parententityid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  signedcontent_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

XmlSignatureRejectionAttachment::~XmlSignatureRejectionAttachment() {
  SharedDtor();
}

void XmlSignatureRejectionAttachment::SharedDtor() {
  if (parententityid_ != &::google::protobuf::internal::kEmptyString) {
    delete parententityid_;
  }
  if (this != default_instance_) {
    delete signedcontent_;
  }
}

void XmlSignatureRejectionAttachment::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* XmlSignatureRejectionAttachment::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return XmlSignatureRejectionAttachment_descriptor_;
}

const XmlSignatureRejectionAttachment& XmlSignatureRejectionAttachment::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Events_2fDiadocMessage_2ePostApi_2eproto();
  return *default_instance_;
}

XmlSignatureRejectionAttachment* XmlSignatureRejectionAttachment::default_instance_ = NULL;

XmlSignatureRejectionAttachment* XmlSignatureRejectionAttachment::New() const {
  return new XmlSignatureRejectionAttachment;
}

void XmlSignatureRejectionAttachment::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_parententityid()) {
      if (parententityid_ != &::google::protobuf::internal::kEmptyString) {
        parententityid_->clear();
      }
    }
    if (has_signedcontent()) {
      if (signedcontent_ != NULL) signedcontent_->::Diadoc::Api::Proto::Events::SignedContent::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool XmlSignatureRejectionAttachment::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string ParentEntityId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_parententityid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->parententityid().data(), this->parententityid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_SignedContent;
        break;
      }

      // required .Diadoc.Api.Proto.Events.SignedContent SignedContent = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_SignedContent:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_signedcontent()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void XmlSignatureRejectionAttachment::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string ParentEntityId = 1;
  if (has_parententityid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->parententityid().data(), this->parententityid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->parententityid(), output);
  }

  // required .Diadoc.Api.Proto.Events.SignedContent SignedContent = 2;
  if (has_signedcontent()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->signedcontent(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* XmlSignatureRejectionAttachment::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string ParentEntityId = 1;
  if (has_parententityid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->parententityid().data(), this->parententityid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->parententityid(), target);
  }

  // required .Diadoc.Api.Proto.Events.SignedContent SignedContent = 2;
  if (has_signedcontent()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->signedcontent(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int XmlSignatureRejectionAttachment::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string ParentEntityId = 1;
    if (has_parententityid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->parententityid());
    }

    // required .Diadoc.Api.Proto.Events.SignedContent SignedContent = 2;
    if (has_signedcontent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->signedcontent());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void XmlSignatureRejectionAttachment::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const XmlSignatureRejectionAttachment* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const XmlSignatureRejectionAttachment*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void XmlSignatureRejectionAttachment::MergeFrom(const XmlSignatureRejectionAttachment& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_parententityid()) {
      set_parententityid(from.parententityid());
    }
    if (from.has_signedcontent()) {
      mutable_signedcontent()->::Diadoc::Api::Proto::Events::SignedContent::MergeFrom(from.signedcontent());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void XmlSignatureRejectionAttachment::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void XmlSignatureRejectionAttachment::CopyFrom(const XmlSignatureRejectionAttachment& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool XmlSignatureRejectionAttachment::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void XmlSignatureRejectionAttachment::Swap(XmlSignatureRejectionAttachment* other) {
  if (other != this) {
    std::swap(parententityid_, other->parententityid_);
    std::swap(signedcontent_, other->signedcontent_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata XmlSignatureRejectionAttachment::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = XmlSignatureRejectionAttachment_descriptor_;
  metadata.reflection = XmlSignatureRejectionAttachment_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Events
}  // namespace Proto
}  // namespace Api
}  // namespace Diadoc

// @@protoc_insertion_point(global_scope)
