// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Organization.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Organization.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace Diadoc {
namespace Api {
namespace Proto {

namespace {

const ::google::protobuf::Descriptor* OrganizationList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OrganizationList_reflection_ = NULL;
const ::google::protobuf::Descriptor* Organization_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Organization_reflection_ = NULL;
const ::google::protobuf::Descriptor* Department_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Department_reflection_ = NULL;
const ::google::protobuf::Descriptor* Box_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Box_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_Organization_2eproto() {
  protobuf_AddDesc_Organization_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "Organization.proto");
  GOOGLE_CHECK(file != NULL);
  OrganizationList_descriptor_ = file->message_type(0);
  static const int OrganizationList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrganizationList, organizations_),
  };
  OrganizationList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OrganizationList_descriptor_,
      OrganizationList::default_instance_,
      OrganizationList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrganizationList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrganizationList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OrganizationList));
  Organization_descriptor_ = file->message_type(1);
  static const int Organization_offsets_[15] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Organization, orgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Organization, inn_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Organization, kpp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Organization, fullname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Organization, shortname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Organization, boxes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Organization, ogrn_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Organization, fnsparticipantid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Organization, address_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Organization, fnsregistrationdate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Organization, departments_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Organization, ifnscode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Organization, ispilot_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Organization, isactive_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Organization, istest_),
  };
  Organization_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Organization_descriptor_,
      Organization::default_instance_,
      Organization_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Organization, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Organization, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Organization));
  Department_descriptor_ = file->message_type(2);
  static const int Department_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Department, departmentid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Department, parentdepartmentid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Department, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Department, abbreviation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Department, kpp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Department, address_),
  };
  Department_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Department_descriptor_,
      Department::default_instance_,
      Department_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Department, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Department, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Department));
  Box_descriptor_ = file->message_type(3);
  static const int Box_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Box, boxid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Box, title_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Box, organization_),
  };
  Box_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Box_descriptor_,
      Box::default_instance_,
      Box_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Box, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Box, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Box));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_Organization_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OrganizationList_descriptor_, &OrganizationList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Organization_descriptor_, &Organization::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Department_descriptor_, &Department::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Box_descriptor_, &Box::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_Organization_2eproto() {
  delete OrganizationList::default_instance_;
  delete OrganizationList_reflection_;
  delete Organization::default_instance_;
  delete Organization_reflection_;
  delete Department::default_instance_;
  delete Department_reflection_;
  delete Box::default_instance_;
  delete Box_reflection_;
}

void protobuf_AddDesc_Organization_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::Diadoc::Api::Proto::protobuf_AddDesc_Address_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\022Organization.proto\022\020Diadoc.Api.Proto\032\r"
    "Address.proto\"I\n\020OrganizationList\0225\n\rOrg"
    "anizations\030\001 \003(\0132\036.Diadoc.Api.Proto.Orga"
    "nization\"\353\002\n\014Organization\022\r\n\005OrgId\030\001 \002(\t"
    "\022\013\n\003Inn\030\002 \002(\t\022\013\n\003Kpp\030\003 \001(\t\022\020\n\010FullName\030\004"
    " \002(\t\022\021\n\tShortName\030\005 \001(\t\022$\n\005Boxes\030\007 \003(\0132\025"
    ".Diadoc.Api.Proto.Box\022\014\n\004Ogrn\030\010 \001(\t\022\030\n\020F"
    "nsParticipantId\030\t \001(\t\022*\n\007Address\030\n \001(\0132\031"
    ".Diadoc.Api.Proto.Address\022\033\n\023FnsRegistra"
    "tionDate\030\013 \001(\t\0221\n\013Departments\030\014 \003(\0132\034.Di"
    "adoc.Api.Proto.Department\022\020\n\010IfnsCode\030\r "
    "\001(\t\022\017\n\007IsPilot\030\016 \001(\010\022\020\n\010IsActive\030\017 \001(\010\022\016"
    "\n\006IsTest\030\020 \001(\010\"\233\001\n\nDepartment\022\024\n\014Departm"
    "entId\030\001 \002(\t\022\032\n\022ParentDepartmentId\030\002 \002(\t\022"
    "\014\n\004Name\030\003 \002(\t\022\024\n\014Abbreviation\030\004 \001(\t\022\013\n\003K"
    "pp\030\005 \001(\t\022*\n\007Address\030\006 \001(\0132\031.Diadoc.Api.P"
    "roto.Address\"Y\n\003Box\022\r\n\005BoxId\030\001 \002(\t\022\r\n\005Ti"
    "tle\030\002 \002(\t\0224\n\014Organization\030\003 \001(\0132\036.Diadoc"
    ".Api.Proto.Organization", 743);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Organization.proto", &protobuf_RegisterTypes);
  OrganizationList::default_instance_ = new OrganizationList();
  Organization::default_instance_ = new Organization();
  Department::default_instance_ = new Department();
  Box::default_instance_ = new Box();
  OrganizationList::default_instance_->InitAsDefaultInstance();
  Organization::default_instance_->InitAsDefaultInstance();
  Department::default_instance_->InitAsDefaultInstance();
  Box::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_Organization_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_Organization_2eproto {
  StaticDescriptorInitializer_Organization_2eproto() {
    protobuf_AddDesc_Organization_2eproto();
  }
} static_descriptor_initializer_Organization_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int OrganizationList::kOrganizationsFieldNumber;
#endif  // !_MSC_VER

OrganizationList::OrganizationList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void OrganizationList::InitAsDefaultInstance() {
}

OrganizationList::OrganizationList(const OrganizationList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OrganizationList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OrganizationList::~OrganizationList() {
  SharedDtor();
}

void OrganizationList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void OrganizationList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OrganizationList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OrganizationList_descriptor_;
}

const OrganizationList& OrganizationList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Organization_2eproto();
  return *default_instance_;
}

OrganizationList* OrganizationList::default_instance_ = NULL;

OrganizationList* OrganizationList::New() const {
  return new OrganizationList;
}

void OrganizationList::Clear() {
  organizations_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OrganizationList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Diadoc.Api.Proto.Organization Organizations = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Organizations:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_organizations()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_Organizations;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OrganizationList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .Diadoc.Api.Proto.Organization Organizations = 1;
  for (int i = 0; i < this->organizations_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->organizations(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OrganizationList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .Diadoc.Api.Proto.Organization Organizations = 1;
  for (int i = 0; i < this->organizations_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->organizations(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OrganizationList::ByteSize() const {
  int total_size = 0;

  // repeated .Diadoc.Api.Proto.Organization Organizations = 1;
  total_size += 1 * this->organizations_size();
  for (int i = 0; i < this->organizations_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->organizations(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OrganizationList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OrganizationList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OrganizationList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OrganizationList::MergeFrom(const OrganizationList& from) {
  GOOGLE_CHECK_NE(&from, this);
  organizations_.MergeFrom(from.organizations_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OrganizationList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OrganizationList::CopyFrom(const OrganizationList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OrganizationList::IsInitialized() const {

  for (int i = 0; i < organizations_size(); i++) {
    if (!this->organizations(i).IsInitialized()) return false;
  }
  return true;
}

void OrganizationList::Swap(OrganizationList* other) {
  if (other != this) {
    organizations_.Swap(&other->organizations_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OrganizationList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OrganizationList_descriptor_;
  metadata.reflection = OrganizationList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Organization::kOrgIdFieldNumber;
const int Organization::kInnFieldNumber;
const int Organization::kKppFieldNumber;
const int Organization::kFullNameFieldNumber;
const int Organization::kShortNameFieldNumber;
const int Organization::kBoxesFieldNumber;
const int Organization::kOgrnFieldNumber;
const int Organization::kFnsParticipantIdFieldNumber;
const int Organization::kAddressFieldNumber;
const int Organization::kFnsRegistrationDateFieldNumber;
const int Organization::kDepartmentsFieldNumber;
const int Organization::kIfnsCodeFieldNumber;
const int Organization::kIsPilotFieldNumber;
const int Organization::kIsActiveFieldNumber;
const int Organization::kIsTestFieldNumber;
#endif  // !_MSC_VER

Organization::Organization()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Organization::InitAsDefaultInstance() {
  address_ = const_cast< ::Diadoc::Api::Proto::Address*>(&::Diadoc::Api::Proto::Address::default_instance());
}

Organization::Organization(const Organization& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Organization::SharedCtor() {
  _cached_size_ = 0;
  orgid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  inn_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  kpp_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  fullname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  shortname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ogrn_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  fnsparticipantid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  address_ = NULL;
  fnsregistrationdate_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ifnscode_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ispilot_ = false;
  isactive_ = false;
  istest_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Organization::~Organization() {
  SharedDtor();
}

void Organization::SharedDtor() {
  if (orgid_ != &::google::protobuf::internal::kEmptyString) {
    delete orgid_;
  }
  if (inn_ != &::google::protobuf::internal::kEmptyString) {
    delete inn_;
  }
  if (kpp_ != &::google::protobuf::internal::kEmptyString) {
    delete kpp_;
  }
  if (fullname_ != &::google::protobuf::internal::kEmptyString) {
    delete fullname_;
  }
  if (shortname_ != &::google::protobuf::internal::kEmptyString) {
    delete shortname_;
  }
  if (ogrn_ != &::google::protobuf::internal::kEmptyString) {
    delete ogrn_;
  }
  if (fnsparticipantid_ != &::google::protobuf::internal::kEmptyString) {
    delete fnsparticipantid_;
  }
  if (fnsregistrationdate_ != &::google::protobuf::internal::kEmptyString) {
    delete fnsregistrationdate_;
  }
  if (ifnscode_ != &::google::protobuf::internal::kEmptyString) {
    delete ifnscode_;
  }
  if (this != default_instance_) {
    delete address_;
  }
}

void Organization::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Organization::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Organization_descriptor_;
}

const Organization& Organization::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Organization_2eproto();
  return *default_instance_;
}

Organization* Organization::default_instance_ = NULL;

Organization* Organization::New() const {
  return new Organization;
}

void Organization::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_orgid()) {
      if (orgid_ != &::google::protobuf::internal::kEmptyString) {
        orgid_->clear();
      }
    }
    if (has_inn()) {
      if (inn_ != &::google::protobuf::internal::kEmptyString) {
        inn_->clear();
      }
    }
    if (has_kpp()) {
      if (kpp_ != &::google::protobuf::internal::kEmptyString) {
        kpp_->clear();
      }
    }
    if (has_fullname()) {
      if (fullname_ != &::google::protobuf::internal::kEmptyString) {
        fullname_->clear();
      }
    }
    if (has_shortname()) {
      if (shortname_ != &::google::protobuf::internal::kEmptyString) {
        shortname_->clear();
      }
    }
    if (has_ogrn()) {
      if (ogrn_ != &::google::protobuf::internal::kEmptyString) {
        ogrn_->clear();
      }
    }
    if (has_fnsparticipantid()) {
      if (fnsparticipantid_ != &::google::protobuf::internal::kEmptyString) {
        fnsparticipantid_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_address()) {
      if (address_ != NULL) address_->::Diadoc::Api::Proto::Address::Clear();
    }
    if (has_fnsregistrationdate()) {
      if (fnsregistrationdate_ != &::google::protobuf::internal::kEmptyString) {
        fnsregistrationdate_->clear();
      }
    }
    if (has_ifnscode()) {
      if (ifnscode_ != &::google::protobuf::internal::kEmptyString) {
        ifnscode_->clear();
      }
    }
    ispilot_ = false;
    isactive_ = false;
    istest_ = false;
  }
  boxes_.Clear();
  departments_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Organization::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string OrgId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_orgid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->orgid().data(), this->orgid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_Inn;
        break;
      }

      // required string Inn = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Inn:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_inn()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->inn().data(), this->inn().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_Kpp;
        break;
      }

      // optional string Kpp = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Kpp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_kpp()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->kpp().data(), this->kpp().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_FullName;
        break;
      }

      // required string FullName = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_FullName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fullname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->fullname().data(), this->fullname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_ShortName;
        break;
      }

      // optional string ShortName = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ShortName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_shortname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->shortname().data(), this->shortname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_Boxes;
        break;
      }

      // repeated .Diadoc.Api.Proto.Box Boxes = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Boxes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_boxes()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_Boxes;
        if (input->ExpectTag(66)) goto parse_Ogrn;
        break;
      }

      // optional string Ogrn = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Ogrn:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ogrn()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ogrn().data(), this->ogrn().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_FnsParticipantId;
        break;
      }

      // optional string FnsParticipantId = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_FnsParticipantId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fnsparticipantid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->fnsparticipantid().data(), this->fnsparticipantid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_Address;
        break;
      }

      // optional .Diadoc.Api.Proto.Address Address = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Address:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_address()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_FnsRegistrationDate;
        break;
      }

      // optional string FnsRegistrationDate = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_FnsRegistrationDate:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fnsregistrationdate()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->fnsregistrationdate().data(), this->fnsregistrationdate().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_Departments;
        break;
      }

      // repeated .Diadoc.Api.Proto.Department Departments = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Departments:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_departments()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_Departments;
        if (input->ExpectTag(106)) goto parse_IfnsCode;
        break;
      }

      // optional string IfnsCode = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_IfnsCode:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ifnscode()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ifnscode().data(), this->ifnscode().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_IsPilot;
        break;
      }

      // optional bool IsPilot = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_IsPilot:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ispilot_)));
          set_has_ispilot();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_IsActive;
        break;
      }

      // optional bool IsActive = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_IsActive:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isactive_)));
          set_has_isactive();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_IsTest;
        break;
      }

      // optional bool IsTest = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_IsTest:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &istest_)));
          set_has_istest();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Organization::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string OrgId = 1;
  if (has_orgid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->orgid().data(), this->orgid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->orgid(), output);
  }

  // required string Inn = 2;
  if (has_inn()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->inn().data(), this->inn().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->inn(), output);
  }

  // optional string Kpp = 3;
  if (has_kpp()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->kpp().data(), this->kpp().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->kpp(), output);
  }

  // required string FullName = 4;
  if (has_fullname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->fullname().data(), this->fullname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->fullname(), output);
  }

  // optional string ShortName = 5;
  if (has_shortname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->shortname().data(), this->shortname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->shortname(), output);
  }

  // repeated .Diadoc.Api.Proto.Box Boxes = 7;
  for (int i = 0; i < this->boxes_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->boxes(i), output);
  }

  // optional string Ogrn = 8;
  if (has_ogrn()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ogrn().data(), this->ogrn().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->ogrn(), output);
  }

  // optional string FnsParticipantId = 9;
  if (has_fnsparticipantid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->fnsparticipantid().data(), this->fnsparticipantid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->fnsparticipantid(), output);
  }

  // optional .Diadoc.Api.Proto.Address Address = 10;
  if (has_address()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->address(), output);
  }

  // optional string FnsRegistrationDate = 11;
  if (has_fnsregistrationdate()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->fnsregistrationdate().data(), this->fnsregistrationdate().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      11, this->fnsregistrationdate(), output);
  }

  // repeated .Diadoc.Api.Proto.Department Departments = 12;
  for (int i = 0; i < this->departments_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->departments(i), output);
  }

  // optional string IfnsCode = 13;
  if (has_ifnscode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ifnscode().data(), this->ifnscode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      13, this->ifnscode(), output);
  }

  // optional bool IsPilot = 14;
  if (has_ispilot()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(14, this->ispilot(), output);
  }

  // optional bool IsActive = 15;
  if (has_isactive()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(15, this->isactive(), output);
  }

  // optional bool IsTest = 16;
  if (has_istest()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(16, this->istest(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Organization::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string OrgId = 1;
  if (has_orgid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->orgid().data(), this->orgid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->orgid(), target);
  }

  // required string Inn = 2;
  if (has_inn()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->inn().data(), this->inn().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->inn(), target);
  }

  // optional string Kpp = 3;
  if (has_kpp()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->kpp().data(), this->kpp().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->kpp(), target);
  }

  // required string FullName = 4;
  if (has_fullname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->fullname().data(), this->fullname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->fullname(), target);
  }

  // optional string ShortName = 5;
  if (has_shortname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->shortname().data(), this->shortname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->shortname(), target);
  }

  // repeated .Diadoc.Api.Proto.Box Boxes = 7;
  for (int i = 0; i < this->boxes_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->boxes(i), target);
  }

  // optional string Ogrn = 8;
  if (has_ogrn()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ogrn().data(), this->ogrn().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->ogrn(), target);
  }

  // optional string FnsParticipantId = 9;
  if (has_fnsparticipantid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->fnsparticipantid().data(), this->fnsparticipantid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->fnsparticipantid(), target);
  }

  // optional .Diadoc.Api.Proto.Address Address = 10;
  if (has_address()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->address(), target);
  }

  // optional string FnsRegistrationDate = 11;
  if (has_fnsregistrationdate()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->fnsregistrationdate().data(), this->fnsregistrationdate().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->fnsregistrationdate(), target);
  }

  // repeated .Diadoc.Api.Proto.Department Departments = 12;
  for (int i = 0; i < this->departments_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->departments(i), target);
  }

  // optional string IfnsCode = 13;
  if (has_ifnscode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ifnscode().data(), this->ifnscode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->ifnscode(), target);
  }

  // optional bool IsPilot = 14;
  if (has_ispilot()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(14, this->ispilot(), target);
  }

  // optional bool IsActive = 15;
  if (has_isactive()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(15, this->isactive(), target);
  }

  // optional bool IsTest = 16;
  if (has_istest()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(16, this->istest(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Organization::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string OrgId = 1;
    if (has_orgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->orgid());
    }

    // required string Inn = 2;
    if (has_inn()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->inn());
    }

    // optional string Kpp = 3;
    if (has_kpp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->kpp());
    }

    // required string FullName = 4;
    if (has_fullname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->fullname());
    }

    // optional string ShortName = 5;
    if (has_shortname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->shortname());
    }

    // optional string Ogrn = 8;
    if (has_ogrn()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ogrn());
    }

    // optional string FnsParticipantId = 9;
    if (has_fnsparticipantid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->fnsparticipantid());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .Diadoc.Api.Proto.Address Address = 10;
    if (has_address()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->address());
    }

    // optional string FnsRegistrationDate = 11;
    if (has_fnsregistrationdate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->fnsregistrationdate());
    }

    // optional string IfnsCode = 13;
    if (has_ifnscode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ifnscode());
    }

    // optional bool IsPilot = 14;
    if (has_ispilot()) {
      total_size += 1 + 1;
    }

    // optional bool IsActive = 15;
    if (has_isactive()) {
      total_size += 1 + 1;
    }

    // optional bool IsTest = 16;
    if (has_istest()) {
      total_size += 2 + 1;
    }

  }
  // repeated .Diadoc.Api.Proto.Box Boxes = 7;
  total_size += 1 * this->boxes_size();
  for (int i = 0; i < this->boxes_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->boxes(i));
  }

  // repeated .Diadoc.Api.Proto.Department Departments = 12;
  total_size += 1 * this->departments_size();
  for (int i = 0; i < this->departments_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->departments(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Organization::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Organization* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Organization*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Organization::MergeFrom(const Organization& from) {
  GOOGLE_CHECK_NE(&from, this);
  boxes_.MergeFrom(from.boxes_);
  departments_.MergeFrom(from.departments_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_orgid()) {
      set_orgid(from.orgid());
    }
    if (from.has_inn()) {
      set_inn(from.inn());
    }
    if (from.has_kpp()) {
      set_kpp(from.kpp());
    }
    if (from.has_fullname()) {
      set_fullname(from.fullname());
    }
    if (from.has_shortname()) {
      set_shortname(from.shortname());
    }
    if (from.has_ogrn()) {
      set_ogrn(from.ogrn());
    }
    if (from.has_fnsparticipantid()) {
      set_fnsparticipantid(from.fnsparticipantid());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_address()) {
      mutable_address()->::Diadoc::Api::Proto::Address::MergeFrom(from.address());
    }
    if (from.has_fnsregistrationdate()) {
      set_fnsregistrationdate(from.fnsregistrationdate());
    }
    if (from.has_ifnscode()) {
      set_ifnscode(from.ifnscode());
    }
    if (from.has_ispilot()) {
      set_ispilot(from.ispilot());
    }
    if (from.has_isactive()) {
      set_isactive(from.isactive());
    }
    if (from.has_istest()) {
      set_istest(from.istest());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Organization::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Organization::CopyFrom(const Organization& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Organization::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000b) != 0x0000000b) return false;

  for (int i = 0; i < boxes_size(); i++) {
    if (!this->boxes(i).IsInitialized()) return false;
  }
  if (has_address()) {
    if (!this->address().IsInitialized()) return false;
  }
  for (int i = 0; i < departments_size(); i++) {
    if (!this->departments(i).IsInitialized()) return false;
  }
  return true;
}

void Organization::Swap(Organization* other) {
  if (other != this) {
    std::swap(orgid_, other->orgid_);
    std::swap(inn_, other->inn_);
    std::swap(kpp_, other->kpp_);
    std::swap(fullname_, other->fullname_);
    std::swap(shortname_, other->shortname_);
    boxes_.Swap(&other->boxes_);
    std::swap(ogrn_, other->ogrn_);
    std::swap(fnsparticipantid_, other->fnsparticipantid_);
    std::swap(address_, other->address_);
    std::swap(fnsregistrationdate_, other->fnsregistrationdate_);
    departments_.Swap(&other->departments_);
    std::swap(ifnscode_, other->ifnscode_);
    std::swap(ispilot_, other->ispilot_);
    std::swap(isactive_, other->isactive_);
    std::swap(istest_, other->istest_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Organization::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Organization_descriptor_;
  metadata.reflection = Organization_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Department::kDepartmentIdFieldNumber;
const int Department::kParentDepartmentIdFieldNumber;
const int Department::kNameFieldNumber;
const int Department::kAbbreviationFieldNumber;
const int Department::kKppFieldNumber;
const int Department::kAddressFieldNumber;
#endif  // !_MSC_VER

Department::Department()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Department::InitAsDefaultInstance() {
  address_ = const_cast< ::Diadoc::Api::Proto::Address*>(&::Diadoc::Api::Proto::Address::default_instance());
}

Department::Department(const Department& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Department::SharedCtor() {
  _cached_size_ = 0;
  departmentid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  parentdepartmentid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  abbreviation_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  kpp_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  address_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Department::~Department() {
  SharedDtor();
}

void Department::SharedDtor() {
  if (departmentid_ != &::google::protobuf::internal::kEmptyString) {
    delete departmentid_;
  }
  if (parentdepartmentid_ != &::google::protobuf::internal::kEmptyString) {
    delete parentdepartmentid_;
  }
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (abbreviation_ != &::google::protobuf::internal::kEmptyString) {
    delete abbreviation_;
  }
  if (kpp_ != &::google::protobuf::internal::kEmptyString) {
    delete kpp_;
  }
  if (this != default_instance_) {
    delete address_;
  }
}

void Department::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Department::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Department_descriptor_;
}

const Department& Department::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Organization_2eproto();
  return *default_instance_;
}

Department* Department::default_instance_ = NULL;

Department* Department::New() const {
  return new Department;
}

void Department::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_departmentid()) {
      if (departmentid_ != &::google::protobuf::internal::kEmptyString) {
        departmentid_->clear();
      }
    }
    if (has_parentdepartmentid()) {
      if (parentdepartmentid_ != &::google::protobuf::internal::kEmptyString) {
        parentdepartmentid_->clear();
      }
    }
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_abbreviation()) {
      if (abbreviation_ != &::google::protobuf::internal::kEmptyString) {
        abbreviation_->clear();
      }
    }
    if (has_kpp()) {
      if (kpp_ != &::google::protobuf::internal::kEmptyString) {
        kpp_->clear();
      }
    }
    if (has_address()) {
      if (address_ != NULL) address_->::Diadoc::Api::Proto::Address::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Department::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string DepartmentId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_departmentid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->departmentid().data(), this->departmentid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_ParentDepartmentId;
        break;
      }

      // required string ParentDepartmentId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ParentDepartmentId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_parentdepartmentid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->parentdepartmentid().data(), this->parentdepartmentid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_Name;
        break;
      }

      // required string Name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_Abbreviation;
        break;
      }

      // optional string Abbreviation = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Abbreviation:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_abbreviation()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->abbreviation().data(), this->abbreviation().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_Kpp;
        break;
      }

      // optional string Kpp = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Kpp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_kpp()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->kpp().data(), this->kpp().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_Address;
        break;
      }

      // optional .Diadoc.Api.Proto.Address Address = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Address:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_address()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Department::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string DepartmentId = 1;
  if (has_departmentid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->departmentid().data(), this->departmentid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->departmentid(), output);
  }

  // required string ParentDepartmentId = 2;
  if (has_parentdepartmentid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->parentdepartmentid().data(), this->parentdepartmentid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->parentdepartmentid(), output);
  }

  // required string Name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->name(), output);
  }

  // optional string Abbreviation = 4;
  if (has_abbreviation()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->abbreviation().data(), this->abbreviation().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->abbreviation(), output);
  }

  // optional string Kpp = 5;
  if (has_kpp()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->kpp().data(), this->kpp().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->kpp(), output);
  }

  // optional .Diadoc.Api.Proto.Address Address = 6;
  if (has_address()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->address(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Department::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string DepartmentId = 1;
  if (has_departmentid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->departmentid().data(), this->departmentid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->departmentid(), target);
  }

  // required string ParentDepartmentId = 2;
  if (has_parentdepartmentid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->parentdepartmentid().data(), this->parentdepartmentid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->parentdepartmentid(), target);
  }

  // required string Name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }

  // optional string Abbreviation = 4;
  if (has_abbreviation()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->abbreviation().data(), this->abbreviation().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->abbreviation(), target);
  }

  // optional string Kpp = 5;
  if (has_kpp()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->kpp().data(), this->kpp().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->kpp(), target);
  }

  // optional .Diadoc.Api.Proto.Address Address = 6;
  if (has_address()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->address(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Department::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string DepartmentId = 1;
    if (has_departmentid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->departmentid());
    }

    // required string ParentDepartmentId = 2;
    if (has_parentdepartmentid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->parentdepartmentid());
    }

    // required string Name = 3;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string Abbreviation = 4;
    if (has_abbreviation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->abbreviation());
    }

    // optional string Kpp = 5;
    if (has_kpp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->kpp());
    }

    // optional .Diadoc.Api.Proto.Address Address = 6;
    if (has_address()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->address());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Department::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Department* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Department*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Department::MergeFrom(const Department& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_departmentid()) {
      set_departmentid(from.departmentid());
    }
    if (from.has_parentdepartmentid()) {
      set_parentdepartmentid(from.parentdepartmentid());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_abbreviation()) {
      set_abbreviation(from.abbreviation());
    }
    if (from.has_kpp()) {
      set_kpp(from.kpp());
    }
    if (from.has_address()) {
      mutable_address()->::Diadoc::Api::Proto::Address::MergeFrom(from.address());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Department::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Department::CopyFrom(const Department& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Department::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_address()) {
    if (!this->address().IsInitialized()) return false;
  }
  return true;
}

void Department::Swap(Department* other) {
  if (other != this) {
    std::swap(departmentid_, other->departmentid_);
    std::swap(parentdepartmentid_, other->parentdepartmentid_);
    std::swap(name_, other->name_);
    std::swap(abbreviation_, other->abbreviation_);
    std::swap(kpp_, other->kpp_);
    std::swap(address_, other->address_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Department::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Department_descriptor_;
  metadata.reflection = Department_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Box::kBoxIdFieldNumber;
const int Box::kTitleFieldNumber;
const int Box::kOrganizationFieldNumber;
#endif  // !_MSC_VER

Box::Box()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Box::InitAsDefaultInstance() {
  organization_ = const_cast< ::Diadoc::Api::Proto::Organization*>(&::Diadoc::Api::Proto::Organization::default_instance());
}

Box::Box(const Box& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Box::SharedCtor() {
  _cached_size_ = 0;
  boxid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  title_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  organization_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Box::~Box() {
  SharedDtor();
}

void Box::SharedDtor() {
  if (boxid_ != &::google::protobuf::internal::kEmptyString) {
    delete boxid_;
  }
  if (title_ != &::google::protobuf::internal::kEmptyString) {
    delete title_;
  }
  if (this != default_instance_) {
    delete organization_;
  }
}

void Box::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Box::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Box_descriptor_;
}

const Box& Box::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Organization_2eproto();
  return *default_instance_;
}

Box* Box::default_instance_ = NULL;

Box* Box::New() const {
  return new Box;
}

void Box::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_boxid()) {
      if (boxid_ != &::google::protobuf::internal::kEmptyString) {
        boxid_->clear();
      }
    }
    if (has_title()) {
      if (title_ != &::google::protobuf::internal::kEmptyString) {
        title_->clear();
      }
    }
    if (has_organization()) {
      if (organization_ != NULL) organization_->::Diadoc::Api::Proto::Organization::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Box::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string BoxId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_boxid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->boxid().data(), this->boxid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_Title;
        break;
      }

      // required string Title = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Title:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_title()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->title().data(), this->title().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_Organization;
        break;
      }

      // optional .Diadoc.Api.Proto.Organization Organization = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Organization:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_organization()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Box::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string BoxId = 1;
  if (has_boxid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->boxid().data(), this->boxid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->boxid(), output);
  }

  // required string Title = 2;
  if (has_title()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->title().data(), this->title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->title(), output);
  }

  // optional .Diadoc.Api.Proto.Organization Organization = 3;
  if (has_organization()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->organization(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Box::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string BoxId = 1;
  if (has_boxid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->boxid().data(), this->boxid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->boxid(), target);
  }

  // required string Title = 2;
  if (has_title()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->title().data(), this->title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->title(), target);
  }

  // optional .Diadoc.Api.Proto.Organization Organization = 3;
  if (has_organization()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->organization(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Box::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string BoxId = 1;
    if (has_boxid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->boxid());
    }

    // required string Title = 2;
    if (has_title()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->title());
    }

    // optional .Diadoc.Api.Proto.Organization Organization = 3;
    if (has_organization()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->organization());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Box::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Box* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Box*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Box::MergeFrom(const Box& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_boxid()) {
      set_boxid(from.boxid());
    }
    if (from.has_title()) {
      set_title(from.title());
    }
    if (from.has_organization()) {
      mutable_organization()->::Diadoc::Api::Proto::Organization::MergeFrom(from.organization());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Box::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Box::CopyFrom(const Box& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Box::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_organization()) {
    if (!this->organization().IsInitialized()) return false;
  }
  return true;
}

void Box::Swap(Box* other) {
  if (other != this) {
    std::swap(boxid_, other->boxid_);
    std::swap(title_, other->title_);
    std::swap(organization_, other->organization_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Box::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Box_descriptor_;
  metadata.reflection = Box_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Proto
}  // namespace Api
}  // namespace Diadoc

// @@protoc_insertion_point(global_scope)
